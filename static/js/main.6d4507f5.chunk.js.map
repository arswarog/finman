{"version":3,"sources":["components/MoneyView.module.scss","pages/TransactionsPage.module.scss","components/Header.module.scss","App.module.scss","components/NavBar.tsx","components/Header.tsx","finances/money.class.ts","components/MoneyView.tsx","components/TxList.tsx","components/TxList.utils.ts","pages/TransactionsPage.tsx","App.tsx","serviceWorker.ts","index.tsx","components/TxList.module.scss"],"names":["module","exports","NavBar","to","Header","title","className","styles","header","currencies","RUB","code","symbol","precision","Money","amount","currency","subunits","this","toFixed","Error","JSON","stringify","parts","trim","split","length","toUpperCase","units","Number","isNaN","Math","round","data","money","floor","toString","substr","empty","MoneyView","moneyView","entire","getEntire","fractional","getFractional","getSymbol","TxList","list","console","log","txList","map","item","first","random","second","date","format","Date","getTime","makeTxList","tx","index","key","txItem","txItem__left","txItem__first","txItem__second","txItem__right","txItem__amount","txItem__date","TransactionsPage","page","filter","id","Hello","React","lazy","App","useState","hello","useOnlineStatus","path","fallback","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","customerData","ssn","name","age","email","request","indexedDB","open","onerror","event","onsuccess","db","target","result","transaction","objectStore","add","onupgradeneeded","createObjectStore","keyPath","i","createIndex","unique"],"mappings":"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","file":"static/js/main.6d4507f5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"moneyView\":\"MoneyView_moneyView__2U7sP\",\"fractional\":\"MoneyView_fractional__1hdQj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"TransactionsPage_page__1uE4j\",\"filter\":\"TransactionsPage_filter__3x4B8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2XAj3\",\"title\":\"Header_title__284EO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\",\"App-logo\":\"App_App-logo__1GLNd\",\"App-logo-spin\":\"App_App-logo-spin__1EbLw\",\"App-header\":\"App_App-header__3nnPn\",\"App-link\":\"App_App-link__TRj1P\"};","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const NavBar = () => {\n    return (\n        <nav>\n            <ul>\n                <li>\n                    <Link to=\"/finman/\">Home</Link>\n                </li>\n                <li>\n                    <Link to=\"/finman/transactions\">Transactions</Link>\n                </li>\n            </ul>\n        </nav>\n    );\n};\n","import React from 'react';\n\nimport styles from './Header.module.scss';\n\ninterface IParams {\n    title: string;\n}\n\nexport const Header = ({title}: IParams) => {\n    return (\n        <header className={styles.header}>\n            <h1 className={styles.title}>{title}</h1>\n        </header>\n    );\n};\n","const DEFAULT_CURRENCY = 'RUB';\n\nexport interface ICurrency {\n    code: string;\n    symbol: string;\n    precision: number;\n}\n\nexport const currencies: { [key: string]: ICurrency } = {\n    RUB: {code: 'RUB', symbol: '₽', precision: 2},\n};\n\nexport class Money {\n    public readonly amount: string;\n    public readonly subunits: number;\n    public readonly currency: ICurrency;\n\n    public static fromJSON(data: any): Money {\n        return new Money(data as string);\n    }\n\n    public static readonly empty = new Money('0 ' + DEFAULT_CURRENCY);\n\n    constructor(money: string | Money);\n    constructor(currency: Money, subunits: number);\n    constructor(amount: string | number, currency: string);\n    constructor(amount: Money | string | number, currency?: string | number) {\n        if (amount instanceof Money) {\n            if (typeof currency === 'number') {\n                this.currency = amount.currency;\n                this.subunits = currency;\n                this.amount = (this.subunits / 10 ** this.currency.precision).toFixed(2);\n            } else {\n                this.currency = amount.currency;\n                this.subunits = amount.subunits;\n                this.amount = amount.amount;\n            }\n            return;\n        }\n        if (amount && typeof amount === 'object')\n            throw new Error(`Argument \"${JSON.stringify(amount)}\" must be valid Money`);\n\n        if (!currency) {\n            if (amount && typeof amount === 'string') {\n                let parts = amount.trim().split(' ');\n                if (!parts || parts.length !== 2)\n                    throw new Error(`Money \"${amount}\" must have invalid format`);\n\n                amount = parts[0];\n                currency = parts[1];\n            } else\n                throw new Error(`Amount \"${amount}\" must be a string if currency not specified`);\n        }\n\n        if (typeof currency !== 'string')\n            throw new Error(`Invalid currency \"${currency}\"`);\n\n        if (typeof amount === 'number')\n            amount = '' + amount;\n\n        currency = currency.toUpperCase();\n\n        this.currency = currencies[currency];\n        if (!this.currency)\n            throw new Error(`Unsupported currency \"${currency}\"`);\n\n        const units = +amount;\n        if (Number.isNaN(units))\n            throw new Error(`Invalid amount \"${amount}\"`);\n\n        this.subunits = Math.round(units * 10 ** this.currency.precision);\n        this.amount = (this.subunits / 10 ** this.currency.precision).toFixed(2);\n    }\n\n    public toString() {\n        if (this.subunits)\n            return this.amount + ' ' + this.currency.symbol;\n        else\n            return '0 ' + this.currency.symbol;\n    }\n\n    public toJSON() {\n        if (this.subunits)\n            return this.amount + ' ' + this.currency.code;\n        else\n            return '0 ' + this.currency.code;\n    }\n\n    public add(money: Money): Money {\n        if (this.currency.code !== money.currency.code)\n            throw new Error(`Can not do any operations with different currencies`);\n        return new Money(this, this.subunits + money.subunits);\n    }\n\n    public sub(money: Money): Money {\n        if (this.currency.code !== money.currency.code)\n            throw new Error(`Can not do any operations with different currencies`);\n        return new Money(this, this.subunits - money.subunits);\n    }\n\n    public equal(money: Money): boolean {\n        if (this.currency.code !== money.currency.code)\n            return false;\n        return this.subunits === money.subunits;\n    }\n\n    public getEntire(): string {\n        return Math.floor(this.subunits / 10 ** this.currency.precision).toString();\n    }\n\n    public getFractional(): string {\n        return (this.subunits / 10 ** this.currency.precision)\n            .toFixed(this.currency.precision)\n            .substr(-this.currency.precision);\n    }\n\n    public getSymbol(): string {\n        return this.currency.symbol;\n    }\n}\n","import React from 'react';\nimport { Money } from '../finances/money.class';\n\nimport styles from './MoneyView.module.scss';\n\ninterface IProps {\n    money: Money;\n}\n\n\nexport const MoneyView = ({money}: IProps) => {\n    return (\n        <div className={styles.moneyView}>\n            <span className={styles.entire}>{money.getEntire()}</span>\n            <span className={styles.fractional}>{money.getFractional()}</span>\n            <span className={styles.currency}>{money.getSymbol()}</span>\n        </div>\n    );\n};\n","import React from 'react';\nimport { ITransaction } from '../finances/transaction.types';\n\nimport styles from './TxList.module.scss';\nimport { Link } from 'react-router-dom';\nimport { makeTxList } from './TxList.utils';\nimport { MoneyView } from './MoneyView';\n\ninterface IProps {\n    list: ITransaction[];\n}\n\nexport const TxList = ({list}: IProps) => {\n    console.log('render');\n\n    const txList = makeTxList(list);\n\n    return (\n        <ul className={styles.txList}>\n            {txList.map((tx, index) => (\n                <li key={index} className={styles.txItem}>\n                    <div className={styles.txItem__left}>\n                        <div className={styles.txItem__first}>\n                            {tx.first}\n                        </div>\n                        <div className={styles.txItem__second}>\n                            {tx.second}\n                        </div>\n                    </div>\n                    <div className={styles.txItem__right}>\n                        <div className={styles.txItem__amount}>\n                            <MoneyView money={tx.amount}/>\n                        </div>\n                        <div className={styles.txItem__date}>\n                            {tx.date}\n                        </div>\n                    </div>\n                </li>\n            ))}\n        </ul>\n    );\n};\n\n","import { ITransaction } from '../finances/transaction.types';\nimport { format } from 'date-fns';\nimport { Money } from '../finances/money.class';\n\nexport interface IDisplayedTransaction {\n    first: string;\n    second: string;\n    amount: Money;\n    date: string;\n}\n\nexport function makeTxList(list: ITransaction[]): IDisplayedTransaction[] {\n    return list.map(item => {\n        return {\n            first: Math.random().toString(36).substr(2),\n            second:  Math.random().toString(36).substr(2),\n            amount: new Money(Math.floor(Math.random() * 100000) / 100 + ' RUB'),\n            date: format(new Date().getTime() - Math.floor(Math.random() * 100000000000), 'PP'),\n        };\n    });\n}\n","import React from 'react';\n\nimport styles from './TransactionsPage.module.scss';\nimport { Header } from '../components/Header';\nimport { TxList } from '../components/TxList';\nimport { ITransaction } from '../finances/transaction.types';\n\nexport const TransactionsPage = () => {\n    const month = '2020-05';\n\n    const transactions: ITransaction[] = [\n        {id: 1},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n        {id: 2},\n    ] as any;\n\n    return (\n        <div className={styles.page}>\n            <Header title={`Transactions of ${month}`}/>\n            <main>\n                <div className={styles.filter}>\n                    <button>Все</button>\n                    <button>Траты</button>\n                    <button>Приход</button>\n                </div>\n                <TxList list={transactions}/>\n            </main>\n        </div>\n    );\n};\n","import React, { useEffect, useState, Suspense } from 'react';\nimport styles from './App.module.scss';\nimport { useOnlineStatus } from '@21kb/react-online-status-hook/lib';\nimport { Redirect, Route, Switch } from 'react-router';\nimport { BrowserRouter } from 'react-router-dom';\nimport { NavBar } from './components/NavBar';\nimport { TransactionsPage } from './pages/TransactionsPage';\n\nconst Hello = React.lazy(() => import('./Hello'));\n\nfunction App() {\n    const [ip, setIp] = useState();\n    const [hello, setHello] = useState();\n    const online = useOnlineStatus();\n\n    return (\n        <div className={styles.App}>\n            <BrowserRouter>\n                <Switch>\n                    <Route path=\"/transactions\">\n                        <TransactionsPage/>\n                    </Route>\n                    <Redirect to=\"/transactions\"/>\n                </Switch>\n                <main>\n                    {hello &&\n                    <Suspense fallback={<div>Loading...</div>}>\n                        <Hello/>\n                    </Suspense>}\n                </main>\n                <NavBar/>\n            </BrowserRouter>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst SW_DEBUG = false;\n\nconst isLocalhost = SW_DEBUG ||\n    Boolean(\n        window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n        ),\n    );\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if ((SW_DEBUG || process.env.NODE_ENV === 'production') && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href,\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log('Offline Mode ready');\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n             .register(swUrl)\n             .then(registration => {\n                 registration.onupdatefound = () => {\n                     const installingWorker = registration.installing;\n                     if (installingWorker == null) {\n                         return;\n                     }\n                     installingWorker.onstatechange = () => {\n                         if (installingWorker.state === 'installed') {\n                             if (navigator.serviceWorker.controller) {\n                                 // At this point, the updated precached content has been fetched,\n                                 // but the previous service worker will still serve the older\n                                 // content until all client tabs are closed.\n                                 console.log(\n                                     'New content is available and will be used when all ' +\n                                     'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                                 );\n\n                                 // Execute callback\n                                 if (config && config.onUpdate) {\n                                     config.onUpdate(registration);\n                                 }\n                             } else {\n                                 // At this point, everything has been precached.\n                                 // It's the perfect time to display a\n                                 // \"Content is cached for offline use.\" message.\n                                 console.log('Content is cached for offline use.');\n\n                                 // Execute callback\n                                 if (config && config.onSuccess) {\n                                     config.onSuccess(registration);\n                                 }\n                             }\n                         }\n                     };\n                 };\n             })\n             .catch(error => {\n                 console.error('Error during service worker registration:', error);\n             });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n                 .then(registration => {\n                     registration.unregister();\n                 })\n                 .catch(error => {\n                     console.error(error.message);\n                 });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n// This is what our customer data looks like.\nconst customerData = [\n    {ssn: '444-44-4444', name: 'Bill', age: 35, email: 'bill@company.com'},\n    {ssn: '555-55-5555', name: 'Donna', age: 32, email: 'donna@home.org'},\n];\nconst dbName = 'the_name';\n\nconst request = indexedDB.open(dbName, 2);\n\nrequest.onerror = function (event) {\n    // Handle errors.\n};\nrequest.onsuccess = function (event: any) {\n    const db = event.target.result;\n    (window as any).db = db;\n\n    const transaction = db.transaction(['customers'], 'readwrite');\n    const objectStore = transaction.objectStore('customers');\n    const r = objectStore.add({age: 44, email: 'asd', name: 'asd', ssn: '123'});\n    r.onsuccess = (event) => console.log(event);\n};\nrequest.onupgradeneeded = function (event: any) {\n    const db = event.target.result;\n\n    // Create an objectStore to hold information about our customers. We're\n    // going to use \"ssn\" as our key path because it's guaranteed to be\n    // unique.\n    const objectStore = db.createObjectStore('customers', {keyPath: 'ssn'});\n\n    // Create an index to search customers by name. We may have duplicates\n    // so we can't use a unique index.\n    objectStore.createIndex('name', 'name', {unique: false});\n\n    // Create an index to search customers by email. We want to ensure that\n    // no two customers have the same email, so use a unique index.\n    objectStore.createIndex('email', 'email', {unique: true});\n\n    // Store values in the newly created objectStore.\n    for (let i in customerData) {\n        objectStore.add(customerData[i]);\n    }\n};\n\n\n\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"txList\":\"TxList_txList__3-XtF\",\"txItem\":\"TxList_txItem__3VBEt\",\"txItem__first\":\"TxList_txItem__first__2yLY4\",\"txItem__second\":\"TxList_txItem__second__2RrO9\",\"txItem__amount\":\"TxList_txItem__amount__HFCrx\",\"txItem__date\":\"TxList_txItem__date__2g3_a\",\"empty\":\"TxList_empty__3Bdc4\"};"],"sourceRoot":""}