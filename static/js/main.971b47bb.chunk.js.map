{"version":3,"sources":["components/Header.module.scss","App.module.scss","pages/LicensesPage.module.scss","../node_modules/@ionic/core/dist/esm-es5 lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","../node_modules/ionicons/dist/esm-es5 lazy /^/.//.*/.entry/.js$/ include: //.entry/.js$/ exclude: //.system/.entry/.js$/ groupOptions: {} namespace object","ui-kit/Icon.tsx","components/Header.tsx","widgets/SwipeWidget.tsx","store/reatom.ts","ui-kit/Main.tsx","libs/packable/packable.types.ts","libs/packable/packable.ts","libs/packable/decorator.ts","models/money/money.class.ts","components/MoneyView.tsx","widgets/StatBox.tsx","widgets/GripQuickDetails.tsx","components/CategoryIcon.tsx","models/transaction/transaction.types.ts","widgets/QuickCategories.tsx","widgets/AccountWidget.tsx","atoms/account-grips/account-grips.actions.ts","atoms/account-grips/account-grips.atom.ts","widgets/LastMonthsList.tsx","pages/AccountsPage.tsx","atoms/months/months.actions.ts","widgets/TxList.tsx","widgets/TxList.utils.ts","widgets/MonthTxList.tsx","widgets/MonthViewWidget.tsx","atoms/month-grips/month-grips.actions.ts","atoms/month-grips/month-grips.atom.ts","pages/AccountMonthsPage.tsx","routes/accounts.ts","routes/config.ts","atoms/client/client.actions.ts","atoms/client/client.atom.ts","atoms/accounts/accounts.actions.ts","atoms/accounts/accounts.atom.ts","atoms/months/months.atom.ts","atoms/categories/categories.actions.ts","models/category/category.class.ts","atoms/categories/categories.atom.ts","store/store.ts","models/transaction/transaction.actions.ts","components/inputs/BaseInput.tsx","components/inputs/MoneyField.tsx","components/inputs/TxTypeField.tsx","components/inputs/TextField.tsx","components/inputs/DayDateField.tsx","widgets/TransactionForm.tsx","ui-kit/Section.tsx","ui-kit/Card.tsx","pages/TransactionsPage.tsx","routes/transactions.ts","pages/TransactionAddPage.tsx","routes/paths.ts","pages/LicensesPage.tsx","routes/routes.tsx","pages/MainMenu.tsx","routes/Link.tsx","widgets/NavBar.tsx","libs/indexed-db/db.types.ts","libs/indexed-db/db.utils.ts","libs/indexed-db/collection.ts","libs/indexed-db/db.ts","db/schemes/account.scheme.ts","models/common/common.types.ts","db/schemes/month.scheme.ts","models/month/month.types.ts","models/transaction/transactions.utils.ts","models/common/date.utils.ts","models/transaction/transaction.class.ts","models/day/day.class.ts","models/month/month.class.ts","models/account/chain.utils.ts","models/account/account.class.ts","models/category/categoryBlock.class.ts","db/data/initialCategories.ts","db/schemes/categories.scheme.ts","db/db.ts","db/handlers/accounts.ts","db/handlers/months.ts","db/handlers/categoriesBlocks.ts","sagas/saga-launcher.ts","sagas/sagas/refresh.saga.ts","sagas/helpers/helpers.ts","sagas/utils/categoriesBlock.saga.ts","models/abstract-grip/grip.class.ts","models/abstract-grip/month-grip.class.ts","models/abstract-grip/transaction-grip.class.ts","models/account-grip/day-grip.class.ts","models/abstract-grip/day-grip.class.ts","models/account-grip/month-grip.class.ts","models/account-grip/grip.class.ts","sagas/sagas/update-account-grips.saga.ts","sagas/utils/month.saga.ts","sagas/utils/account.saga.ts","sagas/sagas/update-month-grips.saga.ts","sagas/sagas/transaction-add.saga.ts","sagas/sagas/transaction-update.saga.ts","App.tsx","atoms/client/client.service.ts","db/hooks.ts","serviceWorker.ts","index.tsx","widgets/MonthViewWidget.module.scss","widgets/TxList.module.scss","components/MoneyView.module.scss","widgets/SwipeWidget.module.scss","widgets/MonthTxList.module.scss","pages/TransactionsPage.module.scss"],"names":["module","exports","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","Icons","icons","IconRegistry","IonIcons","Icon","icon","name","className","size","mode","Header","title","back","history","useHistory","onClick","useCallback","goBack","replace","role","aria-label","SwipeWidget","swipeEl","showButtons","children","onChange","current","_","items","flat","currentIndex","findIndex","item","key","console","log","useEffect","slide","prev","next","length","styles","swipeWidget","ref","swipe","callback","index","startSlide","speed","auto","SwipeItemWidget","swipeItem","useForceUpdate","useReducer","s","defaultMapper","atomValue","useAtom","atom","selector","deps","store","useContext","context","forceUpdate","value","getState","subscribe","state","Main","styled","main","EncoderSymbol","Symbol","DecoderSymbol","Packer","decoder","encoder","decode","encode","this","target","prototype","packer","getSafe","rule","String","Number","Boolean","forPrimitive","Array","isArray","forArray","type","raw","fields","list","entries","field","for","data","reduce","obj","afterDecode","forObject","val","undefined","FieldsSymbol","PackableClass","constructor","forClass","Packable","init","currencies","RUB","symbol","precision","Money","fromJSON","toJSON","initResult","subunits","currency","amount","toFixed","clone","parts","trim","split","amountText","currencyName","toUpperCase","units","isNaN","Math","round","money","floor","toString","substr","empty","create","MoneyView","moneyView","entire","JSON","stringify","getEntire","fractional","getFractional","getSymbol","BarColor","StatBoxContainer","div","StatBox","progress","color","percent","GripQuickDetails","grip","month","months","income","Neutral","expense","planed","total","balance","getQuickDetails","stats","addCircleOutline","removeCircleOutline","calendarOutline","cashOutline","row","cell","cellIndex","TransactionType","CategoryIconBox","span","process","props","CategoryIcon","category","image","width","style","backgroundImage","QuickCategoriesBox","QuickCategories","categories","parent","defaultTxType","Income","Link","to","paths","transactions","add","account","AccountWidget","data-toggle","cogOutline","href","pencilOutline","closeOutline","arrowUpCircleOutline","NS","chooseAccountGrip","declareAction","updateAccountGrip","updateAccountGripSuccess","updateAccountGrips","updateAccountGripsSuccess","AccountGrips","declareAtom","currentID","accounts","Map","on","choose","get","update","set","grips","acc","LastMonthsList","slice","margin","balanceOnEnd","AccountsPage","chooseAccountHandler","useAction","from","values","loadMonths","loadMonthsSuccess","loadMonthsFailed","saveMonths","saveMonthsSuccess","saveMonthsFailed","TxList","React","memo","txList","dayDate","first","second","dateString","date","format","Date","makeTxList","tx","txItem","txItem__left","txItem__first","txItem__second","txItem__right","txItem__amount","txItem__date","MonthTxList","days","day","MonthViewHeadWidget","brief","circumference","totalSum","incomePercent","expensePercent","head","info","circle","height","transform","r","cx","cy","stroke","strokeDasharray","join","updateMonthGripSuccess","updateMonthGripsSuccess","MonthGrips","AccountMonthsPage","params","useRouteMatch","reverse","newMonthNum","lastMonthDate","AccountMonthsPageDisplay","monthsList","changeMonth","loadMonth","monthIndex","monthBrief","prevMonth","nextMonth","has","currentMonth","view","accountsRoutes","path","exact","component","setOnlineStatus","refresh","Client","online","chooseAccount","loadAccounts","loadAccountsSuccess","loadAccountsFailed","saveAccount","saveAccountSuccess","saveAccountFailed","Accounts","load","save","Months","loadCategories","loadCategoriesSuccess","loadCategoriesFailed","saveCategories","Category","assign","defaultTransactionType","v4","setParent","isInitial","Expense","RootCategory","filter","Categories","collection","block","tree","flatMap","createStore","combine","connectReduxDevtools","action","group","payload","groupEnd","addTransaction","BaseInput","label","clearable","placeholder","hint","render","useField","input","useRef","useState","active","setActive","onFocus","onBlur","onClearInput","focus","htmlFor","NumberFormatCustom","inputRef","other","getInputRef","onValueChange","prefix","thousandSeparator","isNumericString","MoneyField","meta","CheckboxWrapper","TxTypeCheckbox","disabled","checked","TxTypeField","types","TextField","DayDateField","TransactionForm","onSubmit","validate","initialValues","handleSubmit","form","submitting","pristine","noValidate","autoComplete","SectionContainer","section","full","SectionTitle","h3","Section","Card","URLSearchParams","addQueryString","transactionRoutes","useLocation","search","currentAccount","setData","dispatch","errors","page","home","licenses","menu","LicenseItem","link","author","license","routes","marginLeft","marginRight","ReactRouterDom","NavLink","links","walletOutline","ellipsisHorizontalOutline","NavBar","DBStatus","eventLogger","emitter","emitterName","eventName","forEach","addEventListener","event","Collection","db","scheme","transaction","storage","objectStore","reject","request","onsuccess","result","onerror","error","query","count","all","getAll","put","IndexedDB","dbName","schemes","onInstall","onUpgrade","listeners","_status","Initializing","window","indexedDB","find","version","max","model","dbVersion","openDB","Ready","Migrating","getAccessor","fn","push","setTimeout","status","setStatus","openRequest","open","isUpgrade","oldVersion","newVersion","Upgrading","objectStoreNames","warn","createObjectStore","keyPath","upgrade","a","Failed","SyncStatus","AccountScheme","MonthScheme","summaryPacker","extendSummaryPacker","balanceOnStart","EmptySummary","EmptyExtendSummary","freeze","monthBriefPacker","maybe","summary","prevMonths","prevVersions","dataHash","EMPTY_SUMMARY","calculateSummary","Removed","sub","addSummary","base","equal","checkSummary","parseMonthDate","match","year","getFullYear","getMonth","dayDateToMonth","Transaction","createdAt","updatedAt","setAmount","uuidGenerator","Day","dateTime","getDate","parseDayDate","Month","getDataHash","generateID","timestamp","daysInMonth","getDaysInMonth","syncStatus","Fixed","hash","sha1","monthID","padStart","ts","blocks","revisions","getBrief","NoSynced","Prepared","Syncing","FullySynced","createDayDate","startBalance","calculateSummaryFromStartBalance","every","createDay","newDay","isDateOfMonth","dayIndex","sort","b","splice","baseSummary","updateMonthChain","additions","old","findChain","chain","completed","RequiredMonthsError","pop","isVersionOfMonth","CanNotFastForwardMonthError","preFirstID","preFirstIndex","monthsNumbersSet","Set","monthsNumbers","table","element","oldEl","check","newChain","i","MonthChainError","checkChain","nextId","lastBlock","nextID","reason","invalidMonth","Account","fullMonths","last","required","categoriesBlockId","CategoriesBlock","initialsCategories","createInitial","defaultType","child","exists","CategoryConflictError","toLowerCase","toRemove","message","initialCategories","CategoriesScheme","defaultAccount","categoriesBlock","createInitialBlock","getTime","UNSAFE_updateCategoriesBlock","handlers","addActionHandler","handler","getType","localStorage","setItem","getItem","sagaLauncher","sagas","saga","actionCreator","register","takeEvery","sagaOptions","channel","stdChannel","runSaga","SagaPacker","call","PackedSaga","originalSaga","refreshSaga","take","resultAction","onAction","selectAtomFn","SagaUtils","selectAtom","getTimestamp","getTimestampFn","select","getCategoriesBlockSaga","CategoriesBlockUtils","categoriesBlocks","AbstractGrip","firstMonthDate","tags","toStringTag","AbstractMonthGrip","lastSum","sum","TransactionGrip","changeAmount","sourceTxs","AccountDayGrip","negative","gripTransactions","isPositive","isNegative","AccountMonthGrip","AccountGrip","makeMonthGripBriefFromMonthBrief","updateAccountGripsSaga","updateAccountGripSaga","fork","f","getMonthsByIdsSaga","getMonthSaga","saveMonthsSaga","MonthUtils","getByIds","notExists","monthDate","createFirstBlock","createNextBlock","indexOfMonth","monthsIds","monthsToSave","lastMonth","newMonth","updated","updatePrevMonths","selectAccountSaga","getAccountGripSaga","updateAccountSaga","saveAccountSaga","AccountUtils","getGrip","currentMonthIndex","prevMonthIndex","accountToUpdate","updateHead","toIndex","additionalMonths","monthsToUpdate","existsMonth","previousMonth","currentMonthId","updateMonthGripsSaga","updateMonthGripSaga","accountGrip","makeMonth","addTransactionSaga","setTitle","setCategory","getDay","updatedMonth","updateDay","transactionUpdateSaga","App","onReady","onChangeStatusEvent","addStatusListener","removeStatusListener","useDBReady","route","navigator","onLine","start","location","hostname","ReactDOM","StrictMode","Provider","document","getElementById","serviceWorker","ready","registration","unregister","catch"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,OAAS,uBAAuB,MAAQ,wB,oBCA1DD,EAAOC,QAAU,CAAC,IAAM,iBAAiB,WAAW,sBAAsB,gBAAgB,2BAA2B,aAAa,wBAAwB,WAAW,wB,0CCArKD,EAAOC,QAAU,CAAC,SAAW,iC,gFCD7B,IAAIC,EAAM,CACT,8BAA+B,CAC9B,IACA,GAED,uBAAwB,CACvB,IACA,GAED,uBAAwB,CACvB,IACA,GAED,0BAA2B,CAC1B,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,wBAAyB,CACxB,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,sBAAuB,CACtB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,mCAAoC,CACnC,IACA,IAED,uBAAwB,CACvB,IACA,IAED,+BAAgC,CAC/B,IACA,IAED,wBAAyB,CACxB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,wBAAyB,CACxB,IACA,IAED,uBAAwB,CACvB,IACA,GAED,uBAAwB,CACvB,IACA,IAED,yBAA0B,CACzB,IACA,GAED,8BAA+B,CAC9B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,+BAAgC,CAC/B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,yBAA0B,CACzB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,sBAAuB,CACtB,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,wBAAyB,CACxB,IACA,IAED,gCAAiC,CAChC,IACA,KAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC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","file":"static/js/main.971b47bb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2XAj3\",\"title\":\"Header_title__284EO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\",\"App-logo\":\"App_App-logo__1GLNd\",\"App-logo-spin\":\"App_App-logo-spin__1EbLw\",\"App-header\":\"App_App-header__3nnPn\",\"App-link\":\"App_App-link__TRj1P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"licenses\":\"LicensesPage_licenses__3Ik4Y\"};","var map = {\n\t\"./ion-action-sheet.entry.js\": [\n\t\t323,\n\t\t5\n\t],\n\t\"./ion-alert.entry.js\": [\n\t\t324,\n\t\t6\n\t],\n\t\"./ion-app_8.entry.js\": [\n\t\t325,\n\t\t7\n\t],\n\t\"./ion-avatar_3.entry.js\": [\n\t\t326,\n\t\t18\n\t],\n\t\"./ion-back-button.entry.js\": [\n\t\t327,\n\t\t19\n\t],\n\t\"./ion-backdrop.entry.js\": [\n\t\t328,\n\t\t43\n\t],\n\t\"./ion-button_2.entry.js\": [\n\t\t329,\n\t\t20\n\t],\n\t\"./ion-card_5.entry.js\": [\n\t\t330,\n\t\t21\n\t],\n\t\"./ion-checkbox.entry.js\": [\n\t\t331,\n\t\t22\n\t],\n\t\"./ion-chip.entry.js\": [\n\t\t332,\n\t\t23\n\t],\n\t\"./ion-col_3.entry.js\": [\n\t\t333,\n\t\t44\n\t],\n\t\"./ion-datetime_3.entry.js\": [\n\t\t334,\n\t\t10\n\t],\n\t\"./ion-fab_3.entry.js\": [\n\t\t335,\n\t\t24\n\t],\n\t\"./ion-img.entry.js\": [\n\t\t336,\n\t\t45\n\t],\n\t\"./ion-infinite-scroll_2.entry.js\": [\n\t\t337,\n\t\t46\n\t],\n\t\"./ion-input.entry.js\": [\n\t\t338,\n\t\t25\n\t],\n\t\"./ion-item-option_3.entry.js\": [\n\t\t339,\n\t\t26\n\t],\n\t\"./ion-item_8.entry.js\": [\n\t\t340,\n\t\t27\n\t],\n\t\"./ion-loading.entry.js\": [\n\t\t341,\n\t\t28\n\t],\n\t\"./ion-menu_3.entry.js\": [\n\t\t342,\n\t\t29\n\t],\n\t\"./ion-modal.entry.js\": [\n\t\t343,\n\t\t8\n\t],\n\t\"./ion-nav_2.entry.js\": [\n\t\t344,\n\t\t15\n\t],\n\t\"./ion-popover.entry.js\": [\n\t\t345,\n\t\t9\n\t],\n\t\"./ion-progress-bar.entry.js\": [\n\t\t346,\n\t\t30\n\t],\n\t\"./ion-radio_2.entry.js\": [\n\t\t347,\n\t\t31\n\t],\n\t\"./ion-range.entry.js\": [\n\t\t348,\n\t\t32\n\t],\n\t\"./ion-refresher_2.entry.js\": [\n\t\t349,\n\t\t11\n\t],\n\t\"./ion-reorder_2.entry.js\": [\n\t\t350,\n\t\t17\n\t],\n\t\"./ion-ripple-effect.entry.js\": [\n\t\t351,\n\t\t47\n\t],\n\t\"./ion-route_4.entry.js\": [\n\t\t352,\n\t\t33\n\t],\n\t\"./ion-searchbar.entry.js\": [\n\t\t353,\n\t\t34\n\t],\n\t\"./ion-segment_2.entry.js\": [\n\t\t354,\n\t\t35\n\t],\n\t\"./ion-select_3.entry.js\": [\n\t\t355,\n\t\t36\n\t],\n\t\"./ion-slide_2.entry.js\": [\n\t\t356,\n\t\t48\n\t],\n\t\"./ion-spinner.entry.js\": [\n\t\t357,\n\t\t13\n\t],\n\t\"./ion-split-pane.entry.js\": [\n\t\t358,\n\t\t49\n\t],\n\t\"./ion-tab-bar_2.entry.js\": [\n\t\t359,\n\t\t37\n\t],\n\t\"./ion-tab_2.entry.js\": [\n\t\t360,\n\t\t16\n\t],\n\t\"./ion-text.entry.js\": [\n\t\t361,\n\t\t38\n\t],\n\t\"./ion-textarea.entry.js\": [\n\t\t362,\n\t\t39\n\t],\n\t\"./ion-toast.entry.js\": [\n\t\t363,\n\t\t40\n\t],\n\t\"./ion-toggle.entry.js\": [\n\t\t364,\n\t\t12\n\t],\n\t\"./ion-virtual-scroll.entry.js\": [\n\t\t365,\n\t\t50\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 201;\nmodule.exports = webpackAsyncContext;","var map = {\n\t\"./ion-icon.entry.js\": [\n\t\t369,\n\t\t57\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 223;\nmodule.exports = webpackAsyncContext;","import { IonIcon } from '@ionic/react';\nimport React from 'react';\nimport * as IonIcons from 'ionicons';\nimport * as icons from 'ionicons/icons';\n\nexport const Icons = icons;\n\nconst IconRegistry = {\n    'list-outline': icons.notificationsOutline,\n    'menu-outline': icons.menuOutline,\n    'close-circle': icons.closeCircle,\n    'notifications-outline': icons.notificationsOutline,\n    'chevron-back-outline': icons.chevronBackOutline,\n};\n\nIonIcons.addIcons(IconRegistry);\n\ninterface IProps {\n    name: string;\n    className?: string;\n    size?: string;\n}\n\nexport const Icon = ({icon, name, className, size}: IProps & any) => {\n    className = className || 'icon';\n    if (!icon && name) {\n        if (!IconRegistry[name])\n            throw new Error(`Icon \"${name}\" not loaded`);\n        icon = IconRegistry[name];\n    }\n    return <IonIcon mode=\"ios\" icon={icon} className={className} size={size}/>;\n};\n","import React, { useCallback } from 'react';\n\nimport styles from './Header.module.scss';\nimport { Icon } from '../ui-kit/Icon';\nimport { Link } from '../routes';\nimport { useHistory } from 'react-router';\n\ninterface IParams {\n    title: string;\n    back?: string | boolean;\n}\n\nexport const Header = ({title, back}: IParams) => {\n    const history = useHistory();\n\n    const onClick = useCallback(() => {\n        if (!back)\n            return;\n        if (back === true)\n            return history.goBack();\n        history.replace(back);\n    }, [history, back]);\n\n    return (\n        <div className=\"appHeader\">\n            {back &&\n            <div className=\"left\">\n                <span onClick={onClick} className=\"headerButton goBack\">\n                    <Icon name=\"chevron-back-outline\" role=\"img\" className=\"md hydrated\"\n                          aria-label=\"chevron back outline\"/>\n                </span>\n            </div>\n            }\n            <div className=\"pageTitle\">{title}</div>\n            <div className=\"right\">\n            </div>\n        </div>\n    );\n};\n\nexport const HeaderOld = ({title}: IParams) => {\n    return (\n        <header className={styles.header}>\n            <h1 className={styles.title}>{title}</h1>\n        </header>\n    );\n};\n","import Swipe, { SwipeItem } from 'swipejs/react';\nimport React, { Key, ReactElement, ReactNode, useEffect } from 'react';\nimport styles from './SwipeWidget.module.scss';\n\ninterface IProps {\n    showButtons?: boolean;\n    current?: Key;\n\n    onChange?: (key: Key) => void;\n\n    children: ReactNode[];\n}\n\nexport const SwipeWidget = ({showButtons, children, onChange, current}: IProps) => {\n    let swipeEl: any;\n\n    onChange = onChange || ((_) => null);\n\n    const items = children.flat() as ReactElement[];\n\n    let currentIndex = (items as any).findIndex(item => item.key === current);\n    if (currentIndex === -1)\n        currentIndex = 0;\n\n    console.log('!!!', current, currentIndex);\n    console.log(items);\n    useEffect(() => swipeEl.slide(currentIndex, 0), [currentIndex, swipeEl]);\n\n    const callback = (index) => {\n        console.log('current', index);\n        const current = items[index];\n        console.log('current', current);\n        onChange(current.key);\n    };\n\n    const prev = showButtons && currentIndex > 0 ? items[currentIndex - 1].key : '';\n    const next = showButtons && currentIndex < items.length - 1 ? items[currentIndex + 1].key : '';\n\n    const moveToPrev = () => {\n        swipeEl.prev();\n    };\n\n    const moveToNext = () => {\n        swipeEl.next();\n    };\n\n    return (\n        <div className={styles.swipeWidget}>\n            <Swipe ref={o => swipeEl = o}\n                   className={styles.swipe}\n                   callback={callback}\n                   startSlide={currentIndex}\n                   speed={0}\n                   auto={0}>\n                {items}\n            </Swipe>\n            {prev && <div className={styles.prev}\n                          onClick={moveToPrev}>\n                {/*<svg width=\"24\" height=\"24\"*/}\n                {/*     xmlns=\"http://www.w3.org/2000/svg\"*/}\n                {/*     fillRule=\"evenodd\"*/}\n                {/*     clipRule=\"evenodd\">*/}\n                {/*    <path d=\"M20 .755l-14.374 11.245 14.374 11.219-.619.781-15.381-12 15.391-12 .609.755z\"/>*/}\n                {/*</svg>*/}\n            </div>}\n            {next && <div className={styles.next}\n                          onClick={moveToNext}>\n                {/*<svg width=\"24\" height=\"24\"*/}\n                {/*     xmlns=\"http://www.w3.org/2000/svg\"*/}\n                {/*     fillRule=\"evenodd\"*/}\n                {/*     clipRule=\"evenodd\">*/}\n                {/*    <path d=\"M4 .755l14.374 11.245-14.374 11.219.619.781 15.381-12-15.391-12-.609.755z\"/>*/}\n                {/*</svg>*/}\n            </div>}\n        </div>\n    );\n};\n\nexport const SwipeItemWidget = ({children}) => {\n    return (\n        <SwipeItem className={styles.swipeItem}>\n            {children}\n        </SwipeItem>\n    );\n};\n","import { Reducer, useContext, useEffect, useReducer } from 'react';\nimport { Atom } from '@reatom/core';\nimport { context } from '@reatom/react';\n\n// Предварительное решение пока не будет решена основная проблема\n\n// function useForceUpdate() {\n//     const [state, dispatch] = useReducer(s => {\n//         console.log('reducer', s);\n//         return s + 1;\n//     }, 0);\n//     return () => {\n//         console.log('reducer state', state);\n//         dispatch();\n//     };\n// }\n\nexport function useForceUpdate() {\n    // dispatch don't have action and don't changes between rerenders\n    return useReducer<Reducer<number, null>>(s => s + 1, 0)[1] as () => void;\n}\n\nconst defaultMapper = (atomValue: any) => atomValue;\n\nexport function useAtom<T>(atom: Atom<T>): T;\nexport function useAtom<TI, TO = TI>(\n    atom: Atom<TI>,\n    selector: (atomValue: TI) => TO,\n    deps: any[],\n): TO;\nexport function useAtom<TI, TO = TI>(\n    atom: Atom<TI>,\n    selector: (atomValue: TI) => TO = defaultMapper,\n    deps: any[] = [],\n): TO {\n    const store = useContext(context);\n    console.log('by forceUpdate', atom);\n    const forceUpdate = useForceUpdate();\n    const value = selector(store.getState(atom));\n    useEffect(() => {\n        return store.subscribe(atom, state => {\n            console.log('new value', state, selector(state));\n            forceUpdate();\n        });\n    }, [...deps, store, atom, forceUpdate, selector]);\n\n    return value;\n}\n","import styled from 'styled-components';\n\nexport const Main = styled.main`\n  padding: 56px 12px 72px;\n`;\n","export type Type<T> = any;\n\nexport type Encoder<T> = (obj: T) => any;\nexport type Decoder<T> = (value: unknown) => T;\n\nexport const EncoderSymbol = Symbol('Packable encoder');\nexport const DecoderSymbol = Symbol('Packable decoder');\n\nexport interface IPacker<T> {\n    [DecoderSymbol]: Decoder<T>;\n    [EncoderSymbol]: Encoder<T>;\n}\n\nexport type Fields<T> = { [key in keyof T]: T[key] }\n\nexport type FieldTypePrimitive = StringConstructor | NumberConstructor | BooleanConstructor;\n\nexport type FieldTypeArray<T> = any\nexport type FieldRule<T> = IPacker<T> | Type<T> | FieldTypePrimitive | Array<FieldTypeArray<T>>;\n\nexport type FieldsRules<T> = {\n    [key in keyof T]: FieldRule<T[key]>;\n}\n","import {\n    Decoder, DecoderSymbol,\n    Encoder,\n    EncoderSymbol,\n    FieldRule,\n    Fields,\n    FieldsRules,\n    FieldTypePrimitive,\n    IPacker,\n} from './packable.types';\n\nexport class Packer<T> implements IPacker<T> {\n    private static getSafe(target: any): Packer<any> {\n        if (target === null || target === void 0)\n            return null;\n\n        if (EncoderSymbol in target && typeof target[EncoderSymbol] === 'function' &&\n            DecoderSymbol in target && typeof target[DecoderSymbol] === 'function')\n            return new Packer(target[DecoderSymbol], target[EncoderSymbol]);\n\n        if ('prototype' in target &&\n            EncoderSymbol in target.prototype && typeof target.prototype[EncoderSymbol] === 'function' &&\n            DecoderSymbol in target.prototype && typeof target.prototype[DecoderSymbol] === 'function')\n            return new Packer(target.prototype[DecoderSymbol], target.prototype[EncoderSymbol]);\n\n        return null;\n    }\n\n    static get(target: any): Packer<any> {\n        const packer = Packer.getSafe(target);\n\n        if (packer)\n            return packer;\n\n        throw new Error(`Target not a Packer`);\n    }\n\n    static for<T>(rule: FieldRule<T>): Packer<T> {\n        if (rule === null || rule === void 0)\n            throw new Error(`Rule not defined`);\n\n        if (rule instanceof Packer)\n            return rule;\n\n        const packer = Packer.getSafe(rule);\n        if (packer)\n            return packer;\n\n        if (rule === String || rule === Number || rule === Boolean)\n            return Packer.forPrimitive(rule) as any;\n\n        if (Array.isArray(rule))\n            return Packer.forArray(rule[0]) as any;\n\n        throw new Error(`Invalid rule`);\n    }\n\n    static forPrimitive<T extends FieldTypePrimitive>(type: T): Packer<ReturnType<T>> {\n        if (type === String)\n            return new Packer(\n                raw => typeof raw === 'string'\n                    ? '' + raw\n                    : null,\n                value => typeof value === 'string'\n                    ? value\n                    : null,\n            ) as any;\n        if (type === Number)\n            return new Packer(raw => +raw, value => +value) as any;\n        if (type === Boolean)\n            return new Packer(raw => !!raw, value => !!value) as any;\n        throw new Error(`Invalid type`);\n    }\n\n    static forObject<T extends object>(fields: FieldsRules<T>) {\n        const list: [string, Packer<any>][] = Object\n            .entries(fields)\n            .map(([field, rule]) => [field, Packer.for(rule as FieldRule<any>)]);\n\n        const encoder = obj => list\n            .reduce(\n                (data, [field, packer]) => {\n                    data[field] = packer.encode(obj[field]);\n                    return data;\n                },\n                {},\n            );\n\n        const decoder = data => list\n            .reduce(\n                (obj, [field, packer]) => {\n                    obj[field] = packer.decode(data[field]);\n                    return obj;\n                },\n                {},\n            );\n\n        return new Packer(decoder, encoder);\n    }\n\n    static forClass<T extends object>(fields: FieldsRules<T>, afterDecode: (data: Fields<T>) => T) {\n        const packer = Packer.forObject(fields);\n\n        return new Packer(\n            data => afterDecode(packer.decode(data) as any),\n            packer.encode,\n        );\n    }\n\n    static forArray<T extends object>(rule: FieldRule<T>) {\n        const packer = Packer.for<any>(rule);\n\n        const encoder = value => value.map(packer.encode);\n        const decoder = data => data.map(packer.decode);\n\n        return new Packer<T[]>(decoder, encoder);\n    }\n\n    static maybe<T>(packer: Packer<T>): Packer<T | null> {\n        const encoder: Encoder<T | null> = obj => obj === null || obj === undefined ? null : packer.encode(obj);\n        const decoder: Decoder<T | null> = val => val === null || val === undefined ? null : packer.decode(val);\n        return new Packer<T | null>(decoder, encoder);\n    }\n\n    public [DecoderSymbol]: Decoder<T>;\n    public [EncoderSymbol]: Encoder<T>;\n    public decode: Decoder<T>;\n    public encode: Encoder<T>;\n\n    constructor(decoder: Decoder<T>, encoder: Encoder<T>) {\n        if (!encoder || typeof encoder !== 'function') throw new Error(`Encoder must be a function`);\n        if (!decoder || typeof decoder !== 'function') throw new Error(`Decoder must be a function`);\n\n        this[EncoderSymbol] = encoder;\n        this[DecoderSymbol] = decoder;\n        this.encode = encoder;\n        this.decode = decoder;\n    }\n}\n","import { DecoderSymbol, EncoderSymbol, FieldRule, Fields, IPacker, Type } from './packable.types';\nimport { Packer } from './packable';\n\nconst FieldsSymbol = Symbol('Fields symbol');\n\nexport function PackableClass<T>(afterDecode: (data: Fields<T>) => T) {\n    return (constructor: Type<T>) => {\n        const target = constructor['prototype'];\n        const fields = target[FieldsSymbol];\n        if (!fields)\n            throw new Error(`To use @PackableClass you need declare @Packable`);\n\n        delete target[FieldsSymbol];\n\n        const packer = Packer.forClass<any>(fields, afterDecode);\n\n        target[DecoderSymbol] = packer.decode;\n        target[EncoderSymbol] = packer.encode;\n    };\n}\n\nexport function SelfPackableClass<T>(init: (target: Type<T>) => IPacker<T>) {\n    return (target: Type<T>) => {\n        const initResult = init(target);\n        if (!initResult)\n            throw new Error(`Init function must return IPacker`);\n        const packer = Packer.for(initResult);\n\n        target[DecoderSymbol] = packer.decode;\n        target[EncoderSymbol] = packer.encode;\n    };\n}\n\nexport function Packable(rule: FieldRule<any>) {\n    if (rule === null || rule === void 0)\n        throw new Error(`Rule must be defined`);\n\n    return (target: Type<any>, field: string) => {\n        if (FieldsSymbol in target)\n            target[FieldsSymbol][field] = rule;\n        else\n            target[FieldsSymbol] = {[field]: rule};\n    };\n}\n","import { SelfPackableClass } from '../../libs/packable/decorator';\nimport { Packer } from '../../libs/packable/packable';\n\nconst DEFAULT_CURRENCY = 'RUB';\n\nexport interface ICurrency {\n    code: string;\n    symbol: string;\n    precision: number;\n}\n\nexport const currencies: { [key: string]: ICurrency } = {\n    RUB: {code: 'RUB', symbol: '₽', precision: 2},\n};\n\n@SelfPackableClass(target => new Packer(target.fromJSON, target.toJSON))\nexport class Money {\n    public readonly amount: string = '';\n\n    public static from(value: Money | string): Money {\n        if (typeof value === 'string')\n            return Money.fromJSON(value);\n        if (value instanceof Money)\n            return value.clone();\n        throw new Error('Can not convert invalid data to Money');\n    }\n\n    public static fromJSON(data: any): Money {\n        if (typeof data === 'object'\n            && typeof data.subunits === 'number'\n            && typeof data.currency === 'object'\n            && typeof data.currency.code === 'string')\n            return new Money(data.subunits, data.currency);\n\n        if (typeof data !== 'string')\n            throw new Error(`Amount \"${data}\" must be a string`);\n\n        let parts = data.trim().split(' ');\n        if (!parts || parts.length !== 2)\n            throw new Error(`Money \"${data}\" must have valid format`);\n\n        const amountText = parts[0];\n        const currencyName = parts[1].toUpperCase();\n\n        const currency = currencies[currencyName];\n        if (!currency)\n            throw new Error(`Unsupported currency \"${currencyName}\"`);\n\n        const units = +amountText;\n        if (Number.isNaN(units))\n            throw new Error(`Invalid amount \"${amountText}\" when parse \"${data}\"`);\n\n        const subunits = Math.round(units * 10 ** currency.precision);\n\n        return new Money(subunits, currency);\n    }\n\n    public static toJSON(money: Money): any {\n        return money.toJSON();\n    }\n\n    public static create(amount: string | number, currencyName: string): Money {\n        if (typeof currencyName !== 'string')\n            throw new Error(`Invalid currency \"${currencyName}\"`);\n        currencyName = currencyName.toUpperCase();\n\n        if (typeof amount === 'string') {\n            if (!amount || Number.isNaN(+amount))\n                throw new Error(`Amount must be valid number but received \"${amount}\"`);\n\n            amount = +amount;\n        }\n\n        const currency = currencies[currencyName];\n        if (!currency)\n            throw new Error(`Unsupported currency \"${currencyName}\"`);\n\n        const units = +amount;\n        if (Number.isNaN(units))\n            throw new Error(`Invalid amount \"${amount}\"`);\n\n        const subunits = Math.round(units * 10 ** currency.precision);\n        return new Money(subunits, currency);\n    }\n\n    public static empty: Money;\n\n    private constructor(public readonly subunits: number,\n                        public readonly currency: ICurrency) {\n        this.amount = (subunits / 10 ** currency.precision).toFixed(2);\n    }\n\n    public clone(): Money {\n        return new Money(this.subunits, this.currency);\n    }\n\n    public toString() {\n        if (this.subunits)\n            return this.amount + ' ' + this.currency.symbol;\n        else\n            return '0 ' + this.currency.symbol;\n    }\n\n    public toJSON() {\n        if (this.subunits)\n            return this.amount + ' ' + this.currency.code;\n        else\n            return '0 ' + this.currency.code;\n    }\n\n    public add(money: Money): Money {\n        if (this.currency.code !== money.currency.code)\n            throw new Error(`Can not do any operations with different currencies`);\n        return new Money(this.subunits + money.subunits, this.currency);\n    }\n\n    public sub(money: Money): Money {\n        if (this.currency.code !== money.currency.code)\n            throw new Error(`Can not do any operations with different currencies`);\n        return new Money(this.subunits - money.subunits, this.currency);\n    }\n\n    public equal(money: Money): boolean {\n        if (this.currency.code !== money.currency.code)\n            return false;\n        return this.subunits === money.subunits;\n    }\n\n    public getEntire(): string {\n        return Math.floor(this.subunits / 10 ** this.currency.precision).toString();\n    }\n\n    public getFractional(): string {\n        return (this.subunits / 10 ** this.currency.precision)\n            .toFixed(this.currency.precision)\n            .substr(-this.currency.precision);\n    }\n\n    public getSymbol(): string {\n        return this.currency.symbol;\n    }\n\n    public negative(): Money {// TODO rename\n        return new Money(-this.subunits, this.currency);\n    }\n\n    public isPositive() {\n        return this.subunits > 0;\n    }\n\n    public isNegative() {\n        return this.subunits < 0;\n    }\n}\n\nMoney.empty = Money.create(0, DEFAULT_CURRENCY);\n","import React from 'react';\nimport { Money } from '../models/money/money.class';\n\nimport styles from './MoneyView.module.scss';\n\ninterface IProps {\n    money: Money;\n}\n\nexport const MoneyView = ({money}: IProps) => {\n    if (money === null)\n        return (\n            <div className={styles.moneyView}>\n                <span className={styles.entire}>N/A</span>\n            </div>\n        );\n\n    if (!(money instanceof Money))\n        throw new Error(`money must be instance of Money, but get ${typeof money} ${JSON.stringify(money)}\"`);\n\n    return (\n        <div className={styles.moneyView}>\n            <span className={styles.entire}>{money.getEntire()}</span>\n            <span className={styles.fractional}>{money.getFractional()}</span>\n            <span className={styles.currency}>{money.getSymbol()}</span>\n        </div>\n    );\n};\n","import React from 'react';\nimport styled from 'styled-components';\nimport { MoneyView } from '../components/MoneyView';\nimport { Icon } from '../ui-kit/Icon';\nimport { Money } from '../models/money/money.class';\n\nconst StatBoxContainer = styled.div`\n  background: #ffffff;\n  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.09);\n  border-radius: 10px;\n  padding: 12px 12px;\n  \n  display: grid;\n  grid-template-columns: auto;\n  grid-template-rows: auto;\n  gap: 12px 12px;\n  grid-template-areas: \"icon amount amount\" \"title title status\";\n\n  .amount { \n    grid-area: amount; \n    text-align: right;\n    \n    align-self: center;\n    font-size: 20px;\n    font-weight: 700;\n    letter-spacing: -0.02em;\n    line-height: 1em;\n    color: #27173E;\n    \n    white-space: nowrap;\n  }\n  \n  .icon-wrapper { \n    grid-area: icon;\n    text-align: left;\n    \n    background: #6236FF;\n    width: 36px;\n    height: 36px;\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    border-radius: 18px;\n    color: #fff;\n    font-size: 24px;\n  }\n  \n  .title { \n    grid-area: title;\n    text-align: left;\n    \n    font-size: 13px;\n    color: #958d9e;\n    font-weight: 500;\n    display: block;\n    line-height: 1em;\n    align-self: end;\n  }\n  \n  .status { \n    grid-area: status;\n    text-align: right; \n    \n    //font-size: 13px;\n    color: #958d9e;\n    font-weight: 500;\n    display: block;\n    line-height: 1em;\n    align-self: end;\n  }\n`;\n\nexport enum BarColor {\n    Neutral = 'neutral',\n    Good = 'good',\n    Normal = 'normal',\n    Bad = 'bad',\n}\n\nexport interface IQuickDetailsItem {\n    amount: Money;\n    progress: number;\n    color: BarColor;\n}\n\nexport interface IQuickDetailsItemProps extends IQuickDetailsItem {\n    title: string;\n    icon: string;\n}\n\nexport const StatBox = ({title, amount, icon, color, progress}: IQuickDetailsItemProps) => {\n    const percent = progress === null\n        ? ''\n        : progress < 0\n            ? progress + '%'\n            : '+' + progress + '%';\n    return (\n        <StatBoxContainer>\n            <div className=\"icon-wrapper\">\n                <Icon icon={icon}/>\n            </div>\n            <div className=\"amount\"><MoneyView money={amount}/></div>\n            <div className=\"title\">{title}</div>\n            <div className=\"status\">{percent}</div>\n        </StatBoxContainer>\n    );\n};\n","import React, { ReactNode } from 'react';\nimport { Money } from '../models/money/money.class';\nimport { Icons } from '../ui-kit/Icon';\nimport { AccountGrip } from '../models/account-grip/grip.class';\nimport { BarColor, IQuickDetailsItem, IQuickDetailsItemProps, StatBox } from './StatBox';\nimport { IGrip } from '../models/abstract-grip/grip.types';\nimport { Main } from '../ui-kit/Main';\n\ninterface IProps {\n    grip: AccountGrip;\n}\n\nexport const GripQuickDetails = ({grip}: IProps) => {\n    if (!grip)\n        return (\n            <div className=\"alert alert-warning mt-2\" role=\"alert\">\n                Grip not specified\n            </div>\n        );\n\n    const {income, expense, planed, total} = getQuickDetails(grip);\n\n    const stats: ReactNode[][] = [\n        [\n            <StatBox title=\"Income\"\n                     icon={Icons.addCircleOutline}\n                     {...income}\n            />,\n            <StatBox title=\"Expense\"\n                     icon={Icons.removeCircleOutline}\n                     {...expense}\n            />,\n        ],\n        [\n            <StatBox title=\"Plane\"\n                     icon={Icons.calendarOutline}\n                     {...planed}\n            />,\n            <StatBox title=\"Total\"\n                     icon={Icons.cashOutline}\n                     {...total}\n            />,\n        ],\n    ];\n\n    return (\n        <div className=\"section\">\n            {stats.map((row, index) => (\n                <div key={index}\n                     className=\"row mt-2 justify-content-center\">\n                    {row.map((cell, cellIndex) => (\n                        <div key={cellIndex}\n                             className=\"col-6\">\n                            {cell}\n                        </div>\n                    ))}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nfunction getQuickDetails(grip: IGrip): {\n    income: IQuickDetailsItem,\n    expense: IQuickDetailsItem,\n    planed: IQuickDetailsItem,\n    total: IQuickDetailsItem,\n} {\n    const month = grip.months[0];\n\n    if (!month)\n        return {\n            income: {\n                amount: null,\n                progress: null,\n                color: BarColor.Neutral,\n            },\n            expense: {\n                amount: null,\n                progress: null,\n                color: BarColor.Neutral,\n            },\n            planed: {\n                amount: Money.create(0, 'RUB'),\n                progress: null,\n                color: BarColor.Neutral,\n            },\n            total: {\n                amount: null,\n                progress: null,\n                color: BarColor.Neutral,\n            },\n        };\n\n    return {\n        income: {\n            amount: month.income,\n            progress: null,\n            color: BarColor.Neutral,\n        },\n        expense: {\n            amount: month.expense,\n            progress: null,\n            color: BarColor.Neutral,\n        },\n        planed: {\n            amount: Money.create(0, 'RUB'),\n            progress: null,\n            color: BarColor.Neutral,\n        },\n        total: {\n            amount: month.balance,\n            progress: null,\n            color: BarColor.Neutral,\n        },\n    };\n}\n","import React from 'react';\nimport styled from 'styled-components';\nimport { ICategory } from '../models/category/category.types';\n\ninterface IProp {\n    category: ICategory;\n    size?: 'default' | 'large';\n}\n\nconst CategoryIconBox = styled.span`\n  display: inline-block;\n  border: 2px solid green;\n  border-radius: 50%;\n  background: url(${process.env.PUBLIC_URL}/category-icons/default.png);\n  width: ${props => props.size};\n  height: ${props => props.size};\n  background-size: 100%;\n  box-sizing: content-box;\n  \n  > span {\n    display: block;\n    background-size: 100%;\n    width: ${props => props.size};\n    height: ${props => props.size};\n  }\n`;\n\nexport const CategoryIcon = ({category, size}: IProp) => {\n    const icon = category.image || 'default';\n    const width = size === 'large' ? '64px' : '32px';\n    const style = {\n        backgroundImage: `url(${process.env.PUBLIC_URL}/category-icons/${icon}.png)`,\n    };\n    return (\n        <CategoryIconBox size={width}>\n            <span style={style}/>\n        </CategoryIconBox>\n    );\n};\n","import { UUID } from '../common/common.types';\nimport { Money } from '../money/money.class';\n\nexport enum TransactionType {\n    Removed,\n    Income,\n    Expense,\n    Adjust,\n    AdjustTo,\n}\n\nexport interface ITransaction {\n    id: UUID;\n    amount: Money;\n    type: TransactionType;\n    category: UUID | '';\n    title: string | '';\n    createdAt?: number;\n    updatedAt?: number;\n}\n\nexport interface IAddTransactionForm {\n    account: UUID;\n    amount: string;\n    type: TransactionType;\n    category: UUID | '';\n    title: string | '';\n    date: string;\n}\n","import styled from 'styled-components';\nimport { CategoryIcon } from '../components/CategoryIcon';\nimport React from 'react';\nimport { ICategory } from '../models/category/category.types';\nimport { TransactionType } from '../models/transaction/transaction.types';\nimport { Link, paths } from '../routes';\nimport { AccountGrip } from '../models/account-grip/grip.class';\n\nconst QuickCategoriesBox = styled.div`\n  display: flex;\n  margin-top: 16px;\n  overflow-x: hidden;\n  \n  > * {\n    margin: 0 6px;\n    display: flex; // TODO fix it\n  }\n`;\n\ninterface IProps {\n    grip: AccountGrip;\n}\n\nexport const QuickCategories = ({grip}: IProps) => {\n    if (!grip)\n        return (\n            <div className=\"alert alert-outline-dark mt-2\" role=\"alert\">\n                No data\n            </div>\n        )\n\n    const categories: ICategory[] = [\n        {\n            id: '0000-111',\n            name: 'Home',\n            image: 'essentials-01',\n            parent: null,\n            defaultTxType: TransactionType.Income,\n        },\n        {\n            id: 'default',\n            name: 'Default',\n            image: '',\n            parent: null,\n            defaultTxType: TransactionType.Income,\n        },\n        {\n            id: '0000-111',\n            name: 'Home',\n            image: 'essentials-01',\n            parent: null,\n            defaultTxType: TransactionType.Income,\n        },\n        {\n            id: 'default',\n            name: 'Default',\n            image: '',\n            parent: null,\n            defaultTxType: TransactionType.Income,\n        },\n        {\n            id: '0000-111',\n            name: 'Home',\n            image: 'essentials-01',\n            parent: null,\n            defaultTxType: TransactionType.Income,\n        },\n        {\n            id: 'default',\n            name: 'Default',\n            image: '',\n            parent: null,\n            defaultTxType: TransactionType.Income,\n        },\n        {\n            id: '0000-111',\n            name: 'Home',\n            image: 'essentials-01',\n            parent: null,\n            defaultTxType: TransactionType.Income,\n        },\n        {\n            id: 'default',\n            name: 'Default',\n            image: '',\n            parent: null,\n            defaultTxType: TransactionType.Income,\n        },\n        {\n            id: '0000-111',\n            name: 'Home',\n            image: 'essentials-01',\n            parent: null,\n            defaultTxType: TransactionType.Income,\n        },\n        {\n            id: 'default',\n            name: 'Default',\n            image: '',\n            parent: null,\n            defaultTxType: TransactionType.Income,\n        },\n    ];\n    return (\n        <QuickCategoriesBox>\n            {categories.map(category =>\n                <Link to={paths.transactions.add({\n                    account: grip.id,\n                    category: category.id,\n                })}>\n                    <CategoryIcon category={category} size={'large'}/>\n                </Link>,\n            )}\n        </QuickCategoriesBox>\n    );\n};\n","import React from 'react';\nimport { useHistory } from 'react-router';\nimport { paths } from '../routes';\nimport { Icon, Icons } from '../ui-kit/Icon';\nimport { MoneyView } from '../components/MoneyView';\nimport styles from './AccountWidget.module.scss';\nimport { AccountGrip } from '../models/account-grip/grip.class';\n\ninterface IProps {\n    account: AccountGrip;\n}\n\nexport const AccountWidget = ({account}: IProps) => {\n    const history = useHistory();\n\n    function addTx() {\n        history.push(paths.transactions.add({account: account.id}));\n    }\n\n    return (\n        <div className=\"card-block bg-primary\">\n            <div className=\"card-main\">\n                <div className=\"card-button dropdown\">\n                    <button type=\"button\" className=\"btn btn-link btn-icon\" data-toggle=\"dropdown\">\n                        <Icon icon={Icons.cogOutline} role=\"img\" className=\"md hydrated\"\n                              aria-label=\"ellipsis horizontal\"/>\n                    </button>\n                    <div className=\"dropdown-menu dropdown-menu-right\">\n                        <a className=\"dropdown-item\" href=\"javacript:;\">\n                            <Icon icon={Icons.pencilOutline} role=\"img\" className=\"md hydrated\"\n                                  aria-label=\"pencil outline\"/>\n                            Edit\n                        </a>\n                        <a className=\"dropdown-item\" href=\"javacript:;\">\n                            <Icon icon={Icons.closeOutline} role=\"img\" className=\"md hydrated\"\n                                  aria-label=\"close outline\"/>\n                            Remove\n                        </a>\n                        <a className=\"dropdown-item\" href=\"javacript:;\">\n                            <Icon icon={Icons.arrowUpCircleOutline} role=\"img\" className=\"md hydrated\"\n                                  aria-label=\"arrow up circle outline\"/>\n                            Upgrade\n                        </a>\n                    </div>\n                </div>\n                <div className=\"balance\">\n                    <span className=\"label\">BALANCE</span>\n                    <h1 className=\"title\"><MoneyView money={account.balance}/></h1>\n                </div>\n                <div className=\"in\">\n                    <div className=\"card-number\">\n                        <span className=\"label\">Account name</span>\n                        {account.name}\n                    </div>\n                    {/*<div className=\"card-number\">*/}\n                    {/*    <span className=\"label\">Card Number</span>*/}\n                    {/*    •••• •••• •••• 9905*/}\n                    {/*</div>*/}\n                    <div className=\"bottom\">\n                        <div className=\"card-expiry\">\n                            <span className=\"label\">Statistics for</span>\n                            Last month\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n","import { declareAction } from '@reatom/core';\nimport { UUID } from '../../models/common/common.types';\nimport { Account } from '../../models/account/account.class';\nimport { AccountGrip } from '../../models/account-grip/grip.class';\n\nconst NS = 'grips/account';\nexport const chooseAccountGrip = declareAction<UUID>(NS + ':chooseAccountGrip');\n\nexport const updateAccountGrip = declareAction<Account>(NS + ':updateAccountGrip');\nexport const updateAccountGripSuccess = declareAction<AccountGrip>(NS + ':updateAccountGrip success');\nexport const updateAccountGripFailed = declareAction<any>(NS + ':updateAccountGrip failed');\n\nexport const updateAccountGrips = declareAction<Account[]>(NS + ':updateAccountGrips');\nexport const updateAccountGripsSuccess = declareAction<AccountGrip[]>(NS + ':updateAccountGrips success');\nexport const updateAccountGripsFailed = declareAction<any>(NS + ':updateAccountGrips failed');\n","import { declareAtom } from '@reatom/core';\nimport { Map } from 'immutable';\nimport { UUID } from '../../models/common/common.types';\nimport { AccountGrip } from '../../models/account-grip/grip.class';\nimport { chooseAccountGrip, updateAccountGripsSuccess, updateAccountGripSuccess } from './account-grips.actions';\nimport { chooseAccount } from '../accounts/accounts.actions';\n\nexport interface IAccountGripsState {\n    currentID: UUID | null;\n    current: AccountGrip | null;\n    accounts: Map<UUID, AccountGrip>;\n}\n\nexport const AccountGrips = declareAtom<IAccountGripsState>(\n    ['grips/account'],\n    {\n        currentID: null,\n        current: null,\n        accounts: Map(),\n    },\n    on => ({\n        choose: [\n            on(chooseAccountGrip, (state, id) => {\n                const current = state.accounts.get(id);\n                if (current)\n                    return {\n                        ...state,\n                        currentID: id,\n                        current,\n                    };\n                else\n                    return {\n                        ...state,\n                        currentID: id,\n                    };\n            }),\n        ],\n        update: [\n            on(updateAccountGripSuccess, (state, grip) => {\n                const accounts = state.accounts.set(grip.id, grip);\n\n                let current = accounts.get(state.currentID);\n\n                if (!current)\n                    current = accounts.get(grip.id);\n\n                return {\n                    ...state,\n                    accounts,\n                    current,\n                    currentID: current.id,\n                };\n            }),\n            on(updateAccountGripsSuccess, (state, grips) => {\n                const accounts = grips.reduce(\n                    (acc, grip) => acc.set(grip.id, grip),\n                    state.accounts,\n                );\n\n                let current = accounts.get(state.currentID);\n\n                if (!current)\n                    current = accounts.get(grips[0].id);\n\n                return {\n                    ...state,\n                    accounts,\n                    current,\n                    currentID: current.id,\n                };\n            }),\n        ],\n    }),\n);\n","import React from 'react';\nimport { MoneyView } from '../components/MoneyView';\nimport { IGrip } from '../models/abstract-grip/grip.types';\nimport { Link, paths } from '../routes';\n\ninterface IProps {\n    grip: IGrip;\n}\n\nexport const LastMonthsList = ({grip}: IProps) => {\n    if (!grip)\n        return (\n            <div className=\"alert alert-outline-dark mt-2\" role=\"alert\">\n                No data\n            </div>\n        )\n\n    const months = grip.months.slice(1, 4);\n\n    if (!months.length)\n        return null;\n        // return (\n        //     <div className=\"alert alert-outline-dark mt-2\" role=\"alert\">\n        //         No months found\n        //     </div>\n        // )\n\n    return (\n        <ul className=\"listview link-listview inset mt-2\" style={{\n            margin: '0',\n        }}>\n            {months.map(month => (\n                <li>\n                    <Link to={paths.account.month(grip.id, month.month)} className=\"item\">\n                        Balance on {month.month}\n                        <span className=\"text\"><MoneyView money={month.balanceOnEnd}/></span>\n                    </Link>\n                </li>\n            ))}\n        </ul>\n    );\n};\n","import React from 'react';\nimport { useAction } from '@reatom/react';\nimport { Accounts } from '../atoms/accounts/accounts.atom';\nimport { Header } from '../components/Header';\nimport { SwipeItemWidget, SwipeWidget } from '../widgets/SwipeWidget';\nimport { useAtom } from '../store/reatom';\nimport { Main } from '../ui-kit/Main';\nimport { GripQuickDetails } from '../widgets/GripQuickDetails';\nimport { QuickCategories } from '../widgets/QuickCategories';\nimport { AccountWidget } from '../widgets/AccountWidget';\nimport { AccountGrips } from '../atoms/account-grips/account-grips.atom';\nimport { chooseAccountGrip } from '../atoms/account-grips/account-grips.actions';\nimport { LastMonthsList } from '../widgets/LastMonthsList';\n\nexport const AccountsPage = () => {\n    const {current, accounts} = useAtom(AccountGrips);\n    const chooseAccountHandler = useAction(id => id === 'create' ? null : chooseAccountGrip(id));\n    const list = Array.from(accounts.values());\n\n    if (!accounts.size)\n        return (\n            <>\n                <Header title={`Wallets`}/>\n                Loading...\n            </>\n        );\n\n    return (\n        <>\n            <Header title={`Wallets`}/>\n            <Main>\n                <SwipeWidget current={current?.id || ''}\n                             showButtons\n                             onChange={chooseAccountHandler as ((key: any) => void)}>\n                    {list.map(account => (\n                        <SwipeItemWidget key={account.id}>\n                            <AccountWidget account={account}/>\n                        </SwipeItemWidget>\n                    ))}\n                    {/*<SwipeItemWidget key=\"create\">*/}\n                    {/*    <CreateAccountWidget/>*/}\n                    {/*</SwipeItemWidget>*/}\n                </SwipeWidget>\n                <GripQuickDetails grip={current}/>\n                <QuickCategories grip={current}/>\n                <LastMonthsList grip={current}/>\n            </Main>\n        </>\n    );\n};\n","import { UUID } from '../../models/common/common.types';\nimport { declareAction } from '@reatom/core';\nimport { Month } from '../../models/month/month.class';\n\nconst NS = 'months';\n\nexport const loadMonths = declareAction<UUID[]>(NS + ':loadMonths');\nexport const loadMonthsSuccess = declareAction<Month[]>(NS + ':loadMonths success');\nexport const loadMonthsFailed = declareAction<{ ids: UUID[], error: any }>(NS + ':loadMonths failed');\n\nexport const saveMonths = declareAction<Month[]>(NS + ':saveMonths');\nexport const saveMonthsSuccess = declareAction<UUID[]>(NS + ':saveMonths success');\nexport const saveMonthsFailed = declareAction<{ ids: UUID[], error: any }>(NS + ':saveMonths failed');\n","import React from 'react';\nimport { ITransaction } from '../models/transaction/transaction.types';\n\nimport styles from './TxList.module.scss';\nimport { makeTxList } from './TxList.utils';\nimport { MoneyView } from '../components/MoneyView';\nimport { DayDate } from '../models/common/date.types';\nimport { TransactionGrip } from '../models/abstract-grip/transaction-grip.class';\n\ninterface IProps {\n    list: TransactionGrip[];\n    dayDate: DayDate;\n}\n\nexport const TxList = React.memo(({list, dayDate}: IProps) => {\n    const txList = makeTxList(list);\n\n    return (\n        <ul className={styles.txList}>\n            {txList.map((tx, index) => (\n                <li key={index} className={styles.txItem}>\n                    <div className={styles.txItem__left}>\n                        <div className={styles.txItem__first}>\n                            {tx.first\n                                ? tx.first\n                                : <span className={styles.empty}>Без заголовка</span>\n                            }\n                        </div>\n                        <div className={styles.txItem__second}>\n                            {tx.second\n                                ? tx.second\n                                : <span className={styles.empty}>Без заголовка</span>\n                            }\n                        </div>\n                    </div>\n                    <div className={styles.txItem__right}>\n                        <div className={styles.txItem__amount}>\n                            <MoneyView money={tx.amount}/>\n                        </div>\n                        <div className={styles.txItem__date}>\n                            {tx.date}\n                        </div>\n                    </div>\n                </li>\n            ))}\n        </ul>\n    );\n});\n","import { ITransaction, TransactionType } from '../models/transaction/transaction.types';\nimport { format } from 'date-fns';\nimport { Money } from '../models/money/money.class';\nimport { DayDate } from '../models/common/date.types';\nimport { ITransactionGrip } from '../models/abstract-grip/grip.types';\n\nexport interface IDisplayedTransaction extends ITransactionGrip {\n    first: string;\n    second: string;\n    dateString: string;\n}\n\nexport function makeTxList(list: ITransactionGrip[]): IDisplayedTransaction[] {\n    return list.map(item => {\n        return {\n            ...item,\n            first: item.category.name,\n            second: item.title,\n            dateString: item.date\n                ? format(new Date(item.date), 'PP')\n                : '',\n        };\n    });\n}\n","import React from 'react';\n\nimport styles from './MonthTxList.module.scss';\nimport { Month } from '../models/month/month.class';\nimport { TxList } from './TxList';\nimport { DayDate } from '../models/common/date.types';\nimport format from 'date-fns/format';\nimport { AbstractMonthGrip } from '../models/abstract-grip/month-grip.class';\n\ninterface IProps {\n    month: AbstractMonthGrip;\n}\n\nexport const MonthTxList = React.memo(({month}: IProps) => {\n    if (!month)\n        return (\n            <div>No data</div>\n        );\n\n    const days = month.days;\n\n    return (\n        <ul className={styles.days}>\n            {days.map(day => (\n                <li key={day.date} className={styles.day}>\n                    <div className={styles.title}>\n                        {formatDayDate(day.date)}\n                        {/*<div className={styles.txItem__first}>*/}\n                        {/*    {tx.first*/}\n                        {/*        ? tx.first*/}\n                        {/*        : <span className={styles.empty}>Без заголовка</span>*/}\n                        {/*    }*/}\n                        {/*</div>*/}\n                        {/*<div className={styles.txItem__second}>*/}\n                        {/*    {tx.second*/}\n                        {/*        ? tx.second*/}\n                        {/*        : <span className={styles.empty}>Без заголовка</span>*/}\n                        {/*    }*/}\n                        {/*</div>*/}\n                    </div>\n                    <TxList list={day.transactions} dayDate={day.date}/>\n                </li>\n            ))}\n        </ul>\n    );\n});\n\n\nfunction formatDayDate(date: DayDate): string {\n    return format(new Date(date), 'do LLLL');\n}\n","import { MonthsMap } from '../atoms/months/months.types';\nimport { IMonthBrief } from '../models/month/month.types';\nimport React from 'react';\nimport { MoneyView } from '../components/MoneyView';\nimport { MonthTxList } from './MonthTxList';\nimport styles from './MonthViewWidget.module.scss';\nimport format from 'date-fns/format';\nimport { IMonthGripBrief } from '../models/abstract-grip/grip.types';\nimport { MonthGripsMap } from '../atoms/month-grips/month-grips.types';\n\ninterface IProps {\n    months: MonthGripsMap;\n    brief?: IMonthGripBrief;\n    prev?: IMonthGripBrief;\n    next?: IMonthGripBrief;\n    moveToPrev?: () => void;\n    moveToNext?: () => void;\n}\n\nexport const MonthViewHeadWidget = ({brief}: IProps) => {\n    if (!brief)\n        return <div>No month</div>;\n\n    const circumference = 452;\n    const totalSum = brief.income.subunits + brief.expense.subunits;\n    const incomePercent = brief.income.subunits / totalSum * circumference;\n    const expensePercent = brief.expense.subunits / totalSum * circumference;\n\n    return (\n        <div className={styles.head}>\n            <h3 className={styles.title}>{format(new Date(brief.month), 'MMMM yyyy')}</h3>\n            <div className={styles.info}>\n                <div className={styles.circle}>\n                    <svg width=\"160\" height=\"160\">\n                        <circle transform=\"rotate(-90)\"\n                                r=\"72\" cx=\"-80\" cy=\"80\"/>\n                        <circle className=\"income\"\n                                transform=\"rotate(-90)\"\n                                r=\"72\" cx=\"-80\" cy=\"80\"\n                                stroke=\"30bae7\"\n                                strokeDasharray={[incomePercent, circumference].join(' ')}/>\n                        <circle className=\"expense\"\n                                transform=\"rotate(-90)\"\n                                r=\"72\" cx=\"-80\" cy=\"80\"\n                                strokeDasharray={[0, incomePercent, expensePercent, circumference].join(' ')}/>\n                    </svg>\n                    <h4 className={styles.balance}><MoneyView money={brief.balance}/></h4>\n                    <div>+<MoneyView money={brief.income}/></div>\n                    <div>-<MoneyView money={brief.expense}/></div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\n\nexport const MonthViewWidget = ({months, brief, prev, next, moveToPrev, moveToNext}: IProps) => {\n    moveToPrev = moveToPrev || (() => null);\n    moveToNext = moveToNext || (() => null);\n\n    if (!brief)\n        return <div>No month</div>;\n\n    if (!months.has(brief.id)) {\n        return <div>Loading month</div>;\n    }\n\n    const month = months.get(brief.id);\n\n    if (!month)\n        return <div>Loading month</div>;\n\n    const circumference = 452;\n    const totalSum = month.income.subunits + month.expense.subunits;\n    const incomePercent = month.income.subunits / totalSum * circumference;\n    const expensePercent = month.expense.subunits / totalSum * circumference;\n\n    return (\n        <>\n            <div className={styles.head}>\n                <h3 className={styles.title}>{format(new Date(month.month), 'MMMM yyyy')}</h3>\n                <div className={styles.info}>\n                    {prev && <div className={styles.prev}\n                                  onClick={moveToPrev}>\n                        <svg width=\"24\" height=\"24\"\n                             xmlns=\"http://www.w3.org/2000/svg\"\n                             fillRule=\"evenodd\"\n                             clipRule=\"evenodd\">\n                            <path d=\"M20 .755l-14.374 11.245 14.374 11.219-.619.781-15.381-12 15.391-12 .609.755z\"/>\n                        </svg>\n                    </div>}\n                    {next && <div className={styles.next}\n                                  onClick={moveToNext}>\n                        <svg width=\"24\" height=\"24\"\n                             xmlns=\"http://www.w3.org/2000/svg\"\n                             fillRule=\"evenodd\"\n                             clipRule=\"evenodd\">\n                            <path d=\"M4 .755l14.374 11.245-14.374 11.219.619.781 15.381-12-15.391-12-.609.755z\"/>\n                        </svg>\n                    </div>}\n                    <div className={styles.circle}>\n                        <svg width=\"160\" height=\"160\">\n                            <circle transform=\"rotate(-90)\"\n                                    r=\"72\" cx=\"-80\" cy=\"80\"/>\n                            <circle className=\"income\"\n                                    transform=\"rotate(-90)\"\n                                    r=\"72\" cx=\"-80\" cy=\"80\"\n                                    stroke=\"30bae7\"\n                                    strokeDasharray={[incomePercent, circumference].join(' ')}/>\n                            <circle className=\"expense\"\n                                    transform=\"rotate(-90)\"\n                                    r=\"72\" cx=\"-80\" cy=\"80\"\n                                    strokeDashoffset={incomePercent}\n                                    strokeDasharray={[expensePercent, circumference].join(' ')}/>\n                        </svg>\n                        <h4 className={styles.balance}><MoneyView money={month.balance}/></h4>\n                        <div>+<MoneyView money={month.income}/></div>\n                        <div>-<MoneyView money={month.expense}/></div>\n                    </div>\n                </div>\n            </div>\n            <MonthTxList month={month}/>\n        </>\n    );\n};\n","import { declareAction } from '@reatom/core';\nimport { AbstractMonthGrip } from '../../models/abstract-grip/month-grip.class';\n\nconst NS = 'grips/month';\n\nexport const updateMonthGrip = declareAction(NS + ':updateMonthGrip');\nexport const updateMonthGripSuccess = declareAction<AbstractMonthGrip>(NS + ':updateMonthGrip success');\nexport const updateMonthGripFailed = declareAction<any>(NS + ':updateMonthGrip failed');\n\nexport const updateMonthGrips = declareAction(NS + ':updateMonthGrips');\nexport const updateMonthGripsSuccess = declareAction<AbstractMonthGrip[]>(NS + ':updateMonthGrips success');\nexport const updateMonthGripsFailed = declareAction<any>(NS + ':updateMonthGrips failed');\n","import { declareAtom } from '@reatom/core';\nimport { Map } from 'immutable';\nimport { IMonthGripsState } from './month-grips.types';\nimport {\n    updateMonthGripSuccess,\n    updateMonthGripsSuccess,\n} from './month-grips.actions';\n\nexport const MonthGrips = declareAtom<IMonthGripsState>(\n    ['grips/month'],\n    Map(),\n    on => ({\n        update: [\n            on(updateMonthGripSuccess, (state, month) => {\n                return state.set(month.id, month);\n            }),\n            on(updateMonthGripsSuccess, (state, months) => {\n                return months.reduce(\n                    (acc, month) => acc.set(month.id, month),\n                    state,\n                );\n            }),\n        ],\n    }),\n);\n","import React, { useCallback, useEffect } from 'react';\nimport { useAction, useAtom } from '@reatom/react';\nimport { useHistory, useRouteMatch } from 'react-router';\nimport { MonthDate } from '../models/common/date.types';\nimport { loadMonths } from '../atoms/months/months.actions';\nimport { IMonthBrief } from '../models/month/month.types';\nimport { MonthViewHeadWidget } from '../widgets/MonthViewWidget';\nimport { Header } from '../components/Header';\nimport { paths } from '../routes';\nimport styles from './AccountMonthsPage.module.scss';\nimport { MonthTxList } from '../widgets/MonthTxList';\nimport { SwipeItemWidget, SwipeWidget } from '../widgets/SwipeWidget';\nimport { AccountGrips } from '../atoms/account-grips/account-grips.atom';\nimport { MonthGrips } from '../atoms/month-grips/month-grips.atom';\nimport { IMonthGripBrief } from '../models/abstract-grip/grip.types';\nimport { IAccount } from '../models/account/account.types';\nimport { AccountGrip } from '../models/account-grip/grip.class';\n\ninterface IParams {\n    account: string;\n    month?: MonthDate;\n}\n\nexport const AccountMonthsPage = () => {\n    // prepare\n    const {params} = useRouteMatch<IParams>();\n    const account = useAtom(AccountGrips, ({accounts}) => accounts.get(params.account), [params.account]);\n    const months = useAtom(MonthGrips);\n    const history = useHistory();\n\n    // create months list\n    const monthsList = [...account ? account.months : []];\n    monthsList.reverse();\n\n    // create handlers\n    const changeMonth = useCallback((newMonthNum) => {\n        history.replace(paths.account.month(account.id, newMonthNum));\n    }, [account, history]);\n\n    const loadMonth = useAction(id => id ? loadMonths([id]) : null, []);\n\n    // check before render\n    if (!account)\n        return (\n            <div>No account</div>\n        );\n\n    if (!account.months.length)\n        return (\n            <div>No months in this account</div>\n        );\n\n    return <AccountMonthsPageDisplay account={account}\n                                     month={params.month || account.lastMonthDate}/>;\n};\n\ninterface IPropsDisplay {\n    account: AccountGrip;\n    month: MonthDate;\n}\n\nexport const AccountMonthsPageDisplay = ({account, month}: IPropsDisplay) => {\n    // prepare\n    const months = useAtom(MonthGrips);\n    const history = useHistory();\n\n    // create months list\n    const monthsList = [...account ? account.months : []];\n    monthsList.reverse();\n\n    // create handlers\n    const changeMonth = useCallback((newMonthNum) => {\n        history.replace(paths.account.month(account.id, newMonthNum));\n    }, [account, history]);\n\n    const loadMonth = useAction(id => id ? loadMonths([id]) : null, []);\n\n    // get months\n    let monthIndex = account.months.findIndex(item => item.month === month);\n    if (monthIndex === -1)\n        monthIndex = 0;\n    const monthBrief: IMonthGripBrief = account.months[monthIndex];\n    const prevMonth = account.months[monthIndex + 1];\n    const nextMonth = account.months[monthIndex - 1];\n\n    // load months\n    useEffect(() => {\n        if (monthBrief && !months.has(monthBrief.id))\n            loadMonth(monthBrief.id);\n        if (prevMonth && !months.has(prevMonth.id))\n            loadMonth(prevMonth.id);\n        if (nextMonth && !months.has(nextMonth.id))\n            loadMonth(nextMonth.id);\n    }, [prevMonth, nextMonth, monthBrief]);\n    const currentMonth = months.get(monthBrief?.id);\n\n    // render\n    return (\n        <>\n            <Header title={`Account ${account.name}`}/>\n            <main className={styles.main + ' noselect'}>\n                <SwipeWidget onChange={changeMonth}\n                             current={monthBrief.month}\n                             showButtons>\n                    {monthsList.map(item => (\n                        <SwipeItemWidget key={item.month}>\n                            <MonthViewHeadWidget months={months}\n                                                 brief={item}\n                            />\n                        </SwipeItemWidget>\n                    ))}\n                </SwipeWidget>\n                <MonthTxList month={currentMonth}/>\n            </main>\n        </>\n    );\n};\n","import { RouteProps } from 'react-router';\nimport { AccountsPage } from '../pages/AccountsPage';\nimport { AccountMonthsPage } from '../pages/AccountMonthsPage';\nimport { baseUrl } from './config';\nimport { MonthDate } from '../models/common/date.types';\n\nexport const account = {\n    list: () => `${baseUrl}/accounts`,\n    view: (account = ':account') => `${baseUrl}/accounts/${account}`,\n    monthsList: (account = ':account') => `${baseUrl}/accounts/${account}/months`,\n    month: (account = ':account', month: MonthDate = ':month') => `${baseUrl}/accounts/${account}/months/${month}`,\n};\n\nexport const accountsRoutes: RouteProps[] = [\n    {\n        path: account.list(),\n        exact: true,\n        component: AccountsPage,\n    },\n    {\n        path: account.view(),\n        exact: true,\n        component: AccountsPage,\n    },\n    {\n        path: account.month(),\n        component: AccountMonthsPage,\n    },\n    {\n        path: account.monthsList(),\n        component: AccountMonthsPage,\n    },\n];\n","export const baseUrl = '';\n\nexport function addQueryString(params: {[key:string]: any}): string {\n    if (!params)\n        return '';\n    if (!Object.keys(params).length)\n        return '';\n\n    return '?' + new URLSearchParams(params).toString();\n}\n","import { declareAction } from '@reatom/core';\nimport { loadAccounts, loadAccountsSuccess } from '../accounts/accounts.actions';\nimport { updateAccountGrips, updateAccountGripsSuccess } from '../account-grips/account-grips.actions';\n\nconst NS = 'client';\n\nexport const setOnlineStatus = declareAction<any>(NS + ':setOnlineStatus');\nexport const refresh = declareAction(NS + ':refresh');\n","import { declareAtom } from '@reatom/core';\nimport { IClientState } from './client.types';\nimport { setOnlineStatus } from './client.actions';\n\nexport const Client = declareAtom<IClientState>(\n    ['client'],\n    {\n        online: false,\n    },\n    on => ({\n        online: [\n            on(setOnlineStatus, (state, online) => ({...state, online})),\n        ],\n    }),\n);\n","import { declareAction } from '@reatom/core';\nimport { UUID } from '../../models/common/common.types';\nimport { Account } from '../../models/account/account.class';\n\nconst NS = 'accounts';\n/**\n * @deprecated\n */\nexport const chooseAccount = declareAction<UUID>(NS + ':chooseAccount');\n\nexport const loadAccounts = declareAction(NS + ':loadAccounts');\nexport const loadAccountsSuccess = declareAction<{\n    current?: UUID;\n    accounts: Account[];\n}>(NS + ':loadAccounts success');\nexport const loadAccountsFailed = declareAction<any>(NS + ':loadAccounts failed');\n\nexport const saveAccount = declareAction<Account>(NS + ':saveAccounts');\nexport const saveAccountSuccess = declareAction<UUID>(NS + ':saveAccounts success');\nexport const saveAccountFailed = declareAction<{ id: UUID, error: any }>(NS + ':saveAccounts failed');\n\n\n","import { declareAtom } from '@reatom/core';\nimport { Account } from '../../models/account/account.class';\nimport { Map } from 'immutable';\nimport { UUID } from '../../models/common/common.types';\nimport { chooseAccount, loadAccountsSuccess, saveAccount } from './accounts.actions';\n\nexport interface IAccountsState {\n    current: Account | null;\n    accounts: Map<UUID, Account>;\n}\n\nexport const Accounts = declareAtom<IAccountsState>(\n    ['accounts'],\n    {\n        current: null,\n        accounts: Map(),\n    },\n    on => ({\n        choose: [\n            on(chooseAccount, (state, id) => {\n                const current = state.accounts.get(id);\n                if (current)\n                    return {\n                        ...state,\n                        current,\n                    };\n                else\n                    return state;\n            }),\n        ],\n        load: [\n            on(loadAccountsSuccess, (state, {current, accounts}) => {\n                const list: Array<[string, Account]> = accounts.map(account => [account.id, account]);\n                const map = Map(list);\n                return {\n                    ...state,\n                    current: map.has(current) ? map.get(current) : accounts[0],\n                    accounts: map,\n                };\n            }),\n        ],\n        save: [\n            on(saveAccount, (state, account) => {\n                return {\n                    accounts: state.accounts.set(account.id, account),\n                    current: account.id === state.current?.id\n                        ? account\n                        : state.current,\n                };\n            }),\n        ],\n    }),\n);\n","import { declareAtom } from '@reatom/core';\nimport { Map } from 'immutable';\nimport { IMonthsState } from './months.types';\nimport { loadMonthsSuccess, saveMonths } from './months.actions';\n\nexport const Months = declareAtom<IMonthsState>(\n    ['months'],\n    Map(),\n    on => ({\n        load: [\n            on(loadMonthsSuccess, (months, items) => {\n                return items.reduce((acc, item) => acc.set(item.id, item), months);\n            }),\n        ],\n        save: [\n            on(saveMonths, (state, months) => {\n                return months.reduce(\n                    (acc, month) => acc.set(month.id, month),\n                    state,\n                );\n            }),\n        ],\n    }),\n);\n","import { UUID } from '../../models/common/common.types';\nimport { declareAction } from '@reatom/core';\nimport { CategoriesBlock } from '../../models/category/categoryBlock.class';\n\nconst NS = 'categories';\n\nexport const loadCategories = declareAction<UUID>(NS + ':loadCategories');\nexport const loadCategoriesSuccess = declareAction<CategoriesBlock>(NS + ':loadCategories success');\nexport const loadCategoriesFailed = declareAction<{ ids: UUID, error: any }>(NS + ':loadCategories failed');\n\nexport const saveCategories = declareAction<CategoriesBlock>(NS + ':saveCategories');\nexport const saveCategoriesSuccess = declareAction<UUID>(NS + ':saveCategories success');\nexport const saveCategoriesFailed = declareAction<{ ids: UUID, error: any }>(NS + ':saveCategories failed');\n","import { DefaultTransactionType, ICategory } from './category.types';\nimport { UUID } from '../common/common.types';\nimport { TransactionType } from '../transaction/transaction.types';\nimport { v4 } from 'uuid';\nimport { Packable, PackableClass } from '../../libs/packable/decorator';\nimport { Packer } from '../../libs/packable/packable';\n\n@PackableClass(data => new Category(data))\nexport class Category implements ICategory {\n    @Packable(String) public readonly id: UUID = '';\n    @Packable(String) public readonly name: string = '';\n    @Packable(String) public readonly parent: UUID | null = null;\n    @Packable(Number) public readonly defaultTxType: DefaultTransactionType = TransactionType.Expense;\n    @Packable(String) public readonly image: string = 'default';\n    @Packable(Boolean) public readonly isInitial = false;\n\n    public static create(name: string,\n                         defaultTransactionType: DefaultTransactionType,\n                         parent: ICategory | UUID | null,\n                         image: string = 'default',\n                         id?: UUID): Category {\n        return new Category({\n            id: id || v4(),\n            name,\n            image,\n            defaultTxType: defaultTransactionType,\n        }).setParent(parent);\n    }\n\n    public static createInitial(name: string,\n                                defaultTransactionType: DefaultTransactionType,\n                                parent: ICategory | UUID | null,\n                                image: string,\n                                id: UUID): Category {\n        if (!id) throw new Error('ID must be set');\n        return new Category({\n            ...Category.create(name, defaultTransactionType, parent, image, id),\n            isInitial: true,\n        });\n    }\n\n    public static fromJSON(data: any): Category {\n        return Packer.get(Category).decode(data);\n    }\n\n    public static toJSON(category: Category): any {\n        return category.toJSON();\n    }\n\n    protected constructor(data: Partial<ICategory>) {\n        if (!data.name) throw new Error('Name must be set');\n        Object.assign(this, data);\n    }\n\n    public toJSON(): any {\n        return Packer.get(Category).encode(this);\n    }\n\n    public setName(name: string): Category {\n        if (this.isInitial)\n            throw new Error(`Can not set name to initial category`);\n\n        return new Category({\n            ...this,\n            name,\n        });\n    }\n\n    public setDefaultTransactionType(type: DefaultTransactionType): Category {\n        return new Category({\n            ...this,\n            defaultTxType: type,\n        });\n    }\n\n    public setImage(image: string): Category {\n        return new Category({\n            ...this,\n            image,\n        });\n    }\n\n    public setParent(parent: ICategory | UUID | null): Category {\n        if (this.isInitial)\n            throw new Error(`Can not set parent to initial category`);\n\n        if (!parent)\n            return new Category({\n                ...this,\n                parent: null,\n            });\n        if (typeof parent === 'string')\n            return new Category({\n                ...this,\n                parent,\n            });\n        return new Category({\n            ...this,\n            parent: parent.id,\n        });\n    }\n}\n\nexport class RootCategory extends Category {\n    public readonly children: Category[] = [];\n\n    constructor(parent: Category, children: ReadonlyArray<Category>) {\n        super(parent);\n        this.children = children.filter(item => item.parent === this.id);\n    }\n}\n","import { declareAtom } from '@reatom/core';\nimport { ICategoriesState } from './categories.types';\nimport { loadCategoriesSuccess, saveCategories } from './categories.actions';\nimport { Map } from 'immutable';\nimport { RootCategory } from '../../models/category/category.class';\n\nexport const Categories = declareAtom<ICategoriesState>(\n    ['categories'],\n    Map(),\n    on => ({\n        load: [\n            on(loadCategoriesSuccess, (collection, block) => {\n                const tree = block.list\n                                  .filter(category => !category.parent)\n                                  .map(category => new RootCategory(category, block.list));\n\n                const list = tree.flatMap(parent => [parent, ...parent.children]);\n\n                const map = Map(list.map(category => [category.id, category]));\n\n                collection = collection.set(block.id, {block, tree, list, map}); // FIXME need create CategoriesBlocksAtom\n                return collection.set(block.account, {block, tree, list, map});\n            }),\n        ],\n        save: [\n            on(saveCategories, (state, months) => {\n                throw new Error('Not implemented');\n            }),\n        ],\n    }),\n);\n","import { combine, createStore } from '@reatom/core';\nimport { connectReduxDevtools } from '@reatom/debug';\nimport { Client } from '../atoms/client/client.atom';\nimport { Accounts } from '../atoms/accounts/accounts.atom';\nimport { Months } from '../atoms/months/months.atom';\nimport { Categories } from '../atoms/categories/categories.atom';\nimport { AccountGrips } from '../atoms/account-grips/account-grips.atom';\nimport { MonthGrips } from '../atoms/month-grips/month-grips.atom';\n\nexport const store = createStore(combine({\n    Client,\n    Accounts,\n    Categories,\n    Months,\n    AccountGrips,\n    MonthGrips,\n}));\n\nconnectReduxDevtools(store);\n\nexport function useStore() {\n    return store;\n}\n\nstore.subscribe((action, state) => {\n    console.group('*** action', action.type);\n    console.log(action.payload);\n    console.log(state);\n    console.groupEnd();\n});\n","import { declareAction } from '@reatom/core';\nimport { IAddTransactionForm } from './transaction.types';\n\nconst NS = 'transaction';\n\nexport const addTransaction = declareAction<IAddTransactionForm>(NS + ':addTransaction');\n","import { Icon } from '../../ui-kit/Icon';\nimport React, { MutableRefObject, ReactHTMLElement, useCallback, useEffect, useRef, useState } from 'react';\nimport { Field, RenderableProps, useField, UseFieldConfig } from 'react-final-form';\n\n// UseFieldConfig<FieldValue>,\n\nexport interface IBaseInputProps extends RenderableProps<any> {\n    name: string;\n    label: string;\n    clearable?: boolean;\n    placeholder?: string;\n    hint?: string;\n}\n\nexport const BaseInput = ({\n                              name, label, clearable, placeholder, hint, component, children, render,\n                          }: IBaseInputProps) => {\n    const field = useField(name);\n\n    const input: MutableRefObject<HTMLInputElement> = useRef();\n    const [active, setActive] = useState(false);\n\n    const onFocus = useCallback(() => setActive(true), [setActive]);\n    const onBlur = useCallback(() => setActive(false), [setActive]);\n    const onClearInput = useCallback(() => {\n        input.current.focus();\n        field.input.onChange('');\n    }, [input]);\n\n    return (\n        <div className=\"form-group basic\">\n            <div className={['input-wrapper', active ? 'active' : '', 'not-empty'].join(' ')}>\n                <label className=\"label\" htmlFor={`form-input-${name}`}>{label}</label>\n                <Field id={`form-input-${name}`}\n                       name={name}\n                       className=\"form-control\"\n                       ref={input}\n                       onFocus={onFocus} onBlur={onBlur}\n                       placeholder={placeholder}\n                       component={component} render={render}>{children}</Field>\n                {clearable &&\n                <i className=\"clear-input\" onClick={onClearInput}>\n                    <Icon name=\"close-circle\" role=\"img\" className=\"md hydrated\"\n                          aria-label=\"close circle\"/>\n                </i>\n                }\n            </div>\n            <div className=\"input-info\">{hint}</div>\n        </div>\n    );\n};\n","import NumberFormat from 'react-number-format';\nimport React from 'react';\nimport { BaseInput, IBaseInputProps } from './BaseInput';\n\nfunction NumberFormatCustom(props) {\n    const {inputRef, onChange, ...other} = props;\n\n    return (\n        <NumberFormat\n            {...other}\n            getInputRef={inputRef}\n            onValueChange={(values) => {\n                onChange({\n                    target: {\n                        name: props.name,\n                        value: values.value,\n                    },\n                });\n            }}\n            prefix=\"$\"\n            thousandSeparator=\" \"\n            isNumericString\n        />\n    );\n}\n\ninterface IProps extends IBaseInputProps {\n\n}\n\nexport const MoneyField = (props: IProps) => (\n    <BaseInput {...props}>\n        {({input, meta}) => (\n            <NumberFormatCustom {...input} className=\"form-control\" type=\"text\" placeholder=\"Amount\"/>\n        )}\n    </BaseInput>\n);\n","import { Field } from 'react-final-form';\nimport React, { useCallback } from 'react';\nimport styled from 'styled-components';\nimport { BaseInput, IBaseInputProps } from './BaseInput';\nimport { TransactionType } from '../../models/transaction/transaction.types';\n\ninterface ITxTypeButtonProps {\n    type: TransactionType;\n    value?: TransactionType;\n    disabled?: boolean;\n    onChange?: (type: TransactionType) => void;\n}\n\nconst TxTypeButton = ({type, value, disabled, onChange}: ITxTypeButtonProps) => {\n    const label = TransactionType[type];\n\n    const active = value === type;\n\n    const onClick = useCallback(() => onChange(type), [onChange, type]);\n\n    const classNames = [\n        'btn',\n        'rounded',\n        'mr-1',\n        'mb-1',\n        active\n            ? 'btn-primary '\n            : 'btn-outline-primary ',\n    ];\n\n    if (disabled)\n        return (\n            <button type=\"button\"\n                    className={classNames.join(' ')}\n                    disabled\n            >{label}</button>\n        );\n    else\n        return (\n            <button type=\"button\"\n                    className={classNames.join(' ')}\n                    onClick={onClick}\n            >{label}</button>\n        );\n};\n\nconst CheckboxWrapper = styled.div`\n    display: inline-block;\n    padding: 5px 10px;\n    cursor: pointer;\n    user-select: none;\n`;\n\nconst TxTypeCheckbox = ({type, value, disabled, onChange}: ITxTypeButtonProps) => {\n    const label = TransactionType[type];\n\n    const active = value === type;\n\n    const onClick = useCallback(() => onChange(type), [onChange, type]);\n\n    if (disabled)\n        return (\n            <CheckboxWrapper>\n                <div className=\"custom-control custom-checkbox d-inline\">\n                    <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck2\"\n                           checked={active}/>\n                    <label className=\"custom-control-label p-0\" htmlFor=\"customCheck2\"/>\n                </div>\n                {label}\n            </CheckboxWrapper>\n        );\n    else\n        return (\n            <CheckboxWrapper onClick={onClick}>\n                <div className=\"custom-control custom-checkbox d-inline\">\n                    <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck2\"\n                           value={type}\n                           checked={active}/>\n                    <label className=\"custom-control-label p-0\" htmlFor=\"customCheck2\"/>\n                </div>\n                {label}\n            </CheckboxWrapper>\n        );\n};\n\n\ninterface IProps extends IBaseInputProps {\n    types: TransactionType[];\n}\n\nexport const TxTypeField = ({types, ...props}: IProps) => {\n    return (\n        <BaseInput {...props} clearable={false}>\n            {({input}) => types.map(type => <TxTypeCheckbox\n                type={type}\n                value={input.value}\n                onChange={input.onChange}\n            />)}\n        </BaseInput>\n    );\n};\n","import React from 'react';\nimport { BaseInput, IBaseInputProps } from './BaseInput';\n\nexport const TextField = (props: IBaseInputProps) => (\n    <BaseInput {...props} component=\"input\"/>\n);\n","import React from 'react';\nimport { BaseInput, IBaseInputProps } from './BaseInput';\n\nexport const DayDateField = (props: IBaseInputProps) => (\n    <BaseInput {...props}>\n        {({input, meta}) => (\n            <input {...input} className=\"form-control\" type=\"date\" placeholder=\"Date\"/>\n        )}\n    </BaseInput>\n);\n","import React from 'react';\nimport { Field, Form } from 'react-final-form';\nimport { MoneyField } from '../components/inputs/MoneyField';\nimport { IAddTransactionForm, TransactionType } from '../models/transaction/transaction.types';\nimport { TxTypeField } from '../components/inputs/TxTypeField';\nimport { BaseInput } from '../components/inputs/BaseInput';\nimport { TextField } from '../components/inputs/TextField';\nimport { DayDateField } from '../components/inputs/DayDateField';\n\ninterface IProps {\n    value: IAddTransactionForm;\n    onSubmit: (value: IAddTransactionForm) => void;\n    validate: (value: IAddTransactionForm) => Partial<{ [key in keyof IAddTransactionForm]: string }>;\n}\n\nexport const TransactionForm = ({onSubmit, value, validate}: IProps) => {\n    return (\n        <Form\n            onSubmit={onSubmit}\n            initialValues={value}\n            validate={validate}\n            render={({handleSubmit, form, submitting, pristine, values}) => (\n                <form onSubmit={handleSubmit} noValidate autoComplete=\"off\">\n                    <MoneyField name=\"amount\"\n                                label=\"Amount\"\n                                hint=\"This is amount\"\n                                placeholder=\"Enter amount\"\n                    />\n                    <TextField name=\"category\"\n                               label=\"Category\"\n                    />\n                    <TxTypeField name=\"type\"\n                                 label=\"\"\n                                 types={[\n                                     TransactionType.Income,\n                                     TransactionType.Expense,\n                                 ]}\n                    />\n                    <TextField name=\"title\"\n                               label=\"Title\"\n                    />\n                    <DayDateField name=\"date\"\n                               label=\"Date\"\n                               component=\"input\"/>\n                    <TextField name=\"account\"\n                               label=\"Account\"\n                    />\n                    <button type=\"submit\" className=\"btn btn-primary rounded mr-1\">Save</button>\n                </form>\n            )}\n        />\n    );\n};\n","import React, { ReactNode } from 'react';\nimport styled from 'styled-components';\n\ninterface IProps {\n    full?: boolean;\n    title?: string;\n    children: ReactNode;\n}\n\n// Standard Section\n\nconst SectionContainer = styled.section`\n  margin: 16px 0;\n  padding: ${props => props.full\n    ? '0'\n    : '0 16px'};\n`;\n\nexport const SectionTitle = styled.h3`\n  text-align: left;\n  font-size: 15px;\n  padding: ${props => props.full\n    ? '6px 16px'\n    : '6px 0'};\n  color: #27173E;\n  font-weight: 500;\n  margin: 0;\n`;\n\nexport const Section = ({full, title, children}: IProps) => {\n    return (\n        <SectionContainer full={full}>\n            <SectionTitle full={full}>{title}</SectionTitle>\n            {children}\n        </SectionContainer>\n    );\n};\n","import React, { ReactNode } from 'react';\n\ninterface IProps {\n    full?: boolean;\n    children: ReactNode;\n}\n\nexport const Card = ({full, children}: IProps) => (\n    <div className={['card', 'mt-1', full ? 'full' : ''].join(' ')}>\n        <div className=\"card-body\">\n            {children}\n        </div>\n    </div>\n);\n","import React from 'react';\n\nimport styles from './TransactionsPage.module.scss';\nimport { Header } from '../components/Header';\nimport { TxList } from '../widgets/TxList';\nimport { TransactionGrip } from '../models/abstract-grip/transaction-grip.class';\n\nconst transactions: TransactionGrip[] = [] as any;\nexport const TransactionsPage = () => {\n    const month = '2020-05';\n\n    return (\n        <div className={styles.page}>\n            <Header title={`Transactions of ${month}`}/>\n            <main>\n                <div className={styles.filter}>\n                    <button className={styles.active}>Все</button>\n                    <button>Траты</button>\n                    <button>Приход</button>\n                </div>\n                <TxList list={transactions} dayDate=\"2020-05-05\"/>\n            </main>\n        </div>\n    );\n};\n","import { RouteProps } from 'react-router';\nimport { TransactionAddPage } from '../pages/TransactionAddPage';\nimport { TransactionsPage } from '../pages/TransactionsPage';\nimport { addQueryString, baseUrl } from './config';\nimport { UUID } from '../models/common/common.types';\nimport { IAddTransactionForm } from '../models/transaction/transaction.types';\n\nexport const transactions = {\n    add: (params?: Partial<IAddTransactionForm>) => `${baseUrl}/transaction/add` + addQueryString(params),\n    list: () => `${baseUrl}/transactions`,\n};\n\nexport const transactionRoutes: RouteProps[] = [\n    {\n        path: transactions.add(),\n        component: TransactionAddPage,\n    },\n    {\n        path: transactions.list(),\n        component: TransactionsPage,\n    },\n];\n","import React, { useState } from 'react';\nimport { IAddTransactionForm, TransactionType } from '../models/transaction/transaction.types';\nimport { store } from '../store/store';\nimport { addTransaction } from '../models/transaction/transaction.actions';\nimport { useLocation } from 'react-router';\nimport { Header } from '../components/Header';\nimport { TransactionForm } from '../widgets/TransactionForm';\nimport { Section } from '../ui-kit/Section';\nimport { Card } from '../ui-kit/Card';\nimport { Main } from '../ui-kit/Main';\nimport { useAtom } from '../store/reatom';\nimport { AccountGrips } from '../atoms/account-grips/account-grips.atom';\nimport { paths } from '../routes';\n\nexport const TransactionAddPage = () => {\n    const params = new URLSearchParams(useLocation().search);\n\n    const {current: currentAccount} = useAtom(AccountGrips);\n\n    const [data, setData] = useState({\n        type: params.get('type')\n            ? params.get('type') in TransactionType\n                ? TransactionType[params.get('type')]\n                : TransactionType.Expense\n            : TransactionType.Expense,\n        amount: params.get('amount') || '', // todo use Money\n        date: params.get('date') || '2020-06-01', // todo use today\n        account: params.get('account') || currentAccount?.id || '',\n        category: params.get('category') || 'default',\n    } as IAddTransactionForm);\n\n    const submitHandler = (data: IAddTransactionForm) => {\n        console.log(data);\n        setData(data);\n        store.dispatch(addTransaction(data));\n    };\n\n    function validate(data: IAddTransactionForm) {\n        const errors: Partial<{ [key in keyof IAddTransactionForm]: string }> = {};\n        if (!data.account)\n            errors.account = 'Required';\n        return errors;\n    }\n\n    return (\n        <>\n            <Header title=\"Add transaction\"\n                    back/>\n            <Main>\n                <Section full title=\"Add transaction\">\n                    <Card>\n                        <TransactionForm value={data}\n                                         onSubmit={submitHandler}\n                                         validate={validate}\n                        />\n                    </Card>\n                </Section>\n            </Main>\n        </>\n    );\n};\n","import { account } from './accounts';\nimport { transactions } from './transactions';\nimport { baseUrl } from './config';\n\nexport const paths = {\n    account,\n    transactions,\n    home: () => `${baseUrl}/accounts`,\n    licenses: () => `${baseUrl}/licenses`,\n    menu: () => `${baseUrl}/menu`,\n};\n","import React from 'react';\nimport styles from './LicensesPage.module.scss';\nimport { Header } from '../components/Header';\nimport { Main } from '../ui-kit/Main';\nimport { Section } from '../ui-kit/Section';\nimport { Card } from '../ui-kit/Card';\n\ninterface IProps {\n    link: string;\n    title: string;\n    author: string;\n    license: string;\n}\n\nconst LicenseItem = ({title, link, author, license}: IProps) => (\n    <li>\n        <a href={link} target=\"_blank\"\n           className=\"item\">\n            {/*<img src=\"assets/img/sample/avatar/avatar1.jpg\" alt=\"image\" className=\"image\"/>*/}\n            <div className=\"in\">\n                <div>\n                    <header>{author}</header>\n                    {title}\n                    <footer>{license}</footer>\n                </div>\n            </div>\n        </a>\n    </li>\n);\n\nexport const LicensesPage = () => {\n\n    return (\n        <>\n            <Header title=\"Licenses\"/>\n            <Main className={styles.licenses}>\n                <ul className=\"listview link-listview inset mt-2\">\n                    <LicenseItem link=\"https://reactjs.org/\"\n                                 title=\"ReactJS\"\n                                 author=\"Facebook Open Source\"\n                                 license=\"MIT License\"/>\n                    <LicenseItem link=\"https://reatom.js.org/\"\n                                 title=\"Reatom state manager\"\n                                 author=\"Arutyunyan Artyom\"\n                                 license=\"MIT License\"/>\n                    <LicenseItem link=\"https://iconstore.co/icons/dripicons-v2/\"\n                                 title={'Icons \"Dripicons\" Version 2.0'}\n                                 author=\"Amit Jakhu\"\n                                 license=\"CC BY 4.0\"/>\n                </ul>\n            </Main>\n        </>\n    );\n};\n","import { RouteProps } from 'react-router';\nimport { accountsRoutes } from './accounts';\nimport { transactionRoutes } from './transactions';\nimport { paths } from './index';\nimport { LicensesPage } from '../pages/LicensesPage';\nimport { MainMenu } from '../pages/MainMenu';\n\nexport const routes: RouteProps[] = [\n    // {\n    //     path: '/finman/',\n    //     exact: true,\n    //     component: SubsetsPage,\n    // },\n    ...accountsRoutes,\n    ...transactionRoutes,\n    {\n        path: paths.menu(),\n        component: MainMenu,\n    },\n    {\n        path: paths.licenses(),\n        component: LicensesPage,\n    },\n];\n","import React from 'react';\nimport { Header } from '../components/Header';\nimport { Main } from '../ui-kit/Main';\nimport { paths } from '../routes';\n\nexport const MainMenu = () => {\n    return (\n        <>\n            <Header title=\"Menu\" back/>\n            <Main>\n                <div className=\"listview-title mt-1\">Storage</div>\n                <ul className=\"listview image-listview text inset\"\n                    style={{marginLeft: '0', marginRight: '0'}}>\n                    <li>\n                        <div className=\"item\">\n                            <div className=\"in\">\n                                <div>Subsets</div>\n                                <span className=\"text-muted\">0</span>\n                            </div>\n                        </div>\n                    </li>\n                    <li>\n                        <div className=\"item\">\n                            <div className=\"in\">\n                                <div>Accounts</div>\n                                <span className=\"text-muted\">1</span>\n                            </div>\n                        </div>\n                    </li>\n                    <li>\n                        <div className=\"item\">\n                            <div className=\"in\">\n                                <div>Month blocks</div>\n                                <span className=\"text-muted\">123</span>\n                            </div>\n                        </div>\n                    </li>\n                    <li>\n                        <div className=\"button item\">\n                            <div className=\"in\">\n                                <div>\n                                    Remove all data\n                                    <div className=\"text-muted\">\n                                        This action cannot be undone\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </li>\n                </ul>\n\n                {/*<div className=\"listview-title mt-1\">Notifications</div>*/}\n                {/*<ul className=\"listview image-listview text inset\">*/}\n                {/*    <li>*/}\n                {/*        <div className=\"item\">*/}\n                {/*            <div className=\"in\">*/}\n                {/*                <div>*/}\n                {/*                    Payment Alert*/}\n                {/*                    <div className=\"text-muted\">*/}\n                {/*                        Send notification when new payment received*/}\n                {/*                    </div>*/}\n                {/*                </div>*/}\n                {/*                <div className=\"custom-control custom-switch\">*/}\n                {/*                    <input type=\"checkbox\" className=\"custom-control-input\" id=\"customSwitch4\"/>*/}\n                {/*                    <label className=\"custom-control-label\" htmlFor=\"customSwitch4\"/>*/}\n                {/*                </div>*/}\n                {/*            </div>*/}\n                {/*        </div>*/}\n                {/*    </li>*/}\n                {/*    <li>*/}\n                {/*        <a href=\"#\" className=\"item\">*/}\n                {/*            <div className=\"in\">*/}\n                {/*                <div>Notification Sound</div>*/}\n                {/*                <span className=\"text-primary\">Beep</span>*/}\n                {/*            </div>*/}\n                {/*        </a>*/}\n                {/*    </li>*/}\n                {/*</ul>*/}\n\n                {/*<div className=\"listview-title mt-1\">Profile Settings</div>*/}\n                {/*<ul className=\"listview image-listview text inset\">*/}\n                {/*    <li>*/}\n                {/*        <a href=\"#\" className=\"item\">*/}\n                {/*            <div className=\"in\">*/}\n                {/*                <div>Change Username</div>*/}\n                {/*            </div>*/}\n                {/*        </a>*/}\n                {/*    </li>*/}\n                {/*    <li>*/}\n                {/*        <a href=\"#\" className=\"item\">*/}\n                {/*            <div className=\"in\">*/}\n                {/*                <div>Update E-mail</div>*/}\n                {/*            </div>*/}\n                {/*        </a>*/}\n                {/*    </li>*/}\n                {/*    <li>*/}\n                {/*        <a href=\"#\" className=\"item\">*/}\n                {/*            <div className=\"in\">*/}\n                {/*                <div>Address</div>*/}\n                {/*                <span className=\"text-primary\">Edit</span>*/}\n                {/*            </div>*/}\n                {/*        </a>*/}\n                {/*    </li>*/}\n                {/*    <li>*/}\n                {/*        <div className=\"item\">*/}\n                {/*            <div className=\"in\">*/}\n                {/*                <div>*/}\n                {/*                    Private Profile*/}\n                {/*                </div>*/}\n                {/*                <div className=\"custom-control custom-switch\">*/}\n                {/*                    <input type=\"checkbox\" className=\"custom-control-input\" id=\"customSwitch2\"/>*/}\n                {/*                    <label className=\"custom-control-label\" htmlFor=\"customSwitch2\"/>*/}\n                {/*                </div>*/}\n                {/*            </div>*/}\n                {/*        </div>*/}\n                {/*    </li>*/}\n                {/*</ul>*/}\n\n                {/*<div className=\"listview-title mt-1\">Security</div>*/}\n                {/*<ul className=\"listview image-listview text mb-2 inset\">*/}\n                {/*    <li>*/}\n                {/*        <a href=\"#\" className=\"item\">*/}\n                {/*            <div className=\"in\">*/}\n                {/*                <div>Update Password</div>*/}\n                {/*            </div>*/}\n                {/*        </a>*/}\n                {/*    </li>*/}\n                {/*    <li>*/}\n                {/*        <div className=\"item\">*/}\n                {/*            <div className=\"in\">*/}\n                {/*                <div>*/}\n                {/*                    2 Step Verification*/}\n                {/*                </div>*/}\n                {/*                <div className=\"custom-control custom-switch\">*/}\n                {/*                    <input type=\"checkbox\" className=\"custom-control-input\" id=\"customSwitch3\"/>*/}\n                {/*                    <label className=\"custom-control-label\" htmlFor=\"customSwitch3\"/>*/}\n                {/*                </div>*/}\n                {/*            </div>*/}\n                {/*        </div>*/}\n                {/*    </li>*/}\n                {/*    <li>*/}\n                {/*        <a href=\"#\" className=\"item\">*/}\n                {/*            <div className=\"in\">*/}\n                {/*                <div>Log out all devices</div>*/}\n                {/*            </div>*/}\n                {/*        </a>*/}\n                {/*    </li>*/}\n                {/*</ul>*/}\n            </Main>\n        </>\n    );\n};\n\n","import * as ReactRouterDom from 'react-router-dom';\n\nexport const Link = ReactRouterDom.Link;\nexport const NavLink = ReactRouterDom.NavLink;\n","import React from 'react';\nimport { paths, NavLink } from '../routes';\nimport { Icon, Icons } from '../ui-kit/Icon';\n\ninterface INavLink {\n    path: string;\n    exact?: boolean;\n    icon: string;\n    label: string;\n}\n\nconst links: INavLink[] = [\n    {\n        path: paths.home(),\n        exact: true,\n        icon: Icons.walletOutline,\n        label: 'Wallets',\n    },\n    // {\n    //     path: paths.home(),\n    //     exact: true,\n    //     icon: Icons.cardOutline,\n    //     label: 'Wallets',\n    // },\n    {\n        path: paths.transactions.add(),\n        icon: Icons.addCircleOutline,\n        label: 'New item',\n    },\n    {\n        path: paths.menu(),\n        icon: Icons.ellipsisHorizontalOutline,\n        label: 'Menu',\n    },\n];\n\nexport const NavBar = () => {\n    return (\n        <div className=\"appBottomMenu\">\n            {links.map(link => (\n                <NavLink to={link.path} exact={link.exact} className=\"item\">\n                    <div className=\"col\">\n                        <Icon icon={link.icon} role=\"img\" className=\"md hydrated\"\n                              aria-label=\"pie chart outline\"/>\n                        <strong>{link.label}</strong>\n                    </div>\n                </NavLink>\n            ))}\n        </div>\n    );\n};\n","export enum DBStatus {\n    Initializing,\n    Upgrading,\n    Migrating,\n    Ready,\n    Failed,\n}\n\nexport interface IScheme<T = any, K extends keyof T = any> {\n    collection: string;\n    dbVersion: number;\n    key: K;\n\n    upgrade?(objectStore: IDBObjectStore, oldVersion: number, newVersion: number): void;\n}\n\nexport type DBStatusListener = (status: DBStatus) => void;\n","export function eventLogger<T extends { addEventListener: Function }>(emitter: T, emitterName: string, eventName: string | string[]) {\n    if (Array.isArray(eventName))\n        eventName.forEach(name => eventLogger(emitter, emitterName, name));\n    else\n        emitter.addEventListener(eventName, event => {\n            console.log(`[eventLogger] Emitter: \"${emitterName}\", event \"${eventName}\":`, event);\n        });\n}\n","import { eventLogger } from './db.utils';\nimport { UUID } from '../../models/common/common.types';\n\nexport class Collection<T = any> {\n    private readonly transaction: IDBTransaction;\n    private readonly storage: IDBObjectStore;\n\n    constructor(private db: IDBDatabase, private scheme: any) {\n        this.transaction = db.transaction(scheme.collection, 'readwrite');\n        eventLogger(\n            this.transaction,\n            'transaction',\n            [\n                'abort',\n                'complete',\n                'error',\n            ],\n        );\n        this.storage = this.transaction.objectStore(scheme.collection);\n    }\n\n    //\n    // public commit(): Promise<void> {\n    //     return new Promise<void>((resolve, reject) => {\n    //         // this.transaction.commit();\n    //     });\n    // }\n\n\n    // Returns an IDBRequest object, and, in a separate thread, creates a structured clone of the value, and stores the cloned value in the object store. This is for adding new records to an object store.\n    public add(value: T): Promise<T> {\n        return new Promise((resolve, reject) => {\n            const request = this.storage.add(value);\n\n            eventLogger(request, 'request', [\n                'error',\n                'success',\n            ]);\n\n            request.onsuccess = (event: any) => resolve(event.target.result);\n            request.onerror = error => reject(error);\n        });\n    }\n\n    // Creates and immediately returns an IDBRequest object, and clears this object store in a separate thread. This is for deleting all current records out of an object store.\n    // IDBObjectStore.clear()\n    // Returns an IDBRequest object, and, in a separate thread, returns the total number of records that match the provided key or IDBKeyRange. If no arguments are provided, it returns the total number of records in the store.\n    // IDBObjectStore.count()\n    // Creates a new index during a version upgrade, returning a new IDBIndex object in the connected database.\n    // IDBObjectStore.createIndex()\n    // returns an IDBRequest object, and, in a separate thread, deletes the store object selected by the specified key. This is for deleting individual records out of an object store.\n    // IDBObjectStore.delete()\n    // Destroys the specified index in the connected database, used during a version upgrade.\n    // IDBObjectStore.deleteIndex()\n\n    /** Returns an IDBRequest object, and, in a separate thread, returns the store object store\n     *  selected by the specified key. This is for retrieving specific records from an object store.\n     *\n     *  *IDBObjectStore.get()*\n     */\n    public get(id: UUID): Promise<T> {\n        return new Promise((resolve, reject) => {\n            const request = this.storage.get(id);\n\n            eventLogger(request, 'request', [\n                'error',\n                'success',\n            ]);\n\n            request.onsuccess = (event: any) => resolve(event.target.result);\n            request.onerror = error => reject(error);\n        });\n    }\n\n    // Returns an IDBRequest object, and, in a separate thread retrieves and returns the record key for the object in the object stored matching the specified parameter.\n    // IDBObjectStore.getKey()\n\n    // Returns an IDBRequest object retrieves all objects in the object store matching the specified parameter or all objects in the store if no parameters are given.\n    public getAll(query?: string[], count?: number): Promise<T[]> {\n        if (Array.isArray(query))\n            return Promise.all(query.map(id => this.get(id)));\n\n        return new Promise((resolve, reject) => {\n            const request = this.storage.getAll(query);\n\n            eventLogger(request, 'request', [\n                'error',\n                'success',\n            ]);\n\n            request.onsuccess = (event: any) => resolve(event.target.result);\n            request.onerror = error => reject(error);\n        });\n    }\n\n\n    // Returns an IDBRequest object retrieves record keys for all objects in the object store matching the specified parameter or all objects in the store if no parameters are given.\n    // IDBObjectStore.getAllKeys()\n    // Opens an index from this object store after which it can, for example, be used to return a sequence of records sorted by that index using a cursor.\n    // IDBObjectStore.index()\n    // Returns an IDBRequest object, and, in a separate thread, returns a new IDBCursorWithValue object. Used for iterating through an object store by primary key with a cursor.\n    // IDBObjectStore.openCursor()\n    // Returns an IDBRequest object, and, in a separate thread, returns a new IDBCursor. Used for iterating through an object store with a key.\n    // IDBObjectStore.openKeyCursor()\n\n    /**\n     * Returns an IDBRequest object, and, in a separate thread, creates a structured clone\n     * of the value, and stores the cloned value in the object store. This is for updating\n     * existing records in an object store when the transaction's mode is readwrite.\n     *\n     * *IDBObjectStore.put()*\n     */\n    //\n    public update(value: T): Promise<T> {\n        return new Promise((resolve, reject) => {\n            const request = this.storage.put(value);\n\n            eventLogger(request, 'request', [\n                'error',\n                'success',\n            ]);\n\n            request.onsuccess = (event: any) => resolve(event.target.result);\n            request.onerror = error => reject(error);\n        });\n    }\n}\n","import { DBStatus, DBStatusListener, IScheme } from './db.types';\nimport { Collection } from './collection';\nimport { eventLogger } from './db.utils';\n\nexport class IndexedDB {\n    get status(): DBStatus {\n        return this._status;\n    }\n\n    private listeners: DBStatusListener[] = [];\n\n    private _status = DBStatus.Initializing;\n\n    private db: IDBDatabase | null = null;\n\n    constructor(dbName: string,\n                public schemes: IScheme[],\n                private onInstall: (objectStore: IndexedDB) => Promise<void>,\n                private onUpgrade?: (objectStore: IndexedDB, oldVersion: number, newVersion: number) => Promise<void>,\n    ) {\n        if (!window.indexedDB)\n            throw new Error('IndexedDB not supported');\n\n        schemes.forEach(scheme => {\n            const exists = schemes.find(item => item !== scheme && item.collection === scheme.collection);\n            if (exists)\n                throw new Error(`Collection \"${scheme.collection}\" used in different schemes.\\nYou can use collection only in one scheme`);\n        });\n\n        const version = Math.max(1, ...schemes.map(model => model.dbVersion));\n\n        console.log(`Start DB with version: ${version}, count of models: ${schemes.length}`);\n\n        this.openDB(dbName, version).then(\n            () => console.log('Successfully open DB'),\n            event => console.error('Failed to open DB', event),\n        );\n    }\n\n    public transaction<T>(scheme: IScheme<T>): Collection<T> {\n        if (this._status !== DBStatus.Ready && this._status !== DBStatus.Migrating)\n            throw new Error('Database not ready');\n\n        return this.getAccessor(scheme);\n    }\n\n    public addStatusListener(fn: DBStatusListener): void {\n        this.listeners.push(fn);\n        setTimeout(() => fn(this.status));\n    }\n\n    public removeStatusListener(fn: DBStatusListener): void {\n        this.listeners = this.listeners.filter(item => item !== fn);\n    }\n\n    private setStatus(status: DBStatus): void {\n        console.log(`change DB status to \"${DBStatus[status]}\"`);\n        if (status === this._status)\n            return;\n        console.log(`Change DB status from \"${DBStatus[this._status]}\" to \"${DBStatus[status]}\"`);\n        this._status = status;\n        this.listeners.forEach(fn => fn(status));\n    }\n\n    private getAccessor(scheme: IScheme): Collection {\n        if (this.db)\n            return new Collection(this.db, scheme);\n        else\n            throw new Error('Cannot create accessor for closed database');\n    }\n\n    private openDB(dbName: string, version: number): Promise<void> {\n        this.setStatus(DBStatus.Initializing);\n        return new Promise(((resolve, reject) => {\n            const openRequest = window.indexedDB.open(dbName, version);\n\n            let isUpgrade = false;\n            let oldVersion = version;\n            let newVersion = version;\n\n            eventLogger(\n                openRequest,\n                'openRequest',\n                [\n                    'upgradeneeded',\n                    'blocked',\n                    'error',\n                    'success',\n                ],\n            );\n\n            openRequest.addEventListener('upgradeneeded', (event: any) => {\n                this.setStatus(DBStatus.Upgrading);\n                isUpgrade = true;\n                oldVersion = event.oldVersion;\n                newVersion = event.newVersion;\n                if (oldVersion)\n                    console.log(`Upgrade DB from version ${oldVersion}`);\n                else\n                    console.log('Initialize DB');\n\n                const transaction: IDBTransaction = this.db = event.target.transaction;\n                console.log(transaction);\n                const db: IDBDatabase = this.db = event.target.result;\n\n                console.log(Array.from(db.objectStoreNames));\n\n                this.schemes.forEach(scheme => {\n                    let objectStore: IDBObjectStore;\n                    try {\n                        objectStore = transaction.objectStore(scheme.collection);\n                    } catch (e) {\n                        console.warn(e);\n                        objectStore = db.createObjectStore(scheme.collection, {keyPath: scheme.key});\n                    }\n\n                    console.log(objectStore);\n                    if (scheme.upgrade) {\n                        scheme.upgrade(objectStore!, oldVersion, newVersion);\n                    }\n                });\n            });\n\n            openRequest.addEventListener('success', async (event: any) => {\n                this.db = event.target.result;\n\n                if (isUpgrade) {\n                    this.setStatus(DBStatus.Migrating);\n\n                    if (!oldVersion)\n                        await this.onInstall(this);\n                    else if (this.onUpgrade)\n                        await this.onUpgrade(this, oldVersion, newVersion);\n                }\n                this.setStatus(DBStatus.Ready);\n                resolve();\n            });\n            openRequest.addEventListener('error', (event: any) => {\n                console.log(event);\n                this.setStatus(DBStatus.Failed);\n                reject(event);\n            });\n        }));\n    }\n}\n","import { IScheme } from '../../libs/indexed-db';\nimport { IAccount } from '../../models/account/account.types';\n\nexport const AccountScheme: IScheme<IAccount> = {\n    collection: 'accounts',\n    dbVersion: 1,\n    key: 'id',\n    upgrade(objectStore, oldVersion, newVersion): void {\n        console.log('update account from ', oldVersion, newVersion);\n    },\n};\n","import { Money } from '../money/money.class';\nimport { Packer } from '../../libs/packable/packable';\n\nexport type UUID = string;\nexport type HASH = string;\n\nexport enum SyncStatus {\n    NoSynced,\n    Prepared,\n    Syncing,\n    FullySynced,\n    Fixed,\n}\n\nexport interface ISummary {\n    balance: Money;\n    income: Money;\n    expense: Money;\n}\n\nexport const summaryPacker = Packer.forObject<ISummary>({\n    balance: Money,\n    income: Money,\n    expense: Money,\n});\n\nexport interface IExtendSummary extends ISummary {\n    balanceOnStart: Money;\n    balanceOnEnd: Money;\n}\n\nexport const extendSummaryPacker = Packer.forObject<IExtendSummary>({\n    balance: Money,\n    income: Money,\n    expense: Money,\n    balanceOnStart: Money,\n    balanceOnEnd: Money,\n});\n\nexport const EmptySummary: ISummary = {\n    balance: Money.empty,\n    income: Money.empty,\n    expense: Money.empty,\n};\n\nexport const EmptyExtendSummary: IExtendSummary = {\n    ...EmptySummary,\n    balanceOnStart: Money.empty,\n    balanceOnEnd: Money.empty,\n};\n\nObject.freeze(EmptySummary);\nObject.freeze(EmptyExtendSummary);\n","import { IScheme } from '../../libs/indexed-db';\nimport { IMonth } from '../../models/month/month.types';\n\nexport const MonthScheme: IScheme<IMonth> = {\n    collection: 'months',\n    dbVersion: 1,\n    key: 'id',\n    upgrade(objectStore, oldVersion, newVersion): void {\n        console.log('update months from ', oldVersion, newVersion);\n    },\n};\n","import { extendSummaryPacker, IExtendSummary, SyncStatus, UUID } from '../common/common.types';\nimport { IDay } from '../day/day.class';\nimport { MonthDate } from '../common/date.types';\nimport { Packer } from '../../libs/packable/packable';\n\nexport interface IMonthBrief {\n    id: UUID;\n    month: MonthDate;\n    summary: IExtendSummary;\n    prevMonths: UUID[];\n    prevVersions: UUID[];\n    dataHash: string;\n}\n\nexport const monthBriefPacker = Packer.maybe(Packer.forObject<IMonthBrief>({\n    id: String,\n    month: String,\n    summary: extendSummaryPacker,\n    prevMonths: [String],\n    prevVersions: [String],\n    dataHash: String,\n}));\n\nexport interface IMonth extends IMonthBrief {\n    syncStatus: SyncStatus;\n    timestamp: number;\n    account: UUID;\n    days: IDay[];\n}\n","import { ITransaction, TransactionType } from './transaction.types';\nimport { IExtendSummary, ISummary } from '../common/common.types';\nimport { Money } from '../money/money.class';\n\nexport const EMPTY_SUMMARY: ISummary = {\n    income: Money.empty,\n    expense: Money.empty,\n    balance: Money.empty,\n};\n\nexport function calculateSummary(transactions: ITransaction[]): ISummary {\n    let [expense, income] = transactions.reduce(\n        ([expense, income], tx) => {\n            switch (tx.type) {\n                case TransactionType.Removed:\n                    return [expense, income];\n                case TransactionType.Income:\n                    return [\n                        expense,\n                        income.add(tx.amount),\n                    ];\n                case TransactionType.Expense:\n                    return [\n                        expense.add(tx.amount),\n                        income,\n                    ];\n                default:\n                    throw new Error(`Can't process type \"${TransactionType[tx.type]}\"`);\n            }\n        },\n        [Money.empty, Money.empty],\n    );\n\n    const balance = income.sub(expense);\n\n    return {\n        balance,\n        expense,\n        income,\n    };\n}\n\nexport function calculateExtendSummary(transactions: ITransaction[]): IExtendSummary {\n    let balanceOnStart = Money.empty;\n\n    const summary = calculateSummary(transactions);\n\n    return {\n        ...summary,\n        balanceOnStart,\n        balanceOnEnd: balanceOnStart.add(summary.balance),\n    };\n}\n\nexport function addSummary(base: ISummary, add: ISummary): ISummary {\n    const balance = base.balance.add(add.balance);\n    const expense = base.expense.add(add.expense);\n    const income = base.income.add(add.income);\n    if (!income.sub(expense).equal(balance)) {\n        if (!checkSummary(base))\n            throw new Error(`\"Base\" summary invalid`);\n        if (!checkSummary(add))\n            throw new Error(`\"Add\" summary invalid`);\n        throw new Error(`Incorrect balance`);\n    }\n    return {\n        balance,\n        expense,\n        income,\n    };\n}\n\nexport function addExtendSummary(base: IExtendSummary, add: ISummary): IExtendSummary {\n    const summary = addSummary(base, add);\n    const balanceOnStart = base.balanceOnStart;\n    const balanceOnEnd = base.balanceOnEnd.add(add.balance);\n    if (!summary.income.sub(summary.expense).equal(summary.balance)) {\n        if (!checkExtendSummary(base))\n            throw new Error(`\"Base\" summary invalid`);\n        if (!checkSummary(add))\n            throw new Error(`\"Add\" summary invalid`);\n        throw new Error(`Incorrect balance`);\n    }\n    return {\n        ...summary,\n        balanceOnStart,\n        balanceOnEnd,\n    };\n}\n\nexport function checkSummary(summary: ISummary): boolean {\n    const balance = summary.income.sub(summary.expense);\n    return balance.equal(summary.balance);\n}\n\nexport function checkExtendSummary(summary: IExtendSummary): boolean {\n    if (!checkSummary(summary))\n        return false;\n    const balance = summary.income.sub(summary.expense);\n    const balanceOnEnd = summary.balanceOnStart.add(balance);\n    return balanceOnEnd.equal(summary.balanceOnEnd);\n}\n","import { DayDate, MonthDate } from './date.types';\n\nexport function parseMonthDate(value: MonthDate): Date {\n    const match: RegExpMatchArray | null = value.match(/^(\\d{4})-(\\d{2})$/);\n    if (!match)\n        throw new Error(`Invalid MonthDate \"${value}\"`);\n\n    const year = +match[1];\n    const month = +match[2] - 1;\n    const date = new Date(year, month, 1, 12, 0, 0);\n\n    if (date.getFullYear() !== year)\n        throw new Error(`Invalid year in \"${value}\"`);\n    if (date.getMonth() !== month)\n        throw new Error(`Invalid month in \"${value}\"`);\n\n    return date;\n}\n\nexport function parseDayDate(value: DayDate): Date {\n    const match: RegExpMatchArray | null = value.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);\n    if (!match)\n        throw new Error(`Invalid DayDate \"${value}\"`);\n\n    const year = +match[1];\n    const month = +match[2] - 1;\n    const day = +match[3];\n    const date = new Date(year, month, day, 12, 0, 0);\n\n    if (date.getFullYear() !== year)\n        throw new Error(`Invalid year in \"${value}\"`);\n    if (date.getMonth() !== month)\n        throw new Error(`Invalid month in \"${value}\"`);\n    if (date.getDate() !== day)\n        throw new Error(`Invalid date in \"${value}\"`);\n\n    return date;\n}\n\nexport function dayDateToMonth(day: DayDate): MonthDate {\n    return day.split('-', 2).join('-');\n}\n","import { v1 as uuidGenerator } from 'uuid';\nimport { ITransaction, TransactionType } from './transaction.types';\nimport { UUID } from '../common/common.types';\nimport { Money } from '../money/money.class';\nimport { Packable, PackableClass } from '../../libs/packable/decorator';\nimport { Packer } from '../../libs/packable/packable';\n\n@PackableClass(data => new Transaction(data))\nexport class Transaction implements ITransaction {\n    @Packable(String) public id: UUID = '';\n    @Packable(Money) public amount: Money = Money.empty;\n    @Packable(Number) public type: TransactionType = TransactionType.Removed;\n    @Packable(String) public category: UUID | '' = '';\n    @Packable(String) public title: string | '' = '';\n    @Packable(Number) public createdAt: number = 0;\n    @Packable(Number) public updatedAt: number = 0;\n\n    public static createWithID(id: UUID, type?: TransactionType,\n                               amount?: Money): Transaction;\n    public static createWithID(id: UUID, type: TransactionType,\n                               amount: string | number,\n                               currencyName: string): Transaction;\n    public static createWithID(id: UUID, type: TransactionType = TransactionType.Removed,\n                               amount?: string | number | Money,\n                               currencyName?: string): Transaction {\n        const tx = new Transaction({\n            id,\n            amount: Money.empty,\n            type,\n            category: '',\n            title: '',\n            createdAt: 0,\n            updatedAt: 0,\n        });\n\n        if (amount)\n            return tx.setAmount(amount as any, currencyName as any);\n        else\n            return tx;\n    }\n\n    public static create(type?: TransactionType,\n                         amount?: Money): Transaction;\n    public static create(type: TransactionType,\n                         amount: string | number,\n                         currencyName: string): Transaction;\n    public static create(type: TransactionType = TransactionType.Removed,\n                         amount?: string | number | Money,\n                         currencyName?: string): Transaction {\n        const id = uuidGenerator();\n\n        const tx = new Transaction({\n            id,\n            amount: Money.empty,\n            type,\n            category: '',\n            title: '',\n            createdAt: 0,\n            updatedAt: 0,\n        });\n\n        if (amount)\n            return tx.setAmount(amount as any, currencyName as any);\n        else\n            return tx;\n    }\n\n    public static fromJSON(data: any): Transaction { // TODO больше валидации\n        return Packer.get(Transaction).decode(data);\n    }\n\n    public static toJSON(tx: Transaction): any {\n        return tx.toJSON();\n    }\n\n    private constructor(data: unknown) {\n        Object.assign(this, data);\n    }\n\n    public toJSON(): object {\n        return Packer.get(Transaction).encode(this);\n    }\n\n    public setAmount(money: Money): Transaction;\n    public setAmount(amount: string | number, currencyName: string): Transaction;\n    public setAmount(amount: string | number | Money, currencyName?: string): Transaction {\n        let money: Money;\n        if ((typeof amount === 'string' || typeof amount === 'number') && typeof currencyName === 'string')\n            money = Money.create(amount, currencyName);\n        else\n            money = Money.from(amount as (string | Money));\n\n        return new Transaction({\n            ...this,\n            amount: money,\n        });\n    }\n\n    public setType(type: TransactionType): Transaction {\n        return new Transaction({\n            ...this,\n            type,\n        });\n    }\n\n    public setCategory(category: UUID | null): Transaction {\n        return new Transaction({\n            ...this,\n            category,\n        });\n    }\n\n    public setTitle(title: string | ''): Transaction {\n        return new Transaction({\n            ...this,\n            title,\n        });\n    }\n\n    public setCreatedAt(createdAt: number): Transaction {\n        return new Transaction({\n            ...this,\n            createdAt,\n        });\n    }\n\n    public setUpdatedAt(updatedAt: number): Transaction {\n        return new Transaction({\n            ...this,\n            updatedAt,\n        });\n    }\n}\n","import { EmptySummary, ISummary, summaryPacker } from '../common/common.types';\nimport { ITransaction } from '../transaction/transaction.types';\nimport { calculateSummary } from '../transaction/transactions.utils';\nimport { DayDate } from '../common/date.types';\nimport { parseDayDate } from '../common/date.utils';\nimport { Transaction } from '../transaction/transaction.class';\nimport { Packable, PackableClass } from '../../libs/packable/decorator';\nimport { Packer } from '../../libs/packable/packable';\n\nexport interface IDay {\n    date: DayDate;\n    summary: ISummary;\n    transactions: ITransaction[];\n}\n\n@PackableClass(data => new Day(data))\nexport class Day implements IDay {\n    @Packable(String) public readonly date: DayDate = '';\n    @Packable(summaryPacker) public readonly summary: ISummary = EmptySummary;\n    @Packable([Transaction]) public readonly transactions: Transaction[] = [];\n    public readonly dateTime: Date = new Date();\n\n    public static create(date: DayDate): Day {\n        return new Day({date});\n    }\n\n    public static fromJSON(value: any): Day {\n        return Packer.get(Day).decode(value);\n    }\n\n    protected constructor(data: Partial<Day>) {\n        Object.assign(this, data);\n        this.dateTime = parseDayDate(this.date);\n    }\n\n    public toJSON(): any {\n        return Packer.get(Day).encode(this);\n    }\n\n    // FIXME remove interface or make transaction by data\n    public addTransaction(tx: ITransaction): Day {\n        const transactions: ITransaction[] = [\n            ...this.transactions,\n            tx,\n        ];\n\n        const summary: ISummary = calculateSummary(transactions);\n\n        return new Day({\n            ...this,\n            summary,\n            transactions,\n        });\n    }\n}\n","import sha1 from 'crypto-js/sha1';\nimport {\n    EmptyExtendSummary,\n    EmptySummary,\n    extendSummaryPacker,\n    IExtendSummary,\n    SyncStatus,\n    UUID,\n} from '../common/common.types';\nimport { IMonth, IMonthBrief } from './month.types';\nimport { Day, IDay } from '../day/day.class';\nimport { getDaysInMonth } from 'date-fns';\nimport { parseMonthDate } from '../common/date.utils';\nimport { DayDate, MonthDate } from '../common/date.types';\nimport { addSummary } from '../transaction/transactions.utils';\nimport { Money } from '../money/money.class';\nimport { Packable, PackableClass } from '../../libs/packable/decorator';\nimport { Packer } from '../../libs/packable/packable';\n\n/**\n * ID является хешем от данных, при любом изменении создается новый экземпляр с новым ID\n * Класс гарантирует совпадение данных при совпадении ID\n */\n@PackableClass(data => new Month(data))\nexport class Month implements IMonth {\n    @Packable(String) public readonly id: UUID = '';\n    @Packable(Number) public readonly version: number = 1;\n    @Packable(String) public readonly account: UUID = '';\n    @Packable(String) public readonly month: MonthDate = '';\n    @Packable(Number) public readonly syncStatus: SyncStatus = SyncStatus.NoSynced;\n    @Packable([String]) public readonly prevMonths: UUID[] = [];\n    @Packable([String]) public readonly prevVersions: UUID[] = [];\n    @Packable(String) public readonly dataHash: string = '';\n    @Packable(Number) public readonly timestamp: number = 0;\n    public readonly updatedAt: Date = new Date(0);\n    @Packable(extendSummaryPacker) public readonly summary: IExtendSummary = EmptyExtendSummary;\n    @Packable([Day]) public readonly days: Day[] = [];\n    @Packable(Number) public readonly daysInMonth: number = 0;\n\n    /**\n     * @param account\n     * @param month\n     * @param timestamp\n     */\n    public static createFirstBlock(account: UUID, month: MonthDate, timestamp: number): Month {\n        const daysInMonth = getDaysInMonth(parseMonthDate(month));\n\n        return new Month({\n            timestamp,\n            account,\n            month,\n            daysInMonth,\n            days: [],\n            syncStatus: SyncStatus.Fixed,\n        });\n    }\n\n    public static generateID(month: Month, dataHash?: string): string {\n        if (month.version !== 1)\n            throw new Error(`Version ${month.version} not supported`);\n\n        const data = {\n            version: month.version,\n            account: month.account,\n            prevMonths: month.prevMonths,\n            prevVersions: month.prevVersions,\n            dataHash: dataHash || month.getDataHash(),\n        };\n\n        const hash = sha1(JSON.stringify(data)).toString();\n\n        const date = parseMonthDate(month.month);\n        const year = date.getFullYear() - 1970;\n        const monthID = (year * 12 + date.getMonth()).toString(16).padStart(3, '0');\n\n        const ts = (month.timestamp / 1000).toString(16)\n                                           .substr(0, 11)\n                                           .replace('.', '');\n\n        let id = `${monthID}${ts}${hash}`.substr(0, 32);\n\n        id = [\n            id.substr(0, 8),\n            id.substr(8, 4),\n            id.substr(12, 4),\n            id.substr(16, 4),\n            id.substr(20, 12),\n        ].join('-');\n\n        return id;\n    }\n\n    /**\n     * Создание мердж блока\n     *\n     * @param blocks Предыдущие блоки цепочки\n     * @param revisions Предыдущие версии блока\n     */\n    public static merge(blocks: Month[], revisions: Month[]): Month {\n        // отсортировать по алфавиту\n        // проверить sync статус\n\n        throw new Error();\n    }\n\n    public static getBrief(month: IMonthBrief): IMonthBrief {\n        return {\n            id: month.id,\n            month: month.month,\n            summary: month.summary,\n            prevMonths: month.prevMonths,\n            prevVersions: month.prevVersions,\n            dataHash: month.dataHash,\n        };\n    }\n\n    public static fromJSON(value: any): Month {\n        return Packer.get(Month).decode(value);\n    }\n\n    public toJSON(): any {\n        return Packer.get(Month).encode(this);\n    }\n\n    protected constructor(value: Partial<Month>) { // FIXME use all fields of Month\n        Object.assign(this, value);\n        this.dataHash = this.getDataHash();\n        this.id = Month.generateID(this, this.dataHash);\n    }\n\n    public getBrief(): IMonthBrief {\n        return Month.getBrief(this);\n    }\n\n    public getDataHash(): string {\n        if (!this.days.length)\n            return '0000000000000000000000000000000000000000';\n\n        const data = {\n            days: this.days!.map(day => day.toJSON()),\n        };\n        return sha1(JSON.stringify(data)).toString();\n    }\n\n    public changeSyncStatus(syncStatus: SyncStatus): Month {\n        if (syncStatus === this.syncStatus)\n            return this;\n\n        switch (this.syncStatus) {\n            case SyncStatus.NoSynced:\n                if (syncStatus === SyncStatus.Prepared)\n                    return new Month({...this, syncStatus});\n                break;\n            case SyncStatus.Prepared:\n                if (syncStatus === SyncStatus.Syncing)\n                    return new Month({...this, syncStatus});\n                break;\n            case SyncStatus.Syncing:\n                if (syncStatus === SyncStatus.FullySynced)\n                    return new Month({...this, syncStatus});\n                break;\n            case SyncStatus.FullySynced:\n        }\n\n        throw new Error(`Can not change sync status from \"${SyncStatus[this.syncStatus]}\" to \"${SyncStatus[syncStatus]}\"`);\n    }\n\n    public createDay(date: number | DayDate): Day {\n        if (typeof date === 'number')\n            return Day.create(this.createDayDate(date));\n        else if (date.substr(0, 7) === this.month)\n            return Day.create(date);\n        else\n            throw new Error(`Date \"${date}\" not of month \"${this.month}\"`);\n    }\n\n    public createDayDate(day: number): string {\n        return this.month + '-' + day.toString().padStart(2, '0');\n    }\n\n    public createNextBlock(month: MonthDate, timestamp: number): Month {\n        const daysInMonth = getDaysInMonth(parseMonthDate(month));\n\n        const summary: IExtendSummary = {\n            balanceOnStart: this.summary.balanceOnEnd,\n            income: Money.empty,\n            expense: Money.empty,\n            balanceOnEnd: this.summary.balanceOnEnd,\n            balance: Money.empty,\n        };\n\n        return new Month({\n            account: this.account,\n            month,\n            prevMonths: [this.id],\n            prevVersions: [],\n            timestamp,\n            // updatedAt: timestamp, // TODO\n            summary,\n            days: [],\n            daysInMonth,\n            syncStatus: SyncStatus.Fixed,\n        });\n    }\n\n    public isDateOfMonth(date: DayDate): boolean {\n        return date.substr(0, 7) === this.month;\n    }\n\n    public recalculateWithNewStartBalance(startBalance: Money): Month {\n        return new Month({\n            ...this,\n            summary: calculateSummaryFromStartBalance(startBalance, this.days),\n        });\n    }\n\n    public updatePrevMonths(prevMonths: IMonthBrief[], timestamp: number): Month {\n        if (prevMonths.length !== 1)\n            throw new Error(`Sorry, can not process not one prevMonths`);\n\n        if (prevMonths[0].month >= this.month)\n            throw new Error(`All prevMonths must be earlier then updating month`);\n\n        if (prevMonths.length === this.prevMonths.length\n            && prevMonths.every((item, index) => this.prevMonths[index] === item.id))\n            return this;\n\n        return new Month({\n            ...this,\n            timestamp,\n            prevMonths: prevMonths.map(item => item.id),\n            prevVersions: this.syncStatus\n                ? this.id\n                    ? [this.id]\n                    : []\n                : this.prevVersions || [],\n            summary: calculateSummaryFromStartBalance(Money.from(prevMonths[0].summary.balanceOnEnd), this.days),\n        });\n    }\n\n    public getDay(dayDate: DayDate): Day {\n        const day = this.days.find(item => item.date === dayDate);\n        return day || this.createDay(dayDate);\n    }\n\n    public updateDay(newDay: Day): Month {\n        if (!(newDay instanceof Day))\n            throw new Error(`Cannot update month, newDay must be instance of Day`);\n\n        if (!this.isDateOfMonth(newDay.date))\n            throw new Error(`Day \"${newDay.date}\" not of month \"${this.month}\"`);\n\n        const days = this.days.slice();\n        const dayIndex = this.days.findIndex(item => item.date === newDay.date);\n        if (dayIndex === -1) {\n            days.push(newDay);\n            days.sort((a, b) => a.date > b.date ? 1 : -1);\n        } else {\n            days.splice(dayIndex, 1, newDay);\n        }\n\n        const summary = calculateSummaryFromStartBalance(this.summary.balanceOnStart, days);\n\n        return new Month({\n            ...this,\n            syncStatus: SyncStatus.NoSynced,\n            days,\n            summary,\n            prevVersions: this.syncStatus\n                ? this.id\n                    ? [this.id]\n                    : []\n                : this.prevVersions || [],\n        });\n    }\n}\n\nfunction calculateSummaryFromStartBalance(startBalance: Money, days: IDay[]): IExtendSummary {\n    const baseSummary = days.reduce(\n        (acc, day) => addSummary(acc, day.summary),\n        EmptySummary,\n    );\n\n    return {\n        ...baseSummary,\n        balanceOnStart: startBalance,\n        balanceOnEnd: startBalance.add(baseSummary.balance),\n    };\n}\n","import { IMonthBrief } from '../month/month.types';\nimport { Month } from '../month/month.class';\nimport { UUID } from '../common/common.types';\n\n/**\n * Обновление цепочки\n * @param head Новая голова\n * @param additions Обновленные звенья\n * @param old Старая цепочка\n */\nexport function updateMonthChain(head: IMonthBrief | Month,\n                                 additions: ReadonlyArray<IMonthBrief | Month>,\n                                 old: ReadonlyArray<IMonthBrief>): ReadonlyArray<IMonthBrief> {\n    head = Month.getBrief(head);\n\n    additions = additions.map(Month.getBrief);\n\n    old = old.map(Month.getBrief);\n\n    const {chain, completed} = findChain(head, additions);\n\n    // console.log(completed, chain.map(item => item.month + ' ' + item.id), old.length);\n\n    if (old.length === 0)\n        if (completed)\n            return chain;\n        else\n            throw new RequiredMonthsError(...chain.pop()!.prevMonths);\n\n    if (completed) {\n        if (!isVersionOfMonth(chain[chain.length - 1], old[old.length - 1], additions))\n            throw new CanNotFastForwardMonthError(old, chain);\n    } else {\n        const first = chain[chain.length - 1];\n\n        const preFirstID = first.prevMonths[0];\n\n        const preFirstIndex = old.findIndex(item => item.id === preFirstID);\n\n        console.log('completed', completed);\n        console.log('preFirstIndex', preFirstIndex);\n\n        console.log('head', [head.month, head.id, head.prevMonths, head.prevVersions].join(' '));\n        console.log('adds');\n        console.log(additions.map(item => [item.month, item.id, item.prevMonths, item.prevVersions].join(' ')));\n        console.log('old chain');\n        console.log(old.map(item => [item.month, item.id, item.prevMonths, item.prevVersions].join(' ')));\n\n        if (preFirstIndex === -1)\n            throw new RequiredMonthsError(preFirstID);\n    }\n\n    const monthsNumbersSet = new Set();\n    // for (let i = 0; i < preFirstIndex; i++)\n    //     monthsNumbersSet.add(old[i].month);\n    old.forEach(item => monthsNumbersSet.add(item.month));\n\n    chain.forEach(item => monthsNumbersSet.add(item.month));\n\n    const monthsNumbers = Array.from(monthsNumbersSet.keys());\n    monthsNumbers.sort();\n\n    const table = monthsNumbers.map(month => {\n        const element = chain.find(item => item.month === month);\n        const oldEl = old.find(item => item.month === month);\n\n        const check = element\n            ? isVersionOfMonth(element, oldEl, additions)\n            : null;\n\n        if (check === false)\n            throw new CanNotFastForwardMonthError(old, chain);\n\n        return {\n            month,\n            oldEl,\n            element,\n            check,\n        };\n    });\n\n    console.log('table');\n    console.table(table);\n\n    table.reverse();\n\n    const newChain = table.map(item => item.element || item.oldEl!);\n\n    checkChain(newChain);\n\n    if (newChain[0]!.id !== head.id)\n        throw new Error('Invalid Head month');\n\n    return newChain;\n}\n\n/**\n * Проверяет является ли element версией oldEl\n * Так же вернет true если element измененная версия oldEl\n * @param element Проверяемый элемент\n * @param oldEl Предполагаемые предок\n * @param additions Дополнительные блоки\n */\nexport function isVersionOfMonth(element: IMonthBrief, oldEl: IMonthBrief | undefined, additions: ReadonlyArray<IMonthBrief> = []): boolean {\n    if (!oldEl)\n        return true;\n\n    if (element.month !== oldEl.month)\n        return false;\n\n    const items = [oldEl, ...additions];\n\n    if (element.prevVersions.every((id, index) => oldEl.prevVersions[index] === id))\n        return true;\n\n    for (; element.id !== oldEl.id;) {\n        if (element.prevVersions.length === 0)\n            return false;\n\n        if (element.prevVersions.length > 1)\n            throw new Error('Я не умею во много предыдущих месяцев');\n\n        const nextId = element.prevVersions[0];\n\n        const next = items.find(item => item.id === nextId);\n\n        if (next)\n            element = next;\n        else\n            throw new RequiredMonthsError(nextId);\n    }\n\n    return true;\n}\n\nexport function findChain(head: IMonthBrief, items: ReadonlyArray<IMonthBrief>): {\n    completed: boolean,\n    chain: IMonthBrief[],\n} {\n    const chain: IMonthBrief[] = [];\n\n    let lastBlock: IMonthBrief | undefined = head;\n    do {\n        chain.push(lastBlock);\n\n        if (lastBlock.prevMonths.length === 0)\n            return {\n                completed: true,\n                chain,\n            };\n\n        if (lastBlock.prevMonths.length !== 1)\n            throw new Error(`Can not process merged month ${lastBlock.id} (${lastBlock.month}): more then 1 prevMonths`);\n        if (lastBlock.prevVersions.length > 1)\n            throw new Error(`Can not process merged month ${lastBlock.id} (${lastBlock.month}): more then 1 prevVersions`);\n\n        const nextID = lastBlock.prevMonths[0];\n        lastBlock = items.find(item => item.id === nextID);\n\n        if (!lastBlock) {\n            return {\n                completed: false,\n                chain,\n            };\n        }\n    } while (true);\n}\n\nexport function checkChain(chain: ReadonlyArray<IMonthBrief>): boolean {\n    if (chain.length === 0) return false;\n\n    console.log('check chain');\n    console.table(chain);\n\n    for (let i = 0; i < chain.length - 1; i++) {\n        const current = chain[i];\n        const next = chain[i + 1];\n        if (next.month >= current.month)\n            throw new MonthChainError(`month must be less then ${current.month}`, chain, next);\n\n        if (!current.prevMonths.length)\n            throw new MonthChainError(`unexpected end of chain`, chain, current);\n\n        if (current.prevMonths.length > 1)\n            throw new MonthChainError(`can not process month with not 1 prevMonths`, chain, current);\n\n        if (current.prevMonths[0] !== next.id)\n            throw new MonthChainError('invalid prevMonth', chain, current);\n    }\n\n    // let lastBlock: IMonthBrief | undefined = head;\n    // do {\n    //     chain.push(lastBlock);\n    //\n    //     if (lastBlock.prevMonths.length === 0)\n    //         return {\n    //             completed: true,\n    //             chain,\n    //         };\n    //\n    //     if (lastBlock.prevMonths.length !== 1)\n    //         throw new Error(`Can not process merged month ${lastBlock.id} (${lastBlock.month}): more then 1 prevMonths`);\n    //     if (lastBlock.prevVersions.length > 1)\n    //         throw new Error(`Can not process merged month ${lastBlock.id} (${lastBlock.month}): more then 1 prevVersions`);\n    //\n    //     const nextID = lastBlock.prevMonths[0];\n    //     lastBlock = items.find(item => item.id === nextID);\n    //\n    //     if (!lastBlock) {\n    //         return {\n    //             completed: false,\n    //             chain,\n    //         };\n    //     }\n    // } while (true);\n    return true;\n}\n\nexport class MonthChainError extends Error {\n    constructor(public reason: string,\n                public chain: ReadonlyArray<IMonthBrief>,\n                public invalidMonth: IMonthBrief) {\n        super(`Invalid chain: ${reason} at ${invalidMonth.id} (${invalidMonth.month})`);\n    }\n}\n\nexport class RequiredMonthsError extends Error {\n    public ids: UUID[];\n\n    constructor(...ids: UUID[]) {\n        super(`Required months: ${ids.join(', ')}`);\n        this.ids = ids;\n    }\n}\n\nexport class CanNotFastForwardMonthError extends Error {\n    constructor(public from: ReadonlyArray<IMonthBrief>,\n                public to: ReadonlyArray<IMonthBrief>) {\n        super([`Can not fast forward`,\n            `from ${from[0].id} (${from[0].month}, length ${from.length})`,\n            `to ${to[0].id} (${to[0].month}, length ${to.length})`,\n        ].join('\\n'));\n    }\n}\n","import { ISummary, UUID } from '../common/common.types';\nimport { Money } from '../money/money.class';\nimport { IMonthBrief, monthBriefPacker } from '../month/month.types';\nimport { IAccount } from './account.types';\nimport { v1 as uuidGenerator } from 'uuid';\nimport { Month } from '../month/month.class';\nimport { Map } from 'immutable';\nimport { findChain, RequiredMonthsError, updateMonthChain } from './chain.utils';\nimport { addSummary, EMPTY_SUMMARY } from '../transaction/transactions.utils';\nimport { Packable, PackableClass } from '../../libs/packable/decorator';\nimport { Packer } from '../../libs/packable/packable';\nimport { CategoriesBlock } from '../category/categoryBlock.class';\n\n/**\n * Contains information about Account\n */\n@PackableClass(data => new Account(data))\nexport class Account implements IAccount, ISummary {\n    @Packable(String) public readonly id: UUID = '';\n    @Packable(String) public readonly name: string = '';\n    @Packable(Money) public readonly balance: Money = Money.empty;\n    @Packable(Money) public readonly income: Money = Money.empty;\n    @Packable(Money) public readonly expense: Money = Money.empty;\n    @Packable(String) public readonly categoriesBlockId: string = 'default';\n    @Packable(monthBriefPacker) public readonly head: IMonthBrief | null = null;\n    @Packable([monthBriefPacker]) public readonly months: ReadonlyArray<Readonly<IMonthBrief>> = [];\n    public readonly fullMonths: Map<UUID, Month> = Map();\n\n    public static create(name: string, id?: UUID): Account {\n        return new Account({\n            id: id || uuidGenerator(),\n            name,\n        });\n    }\n\n    public static fromJSON(data: any): Account {\n        return Packer.get(Account).decode(data);\n    }\n\n    public static toJSON(account: Account): any {\n        return account.toJSON();\n    }\n\n    private constructor(account: Partial<Account>) {\n        return Object.assign(this, account);\n    }\n\n    public toJSON(): any {\n        return Packer.get(Account).encode(this);\n    }\n\n    public UNSAFE_forceSetHead(head: Month, months: Month[]): Account {\n        const {chain, completed} = findChain(head, months);\n\n        if (!completed) {\n            const last = chain.pop();\n            const required = [\n                ...last!.prevMonths,\n                ...last!.prevVersions,\n            ].filter(\n                id => !months.find(item => item.id !== id),\n            );\n\n            throw new RequiredMonthsError(...required);\n        }\n\n        const {income, expense, balance} = chain.reduce((acc, item) => addSummary(acc, item.summary), EMPTY_SUMMARY);\n\n        return new Account({\n            ...this,\n            head,\n            months: chain.map(Month.getBrief),\n            balance,\n            income,\n            expense,\n        });\n        // throw new Error('Not implements');\n        // throw new RequiredMonthsError(['123123123']);\n    }\n\n    public updateHead(head: Month, additions: Month[] = []): Account {\n        const chain = updateMonthChain(head, additions, this.months);\n\n        const {income, expense, balance} = chain.reduce((acc, item) => addSummary(acc, item.summary), EMPTY_SUMMARY);\n\n        return new Account({\n            ...this,\n            head: Month.getBrief(head),\n            months: chain.map(Month.getBrief),\n            balance,\n            income,\n            expense,\n        });\n    }\n\n    public UNSAFE_updateCategoriesBlock(block: CategoriesBlock): Account { // FIXME\n        if (block.account !== this.id)\n            throw new Error('CategoriesBlock.id must be equal to Account.id');\n\n        return new Account({\n            ...this,\n            categoriesBlockId: block.id,\n        });\n    }\n\n    public checkChain(): boolean {\n        if (!this.head && this.months.length === 0)\n            return true;\n\n        const {chain, completed} = findChain(this.head!, this.months);\n\n        if (!completed)\n            return false;\n\n        if (chain.length !== this.months.length)\n            return false;\n\n        return true;\n    }\n}\n\n","import sha1 from 'crypto-js/sha1';\nimport { IInitialCategoryTree } from './category.types';\nimport { SyncStatus, UUID } from '../common/common.types';\nimport { Category } from './category.class';\nimport { Packable, PackableClass } from '../../libs/packable/decorator';\nimport { Packer } from '../../libs/packable/packable';\nimport { ICategoriesBlock } from './categoryBlock.types';\n\n/**\n * ID является хешем от данных, при любом изменении создается новый экземпляр с новым ID\n * Класс гарантирует совпадение данных при совпадении ID\n */\n@PackableClass(data => new CategoriesBlock(data))\nexport class CategoriesBlock implements ICategoriesBlock {\n    @Packable(String) public readonly id: UUID = '';\n    @Packable(String) public readonly account: UUID = '';\n    @Packable(Number) public readonly version: number = 1;\n    @Packable(Number) public readonly syncStatus: SyncStatus = SyncStatus.NoSynced;\n    @Packable(String) public readonly dataHash: string = '';\n    @Packable(Number) public readonly timestamp: number = 0;\n\n    @Packable([String]) public readonly prevVersions: UUID[] = [];\n    public readonly updatedAt: Date = new Date(0);\n\n    @Packable([Category]) public readonly list: ReadonlyArray<Category>;\n\n    /**\n     * @param account\n     * @param initialsCategories\n     * @param timestamp\n     */\n    public static createInitialBlock(account: UUID, initialsCategories: IInitialCategoryTree, timestamp: number): CategoriesBlock {\n        const list: Category [] = initialsCategories.flatMap(\n            parent => [\n                Category.createInitial(\n                    parent.name,\n                    parent.defaultType,\n                    null,\n                    parent.image,\n                    parent.id,\n                ),\n                ...parent.children.map(\n                    child => Category.createInitial(\n                        child.name,\n                        child.defaultType,\n                        parent.id,\n                        child.image,\n                        child.id,\n                    ),\n                ),\n            ],\n        );\n\n        return new CategoriesBlock({\n            account,\n            syncStatus: SyncStatus.Prepared,\n            timestamp,\n            prevVersions: [],\n            list,\n        });\n    }\n\n    public static getDataHash(target: { list: ReadonlyArray<Category> }): string {\n        if (!target.list.length)\n            return '0000000000000000000000000000000000000000';\n\n        const data = {\n            list: target.list.map(item => item.toJSON()),\n        };\n\n        return sha1(JSON.stringify(data)).toString();\n    }\n\n    public static generateID(block: CategoriesBlock, dataHash?: string): string {\n        if (block.version !== 1)\n            throw new Error(`Version ${block.version} not supported`);\n\n        if (!dataHash)\n            dataHash = CategoriesBlock.getDataHash(block);\n        if (dataHash === '0000000000000000000000000000000000000000')\n            return '00000000-0000-0000-0000-000000000000';\n\n        const data = {\n            version: block.version,\n            account: block.account,\n            prevVersions: block.prevVersions,\n            dataHash,\n        };\n\n        const hash = sha1(JSON.stringify(data)).toString();\n\n        // const ts = (block.timestamp / 1000).toString(16)\n        //                                    .substr(0, 11)\n        //                                    .replace('.', '');\n\n        // let id = `${ts}${hash}`.substr(0, 32);\n        let id = `${hash}`.substr(0, 32);\n\n        id = [\n            id.substr(0, 8),\n            id.substr(8, 4),\n            id.substr(12, 4),\n            id.substr(16, 4),\n            id.substr(20, 12),\n        ].join('-');\n\n        return id;\n    }\n\n    /**\n     * Создание мердж блока\n     *\n     * @param blocks Предыдущие блоки цепочки\n     */\n    public static merge(blocks: CategoriesBlock[]): CategoriesBlock {\n        throw new Error('Not implemented');\n    }\n\n    public static fromJSON(value: any): CategoriesBlock {\n        return Packer.get(CategoriesBlock).decode(value);\n    }\n\n    public static toJSON(category: CategoriesBlock): any {\n        return category.toJSON();\n    }\n\n    protected constructor(value: Partial<CategoriesBlock>) { // FIXME use all fields of Month\n        Object.assign(this, value);\n        this.dataHash = CategoriesBlock.getDataHash(this);\n        this.id = CategoriesBlock.generateID(this, this.dataHash);\n        this.updatedAt = new Date(this.timestamp);\n    }\n\n    public toJSON(): any {\n        return Packer.get(CategoriesBlock).encode(this);\n    }\n\n    public get(id: UUID): Category {\n        return this.list.find(item => item.id === id);\n    }\n\n    public getList(parent?: UUID): ReadonlyArray<Category> {\n        if (!parent)\n            return this.list;\n        else\n            return this.list.filter(item => item.parent === parent);\n    }\n\n    public changeSyncStatus(syncStatus: SyncStatus): CategoriesBlock {\n        if (syncStatus === this.syncStatus)\n            return this;\n\n        switch (this.syncStatus) {\n            case SyncStatus.NoSynced:\n                if (syncStatus === SyncStatus.Prepared)\n                    return new CategoriesBlock({...this, syncStatus});\n                break;\n            case SyncStatus.Prepared:\n                if (syncStatus === SyncStatus.Syncing)\n                    return new CategoriesBlock({...this, syncStatus});\n                break;\n            case SyncStatus.Syncing:\n                if (syncStatus === SyncStatus.FullySynced)\n                    return new CategoriesBlock({...this, syncStatus});\n                break;\n            case SyncStatus.FullySynced:\n        }\n\n        throw new Error(`Can not change sync status from \"${SyncStatus[this.syncStatus]}\" to \"${SyncStatus[syncStatus]}\"`);\n    }\n\n    public addCategory(category: Category): CategoriesBlock {\n        let exists = this.list.find(item => item.id === category.id);\n        if (exists)\n            throw new CategoryConflictError(`Category with this ID already exists`, this, category);\n        exists = this.list.find(item => item.name.toLowerCase() === category.name.toLowerCase());\n        if (exists)\n            throw new CategoryConflictError(`Category with this Name already exists`, this, category);\n\n        return new CategoriesBlock({\n            ...this,\n            syncStatus: SyncStatus.NoSynced,\n            list: [...this.list, category],\n        });\n    }\n\n    public updateCategory(category: Category): CategoriesBlock {\n        if (this.list.find(\n            item =>\n                item.name.toLowerCase() === category.name.toLowerCase()\n                && item.id !== category.id,\n        ))\n            throw new CategoryConflictError(`Category with name \"${category.name}\" already exists`);\n\n        const toUpdate = this.list.find(item => item.id === category.id);\n\n        if (!toUpdate)\n            throw new Error(`Category \"${category.name}\" (${category.id}) not found`);\n\n        return new CategoriesBlock({\n            ...this,\n            syncStatus: SyncStatus.NoSynced,\n            list: this.list.map(\n                item => item.id === category.id\n                    ? category\n                    : item,\n            ),\n        });\n    }\n\n    public removeCategory(id: UUID): CategoriesBlock {\n        const toRemove = this.list.find(item => item.id === id);\n\n        if (!toRemove)\n            throw new Error(`Category ${id} not found`);\n\n        return new CategoriesBlock({\n            ...this,\n            syncStatus: SyncStatus.NoSynced,\n            list: this.list.filter(item => item !== toRemove),\n        });\n    }\n}\n\nexport class CategoryConflictError extends Error {\n    constructor(message: string,\n                public readonly block?: CategoriesBlock,\n                public readonly category?: Category) {\n        super(message);\n    }\n}\n","import { IInitialCategoryTree } from '../../models/category/category.types';\nimport { TransactionType } from '../../models/transaction/transaction.types';\n\nexport const initialCategories: IInitialCategoryTree = [\n    {\n        id: 'default',\n        name: 'Default',\n        image: 'default',\n        defaultType: TransactionType.Expense,\n        children: [],\n    },\n    {\n        id: '0000-111',\n        name: 'Home',\n        image: 'default',\n        defaultType: TransactionType.Income,\n        children: [],\n    },\n];\n","import { IScheme } from '../../libs/indexed-db';\nimport { ICategoriesBlock } from '../../models/category/categoryBlock.types';\n\nexport const CategoriesScheme: IScheme<ICategoriesBlock> = {\n    collection: 'categories',\n    dbVersion: 1,\n    key: 'id',\n    upgrade(objectStore, oldVersion, newVersion): void {\n        console.log('update categories from ', oldVersion, newVersion);\n    },\n};\n","import { IndexedDB } from '../libs/indexed-db';\nimport { PayloadActionCreator, Store } from '@reatom/core';\nimport { AccountScheme, MonthScheme } from './schemes';\nimport { Account } from '../models/account/account.class';\nimport { CategoriesBlock } from '../models/category/categoryBlock.class';\nimport { initialCategories } from './data/initialCategories';\nimport { CategoriesScheme } from './schemes/categories.scheme';\n\nexport const db = new IndexedDB(\n    'finman',\n    [\n        CategoriesScheme,\n        AccountScheme,\n        MonthScheme,\n    ],\n    async (db) => {\n        let defaultAccount = Account.create('Default');\n        const categoriesBlock = CategoriesBlock.createInitialBlock(\n            defaultAccount.id,\n            initialCategories,\n            new Date().getTime(),\n        );\n        defaultAccount = defaultAccount.UNSAFE_updateCategoriesBlock(categoriesBlock);\n\n        await db.transaction(AccountScheme).add(defaultAccount.toJSON());\n        await db.transaction(CategoriesScheme).add(categoriesBlock.toJSON());\n    },\n);\n\nconst handlers: { [action: string]: Function } = {};\n\nexport function addActionHandler<T>(action: PayloadActionCreator<T>, handler: (payload: T, store: Store) => void) {\n    if (handlers[action.getType()])\n        throw new Error(`Can not add new handler for action \"${action.getType()}\"`);\n\n    handlers[action.getType()] = handler;\n}\n\nexport function initIndexedDB(store: Store) {\n    store.subscribe(action => {\n        console.log(action);\n\n        if (handlers[action.type])\n            handlers[action.type](action.payload, store);\n    });\n}\n","import { addActionHandler, db } from '../db';\nimport {\n    chooseAccount,\n    loadAccounts,\n    loadAccountsFailed,\n    loadAccountsSuccess, saveAccount, saveAccountFailed, saveAccountSuccess,\n} from '../../atoms/accounts/accounts.actions';\nimport { AccountScheme } from '../schemes';\nimport { Account } from '../../models/account/account.class';\nimport { loadCategories } from '../../atoms/categories/categories.actions';\nimport { chooseAccountGrip } from '../../atoms/account-grips/account-grips.actions';\n\nconst CURRENT_ACCOUNT_KEY = 'currentAccount';\n\naddActionHandler(chooseAccount, payload => {\n    localStorage.setItem(CURRENT_ACCOUNT_KEY, payload);\n});\n\naddActionHandler(loadAccounts, (_, store) => {\n    db.transaction(AccountScheme)\n      .getAll().then(\n        result => {\n            if (!result.length)\n                return console.warn('No accounts exists');\n\n            const accounts = result.map(Account.fromJSON);\n\n            const currentID = localStorage.getItem(CURRENT_ACCOUNT_KEY);\n\n            store.dispatch(loadAccountsSuccess({\n                accounts,\n            }));\n\n            store.dispatch(chooseAccountGrip(currentID));\n        },\n        error => store.dispatch(loadAccountsFailed(error)),\n    );\n});\n\naddActionHandler(saveAccount, (account, store) => {\n    db.transaction(AccountScheme)\n      .update(account.toJSON() as any).then(\n        result => store.dispatch(saveAccountSuccess(account.id)),\n        error => store.dispatch(saveAccountFailed({id: account.id, error})),\n    );\n});\n","import { addActionHandler, db } from '../db';\nimport {\n    loadMonths,\n    loadMonthsFailed,\n    loadMonthsSuccess,\n    saveMonths, saveMonthsFailed,\n    saveMonthsSuccess,\n} from '../../atoms/months/months.actions';\nimport { MonthScheme } from '../schemes';\nimport { Month } from '../../models/month/month.class';\n\naddActionHandler(loadMonths, (ids, store) => {\n    db.transaction(MonthScheme)\n      .getAll(ids).then(\n        result => {\n            console.log(ids);\n            console.log(result);\n            const months = result.map(Month.fromJSON);\n            store.dispatch(loadMonthsSuccess(months));\n        },\n        error => store.dispatch(loadMonthsFailed({ids, error})),\n    );\n});\n\naddActionHandler(saveMonths, (months, store) => {\n    const ids = months.map(item => item.id);\n    const tx = db.transaction(MonthScheme);\n    Promise.all(months.map(month => tx.update(month.toJSON())))\n           .then(\n               () => store.dispatch(saveMonthsSuccess(ids)),\n               error => store.dispatch(saveMonthsFailed({ids, error})),\n           );\n});\n","import { addActionHandler, db } from '../db';\nimport { loadCategories, loadCategoriesFailed, loadCategoriesSuccess } from '../../atoms/categories/categories.actions';\nimport { CategoriesScheme } from '../schemes/categories.scheme';\nimport { CategoriesBlock } from '../../models/category/categoryBlock.class';\n\naddActionHandler(loadCategories, (id, store) => {\n    db.transaction(CategoriesScheme)\n      .get(id).then(\n        result => store.dispatch(loadCategoriesSuccess(CategoriesBlock.fromJSON(result))),\n        error => store.dispatch(loadCategoriesFailed(error)),\n    );\n});\n","import { runSaga, stdChannel, Saga } from 'redux-saga';\nimport { PayloadActionCreator, Store } from '@reatom/core';\nimport { takeEvery, call } from 'redux-saga/effects';\n\nclass SagaLauncher {\n    private sagas: Saga[] = [];\n\n    register(saga: Saga): void {\n        this.sagas.push(saga);\n    }\n\n    onAction(actionCreator: PayloadActionCreator<any>,\n             saga: Saga,\n             sagaName = 'Some saga'): void {\n        this.register(function* () {\n            yield takeEvery(actionCreator.getType(), saga);\n            // yield takeEvery(actionCreator.getType(), function* (...params) {\n            //     try {\n            //         console.log(`[Saga logger] Saga \"${sagaName}\" started`);\n            //         yield* saga(...params);\n            //         console.log(`[Saga logger] Saga \"${sagaName}\" completed`);\n            //     } catch (e) {\n            //         console.log(`[Saga logger] Saga \"${sagaName}\" failed`);\n            //         console.error(e);\n            //     }\n            // });\n        });\n    }\n\n    start(store: Store) {\n        console.log(`Start ${this.sagas.length} sagas`);\n\n        const sagaOptions = {\n            dispatch: store.dispatch,\n            getState: () => store.getState,\n            channel: stdChannel(),\n        };\n\n        store.subscribe(sagaOptions.channel.put);\n\n        this.sagas.forEach(saga => runSaga(sagaOptions, saga));\n    }\n}\n\nexport const sagaLauncher = new SagaLauncher();\n\ntype ExtractInner<T> = T extends Generator<any, infer R, any> ? R : never;\n\nexport interface PackedSaga<Fn extends (...args: any[]) => any> {\n    (...args: Parameters<Fn>): Generator<any, ExtractInner<ReturnType<Fn>>, any>;\n\n    originalSaga: (...args: Parameters<Fn>) => Generator<any, ExtractInner<ReturnType<Fn>>, any>;\n}\n\nfunction sagaCallPacker<Fn extends (...args: any[]) => any = any>(saga: Fn): PackedSaga<Fn> {\n    const fn = function* PackedSaga<Fn extends (...args: any[]) => any = any>(...params: Parameters<Fn>): Generator<any, ExtractInner<Fn>, any> {\n        return yield call(saga as any, ...params);\n    };\n    fn.originalSaga = saga;\n    return fn;\n}\n\nexport const SagaPacker = {\n    call: sagaCallPacker,\n};\n","import { Action } from '@reatom/core';\nimport { put, take } from 'redux-saga/effects';\nimport { sagaLauncher } from '../saga-launcher';\nimport { IAddTransactionForm } from '../../models/transaction/transaction.types';\nimport { refresh } from '../../atoms/client/client.actions';\nimport { loadAccounts, loadAccountsFailed, loadAccountsSuccess } from '../../atoms/accounts/accounts.actions';\nimport { updateAccountGrips } from '../../atoms/account-grips/account-grips.actions';\nimport { Account } from '../../models/account/account.class';\n\nsagaLauncher.onAction(refresh, refreshSaga);\n\nexport function* refreshSaga(action: Action<null>) {\n    console.log('*** refreshSaga started');\n\n    yield put(loadAccounts());\n    const resultAction = yield take([loadAccountsSuccess.getType(), loadAccountsFailed.getType()]);\n    if (resultAction.type === loadAccountsFailed.getType())\n        return;\n\n    const accounts: Account[] = (resultAction as any).payload.accounts;\n    yield put(updateAccountGrips(accounts));\n}\n","import { select, call } from 'redux-saga/effects';\nimport { Atom } from '@reatom/core';\nimport { SagaPacker } from '../saga-launcher';\n\nexport const SagaUtils = {\n    /**\n     * Select atom from Store\n     * @param atom\n     */\n    selectAtom: SagaPacker.call(selectAtomFn),\n    /**\n     * Get current timestamp\n     */\n    getTimestamp: SagaPacker.call(getTimestampFn),\n};\n\n/**\n * @deprecated\n * @param atom\n */\nexport const selectAtom = atom => call(selectAtomFn, atom);\n\nexport function* selectAtomFn(atom: Atom<any>) {\n    return yield select(getState => getState(atom));\n}\n\n/**\n * @deprecated\n */\nexport const getTimestamp = () => call(getTimestampFn);\n\nexport function getTimestampFn() {\n    return new Date().getTime();\n}\n\nexport function delay(timeout = 0): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, timeout));\n}\n","import { put, take } from 'redux-saga/effects';\nimport { Action } from '@reatom/core';\nimport { MonthDate } from '../../models/common/date.types';\nimport { Account } from '../../models/account/account.class';\nimport { Month } from '../../models/month/month.class';\nimport { getTimestamp, SagaUtils, selectAtom } from '../helpers/helpers';\nimport { SagaPacker } from '../saga-launcher';\nimport {\n    saveMonths,\n    saveMonthsSuccess,\n    saveMonthsFailed,\n    loadMonths,\n    loadMonthsSuccess,\n    loadMonthsFailed,\n} from '../../atoms/months/months.actions';\nimport { UUID } from '../../models/common/common.types';\nimport { Months } from '../../atoms/months/months.atom';\nimport { CategoriesBlock } from '../../models/category/categoryBlock.class';\nimport { Categories } from '../../atoms/categories/categories.atom';\nimport { ICategoriesState } from '../../atoms/categories/categories.types';\nimport { loadCategories, loadCategoriesFailed, loadCategoriesSuccess } from '../../atoms/categories/categories.actions';\n\nexport const CategoriesBlockUtils = {\n    /**\n     * Get or load CategoriesBlock\n     */\n    get: SagaPacker.call(getCategoriesBlockSaga),\n};\n\nfunction* getCategoriesBlockSaga(id: UUID): Generator<any, CategoriesBlock, any> {\n    const categoriesBlocks: ICategoriesState = yield selectAtom(Categories);\n\n    if (categoriesBlocks.has(id))\n        return categoriesBlocks.get(id)?.block;\n\n    yield put(loadCategories(id));\n    let action: Action<any>;\n    do {\n        action = yield take([loadCategoriesSuccess.getType(), loadCategoriesFailed.getType()]);\n        if (action.type === loadCategoriesSuccess.getType()) {\n            if (action.payload.id === id) {\n                const categories = yield selectAtom(Categories);\n                return categories.get(id);\n            }\n        } else {\n            if (action.payload.id === id)\n                throw action.payload.error;\n        }\n    } while (true);\n}\n","import { IAccount } from '../account/account.types';\nimport { UUID } from '../common/common.types';\nimport { CategoriesBlock } from '../category/categoryBlock.class';\nimport { IGrip, IMonthGripBrief } from './grip.types';\nimport { ICategory } from '../category/category.types';\nimport { MonthDate } from '../common/date.types';\nimport { ITag, TagName } from '../tag/tag.types';\nimport { Map } from 'immutable';\nimport { Money } from '../money/money.class';\nimport { AbstractMonthGrip } from './month-grip.class';\nimport { IMonth } from '../month/month.types';\nimport { AccountMonthGrip } from '../account-grip/month-grip.class';\n\n\n/**\n * TODO: Grip must know about categories and tags in months from IMonthBrief\n */\nexport abstract class AbstractGrip implements IGrip {\n    id: UUID;\n    name: string;\n    categories: Map<UUID, ICategory> = Map();\n    firstMonthDate: MonthDate = null;\n    lastMonthDate: MonthDate = null;\n    months: IMonthGripBrief[] = [];\n    tags: Map<TagName, ITag> = Map();\n\n    balance: Money = Money.empty;\n    expense: Money = Money.empty;\n    income: Money = Money.empty;\n\n    protected constructor(accounts: IAccount[],\n                          categories: Map<UUID, ICategory>) {\n        this.categories = categories;\n    }\n\n    public abstract makeMonth(month: IMonth): AbstractMonthGrip;\n}\n","import { Map } from 'immutable';\nimport { IMonthGrip } from './grip.types';\nimport { UUID } from '../common/common.types';\nimport { ICategory } from '../category/category.types';\nimport { Money } from '../money/money.class';\nimport { MonthDate } from '../common/date.types';\nimport { ITag, TagName } from '../tag/tag.types';\nimport { AbstractDayGrip } from './day-grip.class';\n\nexport abstract class AbstractMonthGrip implements IMonthGrip {\n    id: UUID;\n    readonly balance: Money;\n    readonly balanceOnEnd: Money;\n    readonly balanceOnStart: Money;\n    readonly categories: Map<UUID, ICategory>;\n    readonly days: AbstractDayGrip[];\n    readonly expense: Money;\n    readonly income: Money;\n    readonly month: MonthDate;\n    readonly tags: Map<TagName, ITag>;\n\n    [Symbol.toStringTag] = 'AbstractMonthGrip';\n\n    constructor(month: MonthDate,\n                balanceOnStart: Money,\n                days: AbstractDayGrip[],\n    ) {\n        this.month = month;\n        if (days.length)\n            days.reduce(\n                (last, next) => {\n                    if (last.date >= next.date)\n                        throw new Error(`Days must be sorted`);\n                    return next;\n                },\n            );\n        this.days = days;\n\n        // categories and tags\n        let categories: Map<UUID, ICategory> = Map();\n        let tags = Map();\n\n        this.days.forEach(day => day.categories.forEach(\n            category => categories = categories.set(category.id, category),\n        ));\n\n        this.categories = categories;\n\n        // balance\n        this.balanceOnStart = balanceOnStart;\n        this.balanceOnEnd = this.days.reduce(\n            (lastSum, day) => {\n                const sum = lastSum.add(day.balance);\n                if (!day.balanceOnStart.equal(lastSum))\n                    throw new Error(`Start balance on day ${day.date} must be ${lastSum} but received ${day.balanceOnStart}`);\n                if (!day.balanceOnEnd.equal(sum))\n                    throw new Error(`End balance on day ${day.date} must be ${sum} but received ${day.balanceOnEnd}`);\n                if (!day.balance.equal(day.balanceOnEnd.sub(day.balanceOnStart)))\n                    throw new Error(`Balance on day ${day.date} must be ${day.balanceOnEnd.sub(day.balanceOnStart)} but received ${day.balance}`);\n                return sum;\n            },\n            this.balanceOnStart,\n        );\n        this.balance = this.balanceOnEnd.sub(this.balanceOnStart);\n\n        this.income = this.days\n                          .reduce(\n                              (sum, tx) => sum.add(tx.income),\n                              Money.empty,\n                          );\n        this.expense = this.days\n                           .reduce(\n                               (sum, tx) => sum.add(tx.expense),\n                               Money.empty,\n                           );\n    }\n}\n","import { Set } from 'immutable';\nimport { ITransactionGrip } from './grip.types';\nimport { ITransaction, TransactionType } from '../transaction/transaction.types';\nimport { DayDate } from '../common/date.types';\nimport { IAccount } from '../account/account.types';\nimport { ICategory } from '../category/category.types';\nimport { Money } from '../money/money.class';\nimport { TagName } from '../tag/tag.types';\n\nexport class TransactionGrip implements ITransactionGrip {\n    account: IAccount;\n    amount: Money;\n    category: ICategory;\n    changeAmount: Money;\n    createdAt: Date;\n    date: DayDate;\n    sourceTxs: ITransaction[];\n    tags: Set<TagName>;\n    title: string | '';\n    type: TransactionType;\n    updatedAt: Date;\n\n    constructor(data: ITransactionGrip) {\n        Object.assign(this, data);\n    }\n}\n","import { Map, Set } from 'immutable';\nimport { AbstractDayGrip } from '../abstract-grip/day-grip.class';\nimport { UUID } from '../common/common.types';\nimport { IDay } from '../day/day.class';\nimport { IAccount } from '../account/account.types';\nimport { ICategory } from '../category/category.types';\nimport { Money } from '../money/money.class';\nimport { ITransactionGrip } from '../abstract-grip/grip.types';\nimport { TransactionType } from '../transaction/transaction.types';\n\nexport class AccountDayGrip extends AbstractDayGrip {\n    constructor(balanceOnStart: Money,\n                day: IDay,\n                account: IAccount,\n                categories: Map<UUID, ICategory>) {\n        const transactions: ITransactionGrip[] = day.transactions.map(tx => {\n            const category = categories.get(tx.category || 'default');\n            if (!category)\n                throw new Error(`Category \"${tx.category || 'default'}\" not found`);\n\n            const grip = {\n                account,\n                amount: tx.amount,\n                changeAmount: tx.amount,\n                title: tx.title,\n                type: tx.type,\n                category,\n                createdAt: tx.createdAt ? new Date(tx.createdAt) : null,\n                updatedAt: tx.updatedAt ? new Date(tx.updatedAt) : null,\n                date: day.date,\n                sourceTxs: [tx],\n                tags: Set(),\n            };\n\n            switch (tx.type) {\n                case TransactionType.Income:\n                    return grip;\n                case TransactionType.Expense:\n                    return {\n                        ...grip,\n                        changeAmount: tx.amount.negative(),\n                    };\n                default:\n                    throw new Error(`Unsupported type \"${TransactionType[tx.type]}\"`);\n            }\n        });\n\n        super(day.date, balanceOnStart, transactions);\n    }\n}\n","import { Map, Set } from 'immutable';\nimport { IDayGrip, ITransactionGrip } from './grip.types';\nimport { IAccount } from '../account/account.types';\nimport { UUID } from '../common/common.types';\nimport { IDay } from '../day/day.class';\nimport { ICategory } from '../category/category.types';\nimport { Money } from '../money/money.class';\nimport { DayDate } from '../common/date.types';\nimport { ITag, TagName } from '../tag/tag.types';\nimport { TransactionGrip } from './transaction-grip.class';\n\nexport abstract class AbstractDayGrip implements IDayGrip {\n    readonly balance: Money;\n    readonly balanceOnEnd: Money;\n    readonly balanceOnStart: Money;\n    readonly categories: Map<UUID, ICategory>;\n    readonly date: DayDate;\n    readonly expense: Money;\n    readonly income: Money;\n    readonly tags: Map<TagName, ITag>;\n    readonly transactions: TransactionGrip[];\n\n    protected constructor(date: DayDate,\n                          balanceOnStart: Money,\n                          gripTransactions: ITransactionGrip[]) {\n        // base\n        this.date = date;\n        this.transactions = gripTransactions.map(item => new TransactionGrip(item));\n\n        // categories and tags\n        let categories: Map<UUID, ICategory> = Map();\n        let tags = Map();\n\n        this.transactions.forEach(tx => {\n            categories = categories.set(tx.category.id, tx.category);\n        });\n\n        this.categories = categories;\n\n        // balance\n        this.balanceOnStart = balanceOnStart;\n        this.balance = this.transactions.reduce(\n            (sum, tx) => sum.add(tx.changeAmount),\n            Money.empty,\n        );\n        this.balanceOnEnd = this.balanceOnStart.add(this.balance);\n        this.income = this.transactions\n                          .filter(tx => tx.changeAmount.isPositive())\n                          .reduce(\n                              (sum, tx) => sum.add(tx.changeAmount),\n                              Money.empty,\n                          );\n        this.expense = this.transactions\n                           .filter(tx => tx.changeAmount.isNegative())\n                           .reduce(\n                               (sum, tx) => sum.add(tx.changeAmount),\n                               Money.empty,\n                           )\n                           .negative();\n\n        // собрать информацию с транзакций, заполнить tags, categories, accounts(?), balance, balanceOnEnd\n    }\n}\n","import { Map, Set } from 'immutable';\nimport { AbstractMonthGrip } from '../abstract-grip/month-grip.class';\nimport { IMonth } from '../month/month.types';\nimport { IAccount } from '../account/account.types';\nimport { ICategory } from '../category/category.types';\nimport { UUID } from '../common/common.types';\nimport { Money } from '../money/money.class';\nimport { AccountDayGrip } from './day-grip.class';\n\nexport class AccountMonthGrip extends AbstractMonthGrip {\n    constructor(balanceOnStart: Money,\n                month: IMonth,\n                account: IAccount,\n                categories: Map<UUID, ICategory>) {\n        const {days, balanceOnEnd} = month.days.reduce(\n            ({days, balanceOnEnd}, day) => {\n                const grip = new AccountDayGrip(\n                    balanceOnEnd,\n                    day,\n                    account,\n                    categories,\n                );\n                days.push(grip);\n                return {\n                    days,\n                    balanceOnEnd: grip.balanceOnEnd,\n                };\n            }, {\n                days: [],\n                balanceOnEnd: balanceOnStart,\n            });\n\n        super(month.month, balanceOnStart, days);\n        this.id = month.id;\n\n        if (!this.balanceOnEnd.equal(balanceOnEnd))\n            throw new Error(`Wrong balance on end: expected ${balanceOnEnd} but received ${this.balanceOnEnd}`);\n    }\n}\n","import { AbstractGrip } from '../abstract-grip/grip.class';\nimport { IAccount } from '../account/account.types';\nimport { CategoriesBlock } from '../category/categoryBlock.class';\nimport { IMonth, IMonthBrief } from '../month/month.types';\nimport { AccountMonthGrip } from './month-grip.class';\nimport { Map } from 'immutable';\nimport { Money } from '../money/money.class';\nimport { IMonthGripBrief } from '../abstract-grip/grip.types';\n\nexport class AccountGrip extends AbstractGrip {\n    public readonly account: IAccount;\n\n    constructor(account: IAccount, categoriesBlock: CategoriesBlock) {\n        const categories = Map(categoriesBlock.list.map(item => [item.id, item]));\n        super([account], categories);\n\n        this.id = account.id;\n        this.account = account;\n        this.name = account.name;\n\n        if (!account.head)\n            return;\n\n        this.lastMonthDate = account.head.month;\n        this.firstMonthDate = account.months[account.months.length - 1].month;\n        this.months = account.months.map(makeMonthGripBriefFromMonthBrief);\n        this.balance = account.head.summary.balanceOnEnd;\n        this.income = Money.empty; // FIXME\n        this.expense = Money.empty; // FIXME\n    }\n\n    public makeMonth(month: IMonth): AccountMonthGrip {\n        return new AccountMonthGrip(month.summary.balanceOnStart, month, this.account, this.categories);\n    }\n}\n\nfunction makeMonthGripBriefFromMonthBrief(month: IMonthBrief): IMonthGripBrief {\n    return {\n        id: month.id,\n        month: month.month,\n        balanceOnStart: month.summary.balanceOnStart,\n        balanceOnEnd: month.summary.balanceOnEnd,\n        balance: month.summary.balance,\n        income: month.summary.income,\n        expense: month.summary.expense,\n        categories: Map(),\n        tags: Map(),\n    };\n}\n","import { Action } from '@reatom/core';\nimport { put, take, fork } from 'redux-saga/effects';\nimport { sagaLauncher } from '../saga-launcher';\nimport { IAddTransactionForm } from '../../models/transaction/transaction.types';\nimport { refresh } from '../../atoms/client/client.actions';\nimport { loadAccounts, loadAccountsSuccess } from '../../atoms/accounts/accounts.actions';\nimport {\n    updateAccountGrip,\n    updateAccountGrips,\n    updateAccountGripSuccess,\n} from '../../atoms/account-grips/account-grips.actions';\nimport { Account } from '../../models/account/account.class';\nimport { loadCategories, loadCategoriesSuccess } from '../../atoms/categories/categories.actions';\nimport { CategoriesBlockUtils } from '../utils/categoriesBlock.saga';\nimport { AccountGrip } from '../../models/account-grip/grip.class';\n\nsagaLauncher.onAction(updateAccountGrips, updateAccountGripsSaga);\nsagaLauncher.onAction(updateAccountGrip, updateAccountGripSaga);\n\nexport function* updateAccountGripsSaga(action: Action<Account[]>) {\n    console.log('*** updateAccountGripsSaga started');\n    const accounts = action.payload;\n\n    for (let account of accounts)\n        yield fork(updateAccountGripSaga, updateAccountGrip(account));\n}\n\nexport function* updateAccountGripSaga(action: Action<Account>) {\n    const account = action.payload;\n\n    console.log(`*** updateAccountGripSaga started for account ${account.name}`);\n\n    const block = yield* CategoriesBlockUtils.get(account.categoriesBlockId);\n\n    console.log('loadCategories', block);\n\n    const grip = new AccountGrip(account, block);\n\n    yield put(updateAccountGripSuccess(grip));\n}\n","import { put, take } from 'redux-saga/effects';\nimport { Action } from '@reatom/core';\nimport { MonthDate } from '../../models/common/date.types';\nimport { Account } from '../../models/account/account.class';\nimport { Month } from '../../models/month/month.class';\nimport { getTimestamp, SagaUtils, selectAtom } from '../helpers/helpers';\nimport { SagaPacker } from '../saga-launcher';\nimport {\n    saveMonths,\n    saveMonthsSuccess,\n    saveMonthsFailed,\n    loadMonths,\n    loadMonthsSuccess,\n    loadMonthsFailed,\n} from '../../atoms/months/months.actions';\nimport { UUID } from '../../models/common/common.types';\nimport { Months } from '../../atoms/months/months.atom';\n\nexport const MonthUtils = {\n    /**\n     * Get or create Month of Account's chain\n     */\n    get: SagaPacker.call(getMonthSaga),\n    /**\n     * Get months from DB\n     */\n    getByIds: SagaPacker.call(getMonthsByIdsSaga),\n    /**\n     * Save months to DB\n     */\n    save: SagaPacker.call(saveMonthsSaga),\n};\n\nfunction* getMonthsByIdsSaga(ids: UUID[]): Generator<any, Month[], any> {\n    const months: Map<UUID, Month> = yield selectAtom(Months);\n\n    console.log(months);\n    const notExists = ids.filter(id => !months.has(id));\n\n    if (!notExists)\n        return ids.map(id => months.get(id));\n\n    yield put(loadMonths(notExists));\n    let action: Action<any>;\n    do {\n        action = yield take([loadMonthsSuccess, loadMonthsFailed]);\n        if (action.type === loadMonthsSuccess.getType()) {\n            if (action.payload.every((item, index) => item.id === notExists[index])) {\n                const months = yield selectAtom(Months);\n                return ids.map(id => months.get(id));\n            }\n        } else {\n            if (action.payload.ids.every((item, index) => item === notExists[index]))\n                throw action.payload.error;\n        }\n    } while (true);\n}\n\nfunction* getMonthSaga(account: Account, monthDate: MonthDate) {\n    if (!account.head) {\n        const timestamp: number = yield getTimestamp();\n        console.log('timestamp', timestamp);\n        return Month.createFirstBlock(account.id, monthDate, timestamp);\n    }\n\n    // create next block\n    if (monthDate > account.head.month) {\n        const [head]: Month[] = yield* MonthUtils.getByIds([account.head.id]);\n        const timestamp: number = yield getTimestamp();\n        return head.createNextBlock(monthDate, timestamp);\n    }\n\n    // return exists month\n    {\n        const indexOfMonth = account.months.findIndex(item => item.month === monthDate);\n        if (indexOfMonth > -1) {\n            const monthsIds = account.months\n                                     .slice(0, indexOfMonth + 1)\n                                     .map(item => item.id);\n            const months = yield* MonthUtils.getByIds(monthsIds);\n            return months.pop();\n        }\n    }\n\n    // create block in the middle of chain\n    {\n        const monthsIds: UUID[] = [];\n\n        for (let i = 0; i < account.months.length; i++) {\n            const currentMonth = account.months[i];\n\n            monthsIds.push(currentMonth.id);\n\n            if (currentMonth.month < monthDate)\n                break;\n        }\n\n        const months = yield* MonthUtils.getByIds(monthsIds);\n        const monthsToSave: Month[] = [];\n\n        const timestamp = yield* SagaUtils.getTimestamp();\n\n        let lastMonth = months.pop();\n\n        const newMonth = lastMonth = lastMonth.createNextBlock(monthDate, timestamp);\n        monthsToSave.push(lastMonth);\n\n        for (let month = months.pop(); month; month = months.pop()) {\n            const updated = month.updatePrevMonths([lastMonth], timestamp);\n            monthsToSave.push(updated);\n            lastMonth = updated;\n        }\n\n        yield* MonthUtils.save(monthsToSave);\n\n        return newMonth;\n    }\n}\n\nfunction* saveMonthsSaga(months: Month[]) {\n    yield put(saveMonths(months));\n    for (; ;) {\n        const action = yield take([saveMonthsSuccess.getType(), saveMonthsFailed.getType()]);\n        console.log(action);\n        if (action.type === saveMonthsSuccess.getType()) {\n            if (months.every((item, index) => action.payload[index] === item.id))\n                return;\n        } else if (action.type === saveMonthsFailed.getType()) {\n            if (months.every((item, index) => action.payload.ids[index] === item.id))\n                throw action.payload.error;\n        } else {\n            console.error('invalid action ' + action.type, action);\n        }\n    }\n}\n","import { Month } from '../../models/month/month.class';\nimport { Account } from '../../models/account/account.class';\nimport { UUID } from '../../models/common/common.types';\nimport { SagaPacker } from '../saga-launcher';\nimport { Accounts, IAccountsState } from '../../atoms/accounts/accounts.atom';\nimport { select, put, take } from 'redux-saga/effects';\nimport { saveAccount, saveAccountSuccess, saveAccountFailed } from '../../atoms/accounts/accounts.actions';\nimport { MonthUtils } from './month.saga';\nimport { isVersionOfMonth, RequiredMonthsError } from '../../models/account/chain.utils';\nimport { SagaUtils } from '../helpers/helpers';\nimport { AccountGrips, IAccountGripsState } from '../../atoms/account-grips/account-grips.atom';\nimport { AccountGrip } from '../../models/account-grip/grip.class';\n\nexport const AccountUtils = {\n    select: SagaPacker.call(selectAccountSaga),\n    getGrip: SagaPacker.call(getAccountGripSaga),\n    update: SagaPacker.call(updateAccountSaga),\n    save: SagaPacker.call(saveAccountSaga),\n};\n\n/**\n * Select account from Store\n * @param id\n */\nfunction* selectAccountSaga(id: UUID) {\n    const accounts: IAccountsState = yield select(getState => getState(Accounts));\n    const account: Account = accounts.accounts.get(id);\n\n    if (!account)\n        throw new Error(`Account \"${id}\" not found`);\n\n    return account;\n}\n\n/**\n * Get account grip from Store\n * @param id\n */\nfunction* getAccountGripSaga(id: UUID) {\n    const accounts: IAccountGripsState = yield select(getState => getState(AccountGrips));\n    const account: AccountGrip = accounts.accounts.get(id);\n\n    if (!account)\n        throw new Error(`AccountGrip \"${id}\" not found`);\n\n    return account;\n}\n\n/**\n * Обновляет месяц в аккаунте, при необходимости правит оставшуюся цепочку, сохраняет\n *\n * FIXME So raw. Needs refactoring\n *\n * @param account\n * @param month\n */\nfunction* updateAccountSaga(account: Account, month: Month) {\n    console.log('*** updateAccountSaga');\n    console.log(account.months.map(item => item.month));\n    console.log(month.month, month.id);\n    let currentMonthIndex = account.months.findIndex(item => item.month === month.month);\n    let prevMonthIndex = account.months.findIndex(item => item.month < month.month);\n\n    if (!account.head) {\n        yield* MonthUtils.save([month]);\n        const accountToUpdate = account.updateHead(month);\n        yield* AccountUtils.save(accountToUpdate);\n        return accountToUpdate;\n    }\n\n    let toIndex = currentMonthIndex === -1\n        ? prevMonthIndex\n        : currentMonthIndex;\n\n    const monthsIds: UUID[] = account.months\n                                     .slice(0, toIndex + 1)\n                                     .map(item => item.id);\n\n    const additionalMonths: Month[] = [month];\n\n    console.log(monthsIds);\n\n    if (monthsIds.length)\n        additionalMonths.push(...yield* MonthUtils.getByIds(monthsIds));\n\n    const timestamp = yield* SagaUtils.getTimestamp();\n\n    console.log({\n        currentMonthIndex,\n        prevMonthIndex,\n        toIndex,\n        additions: additionalMonths.map(item => [item.month + ' ' + item.id]),\n        months: account.months\n                       .slice(0, toIndex + 1)\n                       .map(item => item.month),\n    });\n\n    let monthsToUpdate = [month];\n\n    console.log('additional');\n    console.log(additionalMonths.map(item => `${item.month} ${item.id}`));\n    console.log('chain');\n    console.log(account.months.map(item => `${item.month} ${item.id}`));\n\n    console.log('prevMonthIndex', prevMonthIndex, account.months[prevMonthIndex]?.month);\n\n    if (currentMonthIndex === -1 && prevMonthIndex === -1)\n        throw new Error('Unexpection');\n\n    if (currentMonthIndex === -1 && prevMonthIndex !== -1) {\n        currentMonthIndex = prevMonthIndex;\n    } else {\n        const existsMonth = account.months[currentMonthIndex];\n        if (existsMonth.month !== month.month)\n            throw new Error('somethings wrong');\n        if (!isVersionOfMonth(month, existsMonth))\n            throw new Error('somethings wrong');\n\n    }\n\n    console.log('currentMonthIndex', currentMonthIndex, account.months[currentMonthIndex]?.month);\n    if (currentMonthIndex !== -1) {\n        let previousMonth: Month = month;\n\n        for (let index = currentMonthIndex - 1; index >= 0; index--) {\n            console.log('index', index, account.months[index].month);\n            const currentMonthId = account.months[index].id;\n            const currentMonth = additionalMonths.find(item => item.id === currentMonthId);\n            if (!currentMonth)\n                throw new RequiredMonthsError(currentMonthId);\n            previousMonth = currentMonth.updatePrevMonths([previousMonth], timestamp);\n            additionalMonths.push(previousMonth);\n            monthsToUpdate.push(previousMonth);\n        }\n\n        console.log('additionalMonths', additionalMonths.map(item => [item.month + ' ' + item.id]));\n\n        const accountToUpdate = account.updateHead(previousMonth, additionalMonths);\n\n        yield* MonthUtils.save(monthsToUpdate);\n        yield* AccountUtils.save(accountToUpdate);\n        return accountToUpdate;\n    }\n\n    throw new Error('may be first');\n}\n\nexport function* saveAccountSaga(account: Account) {\n    yield put(saveAccount(account));\n    for (; ;) {\n        const action = yield take([saveAccountSuccess, saveAccountFailed]);\n        if (action.type === saveAccountSuccess.getType()) {\n            if (action.payload === account.id)\n                return;\n        } else {\n            if (action.payload.id === account.id)\n                throw action.payload.error;\n        }\n    }\n}\n","import { sagaLauncher } from '../saga-launcher';\nimport { loadMonthsSuccess } from '../../atoms/months/months.actions';\nimport { Action } from '@reatom/core';\nimport { Month } from '../../models/month/month.class';\nimport { put, fork } from 'redux-saga/effects';\nimport { Account } from '../../models/account/account.class';\nimport { AccountUtils } from '../utils/account.saga';\nimport { updateMonthGripSuccess } from '../../atoms/month-grips/month-grips.actions';\n\nsagaLauncher.onAction(loadMonthsSuccess, updateMonthGripsSaga);\n\nexport function* updateMonthGripsSaga(action: Action<Month[]>) {\n    console.log('update Month grips saga');\n    const months = action.payload;\n\n    for (let month of months)\n        yield fork(updateMonthGripSaga, month);\n}\n\nexport function* updateMonthGripSaga(month: Month) {\n    console.log(`update Month grip saga for ${month.month}`);\n    console.log('123456');\n\n    const accountGrip = yield* AccountUtils.getGrip(month.account);\n    console.log('123');\n    const grip = accountGrip.makeMonth(month);\n    console.log('234');\n\n    yield put(updateMonthGripSuccess(grip));\n    console.log('345');\n}\n","import { addTransaction } from '../../models/transaction/transaction.actions';\nimport { sagaLauncher } from '../saga-launcher';\nimport { IAddTransactionForm } from '../../models/transaction/transaction.types';\nimport { dayDateToMonth } from '../../models/common/date.utils';\nimport { Action } from '@reatom/core';\nimport { AccountUtils } from '../utils/account.saga';\nimport { MonthUtils } from '../utils/month.saga';\nimport { Transaction } from '../../models/transaction/transaction.class';\nimport { put } from 'redux-saga/effects';\nimport { updateAccountGrip } from '../../atoms/account-grips/account-grips.actions';\n\nsagaLauncher.onAction(addTransaction, addTransactionSaga);\n\nexport function* addTransactionSaga(action: Action<IAddTransactionForm>) {\n    console.log('*** addTransactionSaga started');\n    const payload: IAddTransactionForm = action.payload;\n    const account = yield* AccountUtils.select(payload.account);\n    const month = yield* MonthUtils.get(account, dayDateToMonth(payload.date));\n\n    console.log('addTransactionSaga', month.id, month.prevVersions);\n\n    let tx = Transaction.create(\n        payload.type,\n        payload.amount,\n        'RUB',\n    );\n\n    if (payload.title) tx = tx.setTitle(payload.title);\n    if (payload.category) tx = tx.setCategory(payload.category);\n\n    const day = month.getDay(payload.date)\n                     .addTransaction(tx);\n\n    const updatedMonth = month.updateDay(day);\n\n    console.log('updatedMonth', updatedMonth.id, updatedMonth.prevVersions);\n\n    const value = yield* AccountUtils.update(account, updatedMonth);\n    console.log('*** addTransactionSaga complete');\n    yield put(updateAccountGrip(value));\n    return value;\n}\n","import { take } from 'redux-saga/effects';\nimport { sagaLauncher } from '../saga-launcher';\nimport { loadAccountsSuccess } from '../../atoms/accounts/accounts.actions';\n\nsagaLauncher.register(transactionUpdateSaga);\n\nfunction* transactionUpdateSaga() {\n    console.log('init transactionUpdateSaga');\n    while (true) {\n        const action = yield take(loadAccountsSuccess.getType());\n        console.log('load successssssss', action);\n    }\n}\n","import React from 'react';\nimport styles from './App.module.scss';\nimport { Redirect, Route, Switch } from 'react-router';\nimport { HashRouter } from 'react-router-dom';\nimport { NavBar } from './widgets/NavBar';\nimport { useAction } from '@reatom/react';\nimport { startListenOnlineStatus } from './atoms/client/client.service';\nimport { store } from './store/store';\nimport { initIndexedDB, useDBReady } from './db';\nimport './sagas';\nimport { sagaLauncher } from './sagas';\nimport { paths, routes } from './routes';\nimport { refresh } from './atoms/client/client.actions';\n\nexport const App = () => {\n    const refreshAllHandler = useAction(() => {\n        console.log('*** refreshAllHandler');\n\n        initIndexedDB(store);\n\n        console.log('*** refreshAllHandler complete');\n\n        return refresh();\n    }, []);\n    useDBReady(refreshAllHandler);\n\n    return (\n        <div className={styles.App}>\n            <HashRouter>\n                <Switch>\n                    {routes.map((route, index) => <Route {...route} key={index}/>)}\n                    <Redirect to={paths.home()}/>\n                </Switch>\n                <NavBar/>\n            </HashRouter>\n        </div>\n    );\n};\n\nstartListenOnlineStatus(store);\nsagaLauncher.start(store);\n","import { Store } from '@reatom/core';\nimport { setOnlineStatus } from './client.actions';\n\nexport function startListenOnlineStatus(store: Store) {\n    store.dispatch(setOnlineStatus(navigator.onLine));\n\n    window.addEventListener('online',\n        () => store.dispatch(setOnlineStatus(true)),\n    );\n    window.addEventListener('offline',\n        () => store.dispatch(setOnlineStatus(false)),\n    );\n}\n","import { DBStatus } from '../libs/indexed-db';\nimport { useEffect } from 'react';\nimport { db } from './db';\n\nexport function useDBReady(onReady: () => void) {\n    console.log('useDBReady');\n\n    const onChangeStatusEvent = (status: DBStatus) => {\n        console.log(DBStatus[status]);\n        if (status === DBStatus.Ready)\n            onReady();\n    };\n\n    useEffect(() => {\n        db.addStatusListener(onChangeStatusEvent);\n        return () => db.removeStatusListener(onChangeStatusEvent);\n    });\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst SW_DEBUG = false;\n\nconst isLocalhost = SW_DEBUG ||\n    Boolean(\n        window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n        ),\n    );\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if ((SW_DEBUG || process.env.NODE_ENV === 'production') && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href,\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log('Offline Mode ready');\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n             .register(swUrl)\n             .then(registration => {\n                 registration.onupdatefound = () => {\n                     const installingWorker = registration.installing;\n                     if (installingWorker == null) {\n                         return;\n                     }\n                     installingWorker.onstatechange = () => {\n                         if (installingWorker.state === 'installed') {\n                             if (navigator.serviceWorker.controller) {\n                                 // At this point, the updated precached content has been fetched,\n                                 // but the previous service worker will still serve the older\n                                 // content until all client tabs are closed.\n                                 console.log(\n                                     'New content is available and will be used when all ' +\n                                     'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                                 );\n\n                                 // Execute callback\n                                 if (config && config.onUpdate) {\n                                     config.onUpdate(registration);\n                                 }\n                             } else {\n                                 // At this point, everything has been precached.\n                                 // It's the perfect time to display a\n                                 // \"Content is cached for offline use.\" message.\n                                 console.log('Content is cached for offline use.');\n\n                                 // Execute callback\n                                 if (config && config.onSuccess) {\n                                     config.onSuccess(registration);\n                                 }\n                             }\n                         }\n                     };\n                 };\n             })\n             .catch(error => {\n                 console.error('Error during service worker registration:', error);\n             });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n                 .then(registration => {\n                     registration.unregister();\n                 })\n                 .catch(error => {\n                     console.error(error.message);\n                 });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { context } from '@reatom/react';\nimport './styles/index.scss';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <context.Provider value={store}>\n            <App/>\n        </context.Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"head\":\"MonthViewWidget_head__2tdqX\",\"title\":\"MonthViewWidget_title__2uHWT\",\"info\":\"MonthViewWidget_info__ltwmS\",\"circle\":\"MonthViewWidget_circle__19VOB\",\"balance\":\"MonthViewWidget_balance__qUNX4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"txList\":\"TxList_txList__3rowt\",\"txItem\":\"TxList_txItem__2-7sR\",\"txItem__left\":\"TxList_txItem__left__3Dekh\",\"txItem__first\":\"TxList_txItem__first__eF_WE\",\"txItem__second\":\"TxList_txItem__second__-lQ89\",\"txItem__amount\":\"TxList_txItem__amount__2PbUA\",\"txItem__date\":\"TxList_txItem__date__3uUSP\",\"empty\":\"TxList_empty__2S-7j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"moneyView\":\"MoneyView_moneyView__2U7sP\",\"fractional\":\"MoneyView_fractional__1hdQj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"swipeWidget\":\"SwipeWidget_swipeWidget__12ZdL\",\"prev\":\"SwipeWidget_prev__UDZne\",\"next\":\"SwipeWidget_next__1huSl\",\"swipe\":\"SwipeWidget_swipe__1ww0t\",\"swipe-wrap\":\"SwipeWidget_swipe-wrap__x4MEz\",\"swipeItem\":\"SwipeWidget_swipeItem__2D3OP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"days\":\"MonthTxList_days__1hzzo\",\"day\":\"MonthTxList_day__1_h7Y\",\"title\":\"MonthTxList_title__VajvW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"TransactionsPage_page__1uE4j\",\"filter\":\"TransactionsPage_filter__3x4B8\",\"active\":\"TransactionsPage_active__3XoOk\"};"],"sourceRoot":""}