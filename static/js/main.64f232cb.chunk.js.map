{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx","logo.svg"],"names":["Hello","React","lazy","App","useState","ip","hello","setHello","online","useOnlineStatus","useEffect","timer","setInterval","clearInterval","className","src","logo","alt","onClick","fallback","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","customerData","ssn","name","age","email","request","indexedDB","open","onerror","event","onsuccess","db","target","result","transaction","objectStore","add","onupgradeneeded","createObjectStore","keyPath","i","createIndex","unique","module","exports"],"mappings":"oOAKMA,EAAQC,IAAMC,MAAK,kBAAM,gCAuDhBC,MArDf,WAAgB,IAAD,EACSC,qBADT,mBACJC,EADI,aAEeD,sBAFf,mBAEJE,EAFI,KAEGC,EAFH,KAGLC,EAASC,4BA4Bf,OA1BAC,qBAAU,WAqBN,IAAMC,EAAQC,aAAY,cAAe,KAEzC,OAAO,kBAAMC,cAAcF,MAC5B,IAGC,yBAAKG,UAAU,OACX,4BAAQA,UAAU,cACd,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,kCACSZ,GAET,kDAAwBG,EAAS,SAAW,UAA5C,KACA,4BAAQM,UAAU,WACVI,QAAS,kBAAMX,GAAUD,KADjC,eAKCA,GACD,kBAAC,WAAD,CAAUa,SAAU,4CAChB,kBAACnB,EAAD,UCvCdoB,EACFC,QACiC,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DA0CZ,SAASC,EAAgBC,EAAeC,GACpCC,UAAUC,cACAC,SAASJ,GACTK,MAAK,SAAAC,GACFA,EAAaC,cAAgB,WACzB,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACE,cAA3BF,EAAiBG,QACbT,UAAUC,cAAcS,YAIxBC,QAAQC,IACJ,iHAKAb,GAAUA,EAAOc,UACjBd,EAAOc,SAAST,KAMpBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACjBf,EAAOe,UAAUV,WAOxCW,OAAM,SAAAC,GACHL,QAAQK,MAAM,4CAA6CA,MCjG5EC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDoBrB,SAAkBtB,GACrB,GAA2D,kBAAmBC,UAAW,CAMrF,GAJkB,IAAIsB,IAClBC,UACA9B,OAAOC,SAAS8B,MAENC,SAAWhC,OAAOC,SAAS+B,OAIrC,OAGJhC,OAAOiC,iBAAiB,QAAQ,WAC5B,IAAM5B,EAAK,UAAMyB,UAAN,sBAEPhC,IA4DhB,SAAiCO,EAAeC,GAE5C4B,MAAM7B,EAAO,CACT8B,QAAS,CAAC,iBAAkB,YAE3BzB,MAAK,SAAA0B,GAEF,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEjB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,MAAK,SAAAC,GAC/BA,EAAa+B,aAAahC,MAAK,WAC3BV,OAAOC,SAAS0C,eAKxBvC,EAAgBC,EAAOC,MAG9BgB,OAAM,WACHJ,QAAQC,IACJ,oEApFAyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,MAAK,WAC/BQ,QAAQC,IAAI,0BAIhBf,EAAgBC,EAAOC,OCzCvCE,GAIA,IAAMqC,EAAe,CACjB,CAACC,IAAK,cAAeC,KAAM,OAAQC,IAAK,GAAIC,MAAO,oBACnD,CAACH,IAAK,cAAeC,KAAM,QAASC,IAAK,GAAIC,MAAO,mBAIlDC,EAAUC,UAAUC,KAFX,WAEwB,GAEvCF,EAAQG,QAAU,SAAUC,KAG5BJ,EAAQK,UAAY,SAAUD,GAC1B,IAAME,EAAKF,EAAMG,OAAOC,OACvB1D,OAAewD,GAAKA,EAEDA,EAAGG,YAAY,CAAC,aAAc,aAClBC,YAAY,aACtBC,IAAI,CAACb,IAAK,GAAIC,MAAO,MAAOF,KAAM,MAAOD,IAAK,QAClES,UAAY,SAACD,GAAD,OAAWpC,QAAQC,IAAImC,KAEzCJ,EAAQY,gBAAkB,SAAUR,GAChC,IAKMM,EALKN,EAAMG,OAAOC,OAKDK,kBAAkB,YAAa,CAACC,QAAS,QAWhE,IAAK,IAAIC,KAPTL,EAAYM,YAAY,OAAQ,OAAQ,CAACC,QAAQ,IAIjDP,EAAYM,YAAY,QAAS,QAAS,CAACC,QAAQ,IAGrCtB,EACVe,EAAYC,IAAIhB,EAAaoB,M,kBC1DrCG,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.64f232cb.chunk.js","sourcesContent":["import React, { useEffect, useState, Suspense } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { useOnlineStatus } from '@21kb/react-online-status-hook/lib';\n\nconst Hello = React.lazy(() => import('./Hello'));\n\nfunction App() {\n    const [ip, setIp] = useState();\n    const [hello, setHello] = useState();\n    const online = useOnlineStatus();\n\n    useEffect(() => {\n        function getIP() {\n            // console.log('get ip');\n            // fetch('/manifest.json')\n            // fetch('https://api.ipify.org?format=json')\n            //     .then(\n            //         response => response.json(),\n            //     )\n            //     .then(\n            //         result => setIp(result.ip),\n            //     );\n            // fetch('/manifest.json')\n            //     // fetch('https://api.ipify.org?format=json')\n            //     .then(\n            //         response => response.json(),\n            //     )\n            //     .then(\n            //         result => {},//console.log(result),\n            //     );\n        }\n\n        const timer = setInterval(() => getIP(), 1000);\n        getIP();\n        return () => clearInterval(timer);\n    }, []);\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                <p>\n                    IP: {ip}\n                </p>\n                <div>You are currently {online ? 'online' : 'offline'}.</div>\n                <button className=\"App-link\"\n                        onClick={() => setHello(!hello)}\n                >\n                    Learn React\n                </button>\n                {hello &&\n                <Suspense fallback={<div>Loading...</div>}>\n                    <Hello/>\n                </Suspense>}\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst SW_DEBUG = false;\n\nconst isLocalhost = SW_DEBUG ||\n    Boolean(\n        window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n        ),\n    );\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if ((SW_DEBUG || process.env.NODE_ENV === 'production') && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href,\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log('Offline Mode ready');\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n             .register(swUrl)\n             .then(registration => {\n                 registration.onupdatefound = () => {\n                     const installingWorker = registration.installing;\n                     if (installingWorker == null) {\n                         return;\n                     }\n                     installingWorker.onstatechange = () => {\n                         if (installingWorker.state === 'installed') {\n                             if (navigator.serviceWorker.controller) {\n                                 // At this point, the updated precached content has been fetched,\n                                 // but the previous service worker will still serve the older\n                                 // content until all client tabs are closed.\n                                 console.log(\n                                     'New content is available and will be used when all ' +\n                                     'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                                 );\n\n                                 // Execute callback\n                                 if (config && config.onUpdate) {\n                                     config.onUpdate(registration);\n                                 }\n                             } else {\n                                 // At this point, everything has been precached.\n                                 // It's the perfect time to display a\n                                 // \"Content is cached for offline use.\" message.\n                                 console.log('Content is cached for offline use.');\n\n                                 // Execute callback\n                                 if (config && config.onSuccess) {\n                                     config.onSuccess(registration);\n                                 }\n                             }\n                         }\n                     };\n                 };\n             })\n             .catch(error => {\n                 console.error('Error during service worker registration:', error);\n             });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n                 .then(registration => {\n                     registration.unregister();\n                 })\n                 .catch(error => {\n                     console.error(error.message);\n                 });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n\n\n// This is what our customer data looks like.\nconst customerData = [\n    {ssn: '444-44-4444', name: 'Bill', age: 35, email: 'bill@company.com'},\n    {ssn: '555-55-5555', name: 'Donna', age: 32, email: 'donna@home.org'},\n];\nconst dbName = 'the_name';\n\nconst request = indexedDB.open(dbName, 2);\n\nrequest.onerror = function (event) {\n    // Handle errors.\n};\nrequest.onsuccess = function (event: any) {\n    const db = event.target.result;\n    (window as any).db = db;\n\n    const transaction = db.transaction(['customers'], 'readwrite');\n    const objectStore = transaction.objectStore('customers');\n    const r = objectStore.add({age: 44, email: 'asd', name: 'asd', ssn: '123'});\n    r.onsuccess = (event) => console.log(event);\n};\nrequest.onupgradeneeded = function (event: any) {\n    const db = event.target.result;\n\n    // Create an objectStore to hold information about our customers. We're\n    // going to use \"ssn\" as our key path because it's guaranteed to be\n    // unique.\n    const objectStore = db.createObjectStore('customers', {keyPath: 'ssn'});\n\n    // Create an index to search customers by name. We may have duplicates\n    // so we can't use a unique index.\n    objectStore.createIndex('name', 'name', {unique: false});\n\n    // Create an index to search customers by email. We want to ensure that\n    // no two customers have the same email, so use a unique index.\n    objectStore.createIndex('email', 'email', {unique: true});\n\n    // Store values in the newly created objectStore.\n    for (let i in customerData) {\n        objectStore.add(customerData[i]);\n    }\n};\n\n\n\n\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}