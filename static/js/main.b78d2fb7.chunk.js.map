{"version":3,"sources":["App.module.scss","pages/AccountsPage.module.scss","widgets/NavBar.module.scss","models/transaction/transaction.types.ts","components/MoneyView.tsx","atoms/accounts/accounts.actions.ts","atoms/accounts/accounts.atom.ts","atoms/months/months.actions.ts","atoms/months/months.atom.ts","widgets/TxList.tsx","widgets/TxList.utils.ts","widgets/MonthTxList.tsx","widgets/MonthViewWidget.tsx","widgets/Header.tsx","pages/AccountMonthsPage.tsx","routes/config.ts","routes/accounts.ts","pages/AccountsPage.tsx","pages/AccountPage.tsx","atoms/client/client.actions.ts","atoms/client/client.atom.ts","store/store.ts","models/transaction/transaction.actions.ts","pages/TransactionsPage.tsx","routes/transactions.ts","pages/TransactionAddPage.tsx","routes/routes.tsx","routes/index.ts","widgets/NavBar.tsx","indexed-db/db.types.ts","indexed-db/db.utils.ts","indexed-db/collection.ts","indexed-db/db.ts","models/money/money.class.ts","models/month/month.types.ts","models/common/common.types.ts","models/transaction/transactions.utils.ts","models/common/date.utils.ts","models/transaction/transaction.class.ts","models/day/day.class.ts","models/month/month.class.ts","models/subset/subset.class.ts","models/subset/subset.scheme.ts","models/account/chain.utils.ts","models/account/account.class.ts","models/account/account.scheme.ts","models/month/month.scheme.ts","store/db.ts","sagas/saga-launcher.ts","sagas/helpers/helpers.ts","sagas/utils/month.saga.ts","sagas/utils/account.saga.ts","sagas/sagas/transaction-add.saga.ts","sagas/sagas/transaction-update.saga.ts","App.tsx","atoms/client/client.service.ts","serviceWorker.ts","index.tsx","indexed-db/test.ts","widgets/TxList.module.scss","widgets/MonthViewWidget.module.scss","components/MoneyView.module.scss","widgets/MonthTxList.module.scss","pages/TransactionsPage.module.scss","widgets/Header.module.scss"],"names":["module","exports","TransactionType","MoneyView","money","className","styles","moneyView","entire","getEntire","fractional","getFractional","currency","getSymbol","NS","chooseAccount","declareAction","loadAccounts","loadAccountsSuccess","loadAccountsFailed","saveAccount","saveAccountSuccess","saveAccountFailed","Accounts","declareAtom","current","accounts","Map","on","choose","state","id","get","load","map","account","save","set","loadMonths","loadMonthsSuccess","loadMonthsFailed","saveMonths","saveMonthsSuccess","saveMonthsFailed","Months","months","items","reduce","acc","item","month","TxList","React","memo","txList","list","dayDate","amount","type","Income","Expense","negative","Error","first","category","second","title","date","format","Date","makeTxList","tx","index","key","txItem","txItem__left","txItem__first","empty","txItem__second","txItem__right","txItem__amount","txItem__date","MonthTxList","days","day","transactions","MonthViewWidget","brief","prev","next","has","head","info","to","paths","width","height","xmlns","fill-rule","clip-rule","d","circle","balance","summary","income","expense","Header","header","AccountMonthsPage","params","useRouteMatch","useAtom","loadMonth","useAction","monthDate","length","monthIndex","findIndex","monthBrief","prevMonth","nextMonth","name","baseUrl","view","monthsList","accountsRoutes","path","exact","component","history","useHistory","Array","from","values","chooseAccountHandler","accountId","push","currentAccount","onClick","add","match","setOnlineStatus","refresh","_","dispatch","Client","online","store","createStore","combine","connectReduxDevtools","addTransaction","Object","keys","URLSearchParams","toString","addQueryString","transactionRoutes","useLocation","search","useState","setAmount","setDate","setType","typeChangeHandler","event","target","value","onSubmit","preventDefault","formData","console","log","onChange","label","checked","htmlFor","page","filter","active","routes","home","NavBar","bottomNavigation","DBStatus","eventLogger","emitter","emitterName","eventName","isArray","forEach","addEventListener","Collection","db","scheme","transaction","storage","this","collection","objectStore","Promise","resolve","reject","request","onsuccess","result","onerror","error","query","count","all","getAll","put","IndexedDB","dbName","schemes","listeners","_status","Initializing","window","indexedDB","version","Math","max","model","dbVersion","openDB","then","Ready","getAccessor","fn","status","setStatus","openRequest","open","Upgrading","oldVersion","newVersion","objectStoreNames","e","warn","createObjectStore","keyPath","upgrade","Failed","currencies","RUB","code","symbol","precision","Money","subunits","toFixed","fromJSON","clone","data","parts","trim","split","amountText","currencyName","toUpperCase","units","Number","isNaN","round","floor","substr","create","SyncStatus","EmptySummary","EmptyExtendSummary","balanceOnStart","balanceOnEnd","freeze","EMPTY_SUMMARY","calculateSummary","Removed","sub","addSummary","base","equal","checkSummary","parseMonthDate","year","getFullYear","getMonth","dayDateToMonth","join","Transaction","createdAt","updatedAt","assign","uuidGenerator","toJSON","Day","dateTime","getDate","parseDayDate","Month","syncStatus","NoSynced","prevMonths","prevVersions","dataHash","timestamp","daysInMonth","getDataHash","generateID","getDaysInMonth","Fixed","hash","sha1","JSON","stringify","monthID","padStart","ts","replace","blocks","revisions","getBrief","Prepared","Syncing","FullySynced","createDayDate","startBalance","calculateSummaryFromStartBalance","every","find","createDay","newDay","isDateOfMonth","slice","dayIndex","sort","a","b","splice","baseSummary","Subset","subset","loaded","createFirstBlock","v1","SubsetScheme","defaultSubset","updateMonthChain","additions","old","findChain","chain","completed","RequiredMonthsError","pop","isVersionOfMonth","CanNotFastForwardMonthError","preFirstID","preFirstIndex","monthsNumbersSet","Set","monthsNumbers","table","element","oldEl","check","reverse","newChain","i","MonthChainError","checkChain","nextId","lastBlock","nextID","reason","invalidMonth","ids","Account","fullMonths","last","required","AccountScheme","defaultAccount","MonthScheme","sagaLauncher","sagas","saga","actionCreator","register","takeEvery","getType","sagaOptions","getState","channel","stdChannel","subscribe","runSaga","SagaPacker","call","PackedSaga","originalSaga","selectAtomFn","SagaUtils","selectAtom","getTimestamp","getTimestampFn","atom","select","getTime","getMonthsByIdsSaga","getMonthSaga","saveMonthsSaga","MonthUtils","getByIds","notExists","take","action","payload","createNextBlock","indexOfMonth","monthsIds","currentMonth","monthsToSave","lastMonth","newMonth","updated","updatePrevMonths","selectAccountSaga","updateAccountSaga","saveAccountSaga","AccountUtils","update","currentMonthIndex","prevMonthIndex","accountToUpdate","updateHead","toIndex","additionalMonths","monthsToUpdate","existsMonth","previousMonth","currentMonthId","addTransactionSaga","getDay","updatedMonth","updateDay","onAction","transactionUpdateSaga","App","onReady","onChangeStatusEvent","useEffect","addStatusListener","removeStatusListener","useDBReady","route","navigator","onLine","start","Boolean","location","hostname","ReactDOM","render","StrictMode","Provider","document","getElementById","serviceWorker","ready","registration","unregister","catch","message","customerData","ssn","age","email","onupgradeneeded","createIndex","unique","initDB"],"mappings":"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","file":"static/js/main.b78d2fb7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\",\"App-logo\":\"App_App-logo__1GLNd\",\"App-logo-spin\":\"App_App-logo-spin__1EbLw\",\"App-header\":\"App_App-header__3nnPn\",\"App-link\":\"App_App-link__TRj1P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"currentAccount\":\"AccountsPage_currentAccount__3IcrQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bottomNavigation\":\"NavBar_bottomNavigation__hEWk4\"};","import { UUID } from '../common/common.types';\nimport { Money } from '../money/money.class';\n\nexport enum TransactionType {\n    Removed,\n    Income,\n    Expense,\n    Adjust,\n    AdjustTo,\n}\n\nexport interface ITransaction {\n    id: UUID;\n    amount: Money;\n    type: TransactionType;\n    category: UUID | '';\n    title: string | '';\n    createdAt?: number;\n    updatedAt?: number;\n}\n\nexport interface IAddTransactionForm {\n    account: UUID;\n    amount: string;\n    type: TransactionType;\n    category: UUID | '';\n    title: string | '';\n    date: string;\n}\n","import React from 'react';\nimport { Money } from '../models/money/money.class';\n\nimport styles from './MoneyView.module.scss';\n\ninterface IProps {\n    money: Money;\n}\n\nexport const MoneyView = ({money}: IProps) => {\n    return (\n        <div className={styles.moneyView}>\n            <span className={styles.entire}>{money.getEntire()}</span>\n            <span className={styles.fractional}>{money.getFractional()}</span>\n            <span className={styles.currency}>{money.getSymbol()}</span>\n        </div>\n    );\n};\n","import { declareAction } from '@reatom/core';\nimport { UUID } from '../../models/common/common.types';\nimport { Account } from '../../models/account/account.class';\n\nconst NS = 'accounts';\nexport const chooseAccount = declareAction<UUID>(NS + ':chooseAccount');\n\nexport const loadAccounts = declareAction(NS + ':loadAccounts');\nexport const loadAccountsSuccess = declareAction<Account[]>(NS + ':loadAccounts success');\nexport const loadAccountsFailed = declareAction<any>(NS + ':loadAccounts failed');\n\nexport const saveAccount = declareAction<Account>(NS + ':saveAccounts');\nexport const saveAccountSuccess = declareAction<UUID>(NS + ':saveAccounts success');\nexport const saveAccountFailed = declareAction<{ id: UUID, error: any }>(NS + ':saveAccounts failed');\n\n\n","import { declareAtom } from '@reatom/core';\nimport { Account } from '../../models/account/account.class';\nimport { Map } from 'immutable';\nimport { UUID } from '../../models/common/common.types';\nimport { chooseAccount, loadAccountsSuccess, saveAccount } from './accounts.actions';\n\nexport interface IAccountsState {\n    current: Account | null;\n    accounts: Map<UUID, Account>;\n}\n\nexport const Accounts = declareAtom<IAccountsState>(\n    ['accounts'],\n    {\n        current: null,\n        accounts: Map(),\n    },\n    on => ({\n        choose: [\n            on(chooseAccount, (state, id) => {\n                const current = state.accounts.get(id);\n                if (current)\n                    return {\n                        ...state,\n                        current,\n                    };\n                else\n                    return state;\n            }),\n        ],\n        load: [\n            on(loadAccountsSuccess, (state, accounts) => {\n                const map: Array<[string, Account]> = accounts.map(account => [account.id, account]);\n                return {\n                    current: accounts[0] || null,\n                    accounts: Map(map),\n                };\n            }),\n        ],\n        save: [\n            on(saveAccount, (state, account) => {\n                return {\n                    accounts: state.accounts.set(account.id, account),\n                    current: account.id === state.current?.id\n                        ? account\n                        : state.current,\n                };\n            }),\n        ],\n    }),\n);\n","import { UUID } from '../../models/common/common.types';\nimport { declareAction } from '@reatom/core';\nimport { Month } from '../../models/month/month.class';\n\nconst NS = 'months';\n\nexport const loadMonths = declareAction<UUID[]>(NS + ':loadMonths');\nexport const loadMonthsSuccess = declareAction<Month[]>(NS + ':loadMonths success');\nexport const loadMonthsFailed = declareAction<{ ids: UUID[], error: any }>(NS + ':loadMonths failed');\n\nexport const saveMonths = declareAction<Month[]>(NS + ':saveMonths');\nexport const saveMonthsSuccess = declareAction<UUID[]>(NS + ':saveMonths success');\nexport const saveMonthsFailed = declareAction<{ ids: UUID[], error: any }>(NS + ':saveMonths failed');\n","import { declareAtom } from '@reatom/core';\nimport { Map } from 'immutable';\nimport { IMonthsState } from './months.types';\nimport { loadMonthsSuccess, saveMonths } from './months.actions';\n\nexport const Months = declareAtom<IMonthsState>(\n    ['months'],\n    Map(),\n    on => ({\n        load: [\n            on(loadMonthsSuccess, (months, items) => {\n                return items.reduce((acc, item) => acc.set(item.id, item), months);\n            }),\n        ],\n        save: [\n            on(saveMonths, (state, months) => {\n                return months.reduce(\n                    (acc, month) => acc.set(month.id, month),\n                    state,\n                );\n            }),\n        ],\n    }),\n);\n","import React from 'react';\nimport { ITransaction } from '../models/transaction/transaction.types';\n\nimport styles from './TxList.module.scss';\nimport { Link } from 'react-router-dom';\nimport { makeTxList } from './TxList.utils';\nimport { MoneyView } from '../components/MoneyView';\nimport { DayDate } from '../models/common/date.types';\n\ninterface IProps {\n    list: ITransaction[];\n    dayDate: DayDate;\n}\n\nexport const TxList = React.memo(({list, dayDate}: IProps) => {\n    const txList = makeTxList(list, dayDate);\n\n    return (\n        <ul className={styles.txList}>\n            {txList.map((tx, index) => (\n                <li key={index} className={styles.txItem}>\n                    <div className={styles.txItem__left}>\n                        <div className={styles.txItem__first}>\n                            {tx.first\n                                ? tx.first\n                                : <span className={styles.empty}>Без заголовка</span>\n                            }\n                        </div>\n                        <div className={styles.txItem__second}>\n                            {tx.second\n                                ? tx.second\n                                : <span className={styles.empty}>Без заголовка</span>\n                            }\n                        </div>\n                    </div>\n                    <div className={styles.txItem__right}>\n                        <div className={styles.txItem__amount}>\n                            <MoneyView money={tx.amount}/>\n                        </div>\n                        <div className={styles.txItem__date}>\n                            {tx.date}\n                        </div>\n                    </div>\n                </li>\n            ))}\n        </ul>\n    );\n});\n","import { ITransaction, TransactionType } from '../models/transaction/transaction.types';\nimport { format } from 'date-fns';\nimport { Money } from '../models/money/money.class';\nimport { DayDate } from '../models/common/date.types';\n\nexport interface IDisplayedTransaction {\n    first: string;\n    second: string;\n    amount: Money;\n    date: string;\n}\n\nexport function makeTxList(list: ITransaction[], dayDate?: DayDate): IDisplayedTransaction[] {\n    return list.map(item => {\n\n        let amount: Money;\n\n        switch (item.type) {\n            case TransactionType.Income:\n                amount = item.amount;\n                break;\n            case TransactionType.Expense:\n                amount = item.amount.negative();\n                break;\n            default:\n                throw new Error('Unprocessed TxType ' + TransactionType[item.type]);\n        }\n\n        return {\n            first: item.category,\n            second: item.title,\n            amount,\n            date: dayDate\n                ? format(new Date(dayDate), 'PP')\n                : '',\n        };\n    });\n}\n","import React from 'react';\n\nimport styles from './MonthTxList.module.scss';\nimport { Month } from '../models/month/month.class';\nimport { TxList } from './TxList';\nimport { DayDate } from '../models/common/date.types';\nimport format from 'date-fns/format';\n\ninterface IProps {\n    month: Month;\n}\n\nexport const MonthTxList = React.memo(({month}: IProps) => {\n    const days = month.days;\n\n    return (\n        <ul className={styles.days}>\n            {days.map(day => (\n                <li key={day.date} className={styles.day}>\n                    <div className={styles.title}>\n                        {formatDayDate(day.date)}\n                        {/*<div className={styles.txItem__first}>*/}\n                        {/*    {tx.first*/}\n                        {/*        ? tx.first*/}\n                        {/*        : <span className={styles.empty}>Без заголовка</span>*/}\n                        {/*    }*/}\n                        {/*</div>*/}\n                        {/*<div className={styles.txItem__second}>*/}\n                        {/*    {tx.second*/}\n                        {/*        ? tx.second*/}\n                        {/*        : <span className={styles.empty}>Без заголовка</span>*/}\n                        {/*    }*/}\n                        {/*</div>*/}\n                    </div>\n                    <TxList list={day.transactions} dayDate={day.date}/>\n                </li>\n            ))}\n        </ul>\n    );\n});\n\n\nfunction formatDayDate(date: DayDate): string {\n    return format(new Date(date), 'do LLLL');\n}\n","import { IMonthsState, MonthsMap } from '../atoms/months/months.types';\nimport { IMonthBrief } from '../models/month/month.types';\nimport React from 'react';\nimport { Link, paths } from '../routes';\nimport { MoneyView } from '../components/MoneyView';\nimport { MonthTxList } from './MonthTxList';\nimport { Account } from '../models/account/account.class';\nimport { UUID } from '../models/common/common.types';\nimport styles from './MonthViewWidget.module.scss';\nimport format from 'date-fns/format';\n\ninterface IProps {\n    months: MonthsMap;\n    account?: Account;\n    brief?: IMonthBrief;\n    prev?: IMonthBrief;\n    next?: IMonthBrief;\n}\n\nexport const MonthViewWidget = ({months, account, brief, prev, next}: IProps) => {\n    if (!brief)\n        return <div>No month</div>;\n\n    if (!months.has(brief.id)) {\n        return <div>Loading month</div>;\n    }\n\n    const month = months.get(brief.id);\n\n    if (!month)\n        return <div>Loading month</div>;\n\n    return (\n        <>\n            <div className={styles.head}>\n                <h3 className={styles.title}>{format(new Date(month.month), 'MMMM yyyy')}</h3>\n                <div className={styles.info}>\n                    {prev && <Link className={styles.prev}\n                                   to={paths.account.months(account.id, prev.month)}>\n                        <svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fill-rule=\"evenodd\"\n                             clip-rule=\"evenodd\">\n                            <path d=\"M20 .755l-14.374 11.245 14.374 11.219-.619.781-15.381-12 15.391-12 .609.755z\"/>\n                        </svg>\n                    </Link>}\n                    {next && <Link className={styles.next}\n                                   to={paths.account.months(account.id, next.month)}>\n                        <svg width=\"24\" height=\"24\" xmlns=\"http://www.w3.org/2000/svg\" fill-rule=\"evenodd\"\n                             clip-rule=\"evenodd\">\n                            <path d=\"M4 .755l14.374 11.245-14.374 11.219.619.781 15.381-12-15.391-12-.609.755z\"/>\n                        </svg>\n                    </Link>}\n                    <div className={styles.circle}>\n                        {/*<svg width=\"160\" height=\"160\">*/}\n                        {/*    <circle transform=\"rotate(-90)\" r=\"72\" cx=\"-80\" cy=\"80\"/>*/}\n                        {/*    <circle transform=\"rotate(-90)\" r=\"72\" cx=\"-80\" cy=\"80\"/>*/}\n                        {/*</svg>*/}\n                        <h4 className={styles.balance}><MoneyView money={month.summary.balance}/></h4>\n                        <div>+<MoneyView money={month.summary.income}/></div>\n                        <div>-<MoneyView money={month.summary.expense}/></div>\n                    </div>\n                </div>\n            </div>\n            <MonthTxList month={month}/>\n        </>\n    );\n};\n","import React from 'react';\n\nimport styles from './Header.module.scss';\n\ninterface IParams {\n    title: string;\n}\n\nexport const Header = ({title}: IParams) => {\n    return (\n        <header className={styles.header}>\n            <h1 className={styles.title}>{title}</h1>\n        </header>\n    );\n};\n","import React from 'react';\nimport { MoneyView } from '../components/MoneyView';\nimport { useAction, useAtom } from '@reatom/react';\nimport { Accounts } from '../atoms/accounts/accounts.atom';\nimport { useRouteMatch } from 'react-router';\nimport { MonthDate } from '../models/common/date.types';\nimport { Link } from 'react-router-dom';\nimport { MonthTxList } from '../widgets/MonthTxList';\nimport { Months } from '../atoms/months/months.atom';\nimport { Month } from '../models/month/month.class';\nimport { paths } from '../routes';\nimport { loadMonths } from '../atoms/months/months.actions';\nimport { IMonthBrief } from '../models/month/month.types';\nimport { useStore } from '../store/store';\nimport { UUID } from '../models/common/common.types';\nimport { MonthViewWidget } from '../widgets/MonthViewWidget';\nimport { Header } from '../widgets/Header';\n\nexport const AccountMonthsPage = () => {\n    const {params} = useRouteMatch<{ account: string, month?: MonthDate }>();\n    const account = useAtom(Accounts, ({accounts}) => accounts.get(params.account), [params.account]);\n    const months = useAtom(Months);\n\n    const loadMonth = useAction(id => id ? loadMonths([id]) : null, []);\n\n    const monthDate = params.month || account?.head.month || '';\n\n    if (!account)\n        return (\n            <div>No account</div>\n        );\n\n    if (!account.months.length)\n        return (\n            <div>No months in this account</div>\n        );\n\n    let monthIndex = account.months.findIndex(item => item.month === monthDate);\n\n    if (monthIndex === -1)\n        monthIndex = 0;\n\n    const monthBrief: IMonthBrief = account?.months[monthIndex];\n    const prevMonth = account.months[monthIndex + 1];\n    const nextMonth = account.months[monthIndex - 1];\n\n    if (monthBrief && !months.has(monthBrief.id))\n        loadMonth(monthBrief.id);\n    if (prevMonth && !months.has(prevMonth.id))\n        loadMonth(prevMonth.id);\n    if (nextMonth && !months.has(nextMonth.id))\n        loadMonth(nextMonth.id);\n\n    return (\n        <>\n            <Header title={`Account ${account.name}`}/>\n            <main>\n                <MonthViewWidget months={months}\n                                 account={account}\n                                 brief={monthBrief}\n                                 prev={prevMonth}\n                                 next={nextMonth}\n                />\n            </main>\n        </>\n    );\n};\n","export const baseUrl = '/finman';\n\nexport function addQueryString(params: Record<string, string>): string {\n    if (!params)\n        return '';\n    if (!Object.keys(params).length)\n        return '';\n\n    return '?' + new URLSearchParams(params).toString();\n}\n","import { RouteProps } from 'react-router';\nimport { AccountsPage } from '../pages/AccountsPage';\nimport { AccountPage } from '../pages/AccountPage';\nimport { AccountMonthsPage } from '../pages/AccountMonthsPage';\nimport { baseUrl } from './config';\n\nexport const account = {\n    list: () => `${baseUrl}/accounts`,\n    view: (account = ':account') => `${baseUrl}/account/${account}`,\n    monthsList: (account = ':account') => `${baseUrl}/account/${account}/months`,\n    months: (account = ':account', month = ':month') => `${baseUrl}/account/${account}/months/${month}`,\n};\n\nexport const accountsRoutes: RouteProps[] = [\n    {\n        path: account.list(),\n        exact: true,\n        component: AccountsPage,\n    },\n    {\n        path: account.view(),\n        exact: true,\n        component: AccountPage,\n    },\n    {\n        path: account.months(),\n        component: AccountMonthsPage,\n    },\n    {\n        path: account.monthsList(),\n        component: AccountMonthsPage,\n    },\n];\n","import React from 'react';\nimport { useAction, useAtom } from '@reatom/react';\nimport { MoneyView } from '../components/MoneyView';\n\nimport styles from './AccountsPage.module.scss';\nimport { Accounts } from '../atoms/accounts/accounts.atom';\nimport { useHistory } from 'react-router';\nimport { paths } from '../routes';\n\nexport const AccountsPage = () => {\n    const history = useHistory();\n    const accounts = useAtom(Accounts);\n    const list = Array.from(accounts.accounts.values());\n    const chooseAccountHandler = useAction(accountId => {\n        history.push(paths.account.view(accountId));\n    }, []);\n\n    function addTx() {\n        if (accounts.current)\n            history.push(paths.transactions.add({account: accounts.current.id}));\n    }\n\n    return (\n        <div>\n            Страница с информацией обо всех аккаунтах (кошельках)\n\n            {list.map(item => (\n                <div className={item === accounts.current ? styles.currentAccount : ''}\n                     key={item.id}\n                     onClick={() => chooseAccountHandler(item.id)}>\n                    <h3>{item.name}</h3>\n                    <h4><MoneyView money={item.balance}/></h4>\n                </div>\n            ))}\n\n            <button onClick={addTx}>Add</button>\n        </div>\n    );\n};\n","import React from 'react';\nimport styles from './AccountsPage.module.scss';\nimport { MoneyView } from '../components/MoneyView';\nimport { useAtom } from '@reatom/react';\nimport { Accounts } from '../atoms/accounts/accounts.atom';\nimport { useRouteMatch } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { paths } from '../routes';\n\nexport const AccountPage = () => {\n    const accounts = useAtom(Accounts);\n    const match = useRouteMatch<{ account: string }>();\n\n    const account = accounts.accounts.get(match.params.account);\n    if (!account)\n        return (\n            <div>No account</div>\n        );\n\n    return (\n        <div>\n            AccountMonthsPage\n            <div>\n                <h3>{account.name}</h3>\n                <h4><MoneyView money={account.balance}/></h4>\n                <div>+<MoneyView money={account.income}/></div>\n                <div>-<MoneyView money={account.expense}/></div>\n                <Link to={paths.account.monthsList(account.id)}>Show history</Link>\n            </div>\n        </div>\n    );\n};\n","import { declareAction } from '@reatom/core';\nimport { loadAccounts } from '../accounts/accounts.actions';\n\nconst NS = 'client';\n\nexport const setOnlineStatus = declareAction<any>(NS + ':setOnlineStatus');\nexport const refresh = declareAction(NS + ':refresh', (_, {dispatch}) => {\n    dispatch(loadAccounts());\n});\n","import { declareAtom } from '@reatom/core';\nimport { IClientState } from './client.types';\nimport { setOnlineStatus } from './client.actions';\n\nexport const Client = declareAtom<IClientState>(\n    ['client'],\n    {\n        online: false,\n    },\n    on => ({\n        online: [\n            on(setOnlineStatus, (state, online) => ({...state, online})),\n        ],\n    }),\n);\n","import { combine, createStore } from '@reatom/core';\nimport { connectReduxDevtools } from '@reatom/debug';\nimport { Client } from '../atoms/client/client.atom';\nimport { Accounts } from '../atoms/accounts/accounts.atom';\nimport { Months } from '../atoms/months/months.atom';\nimport { initIndexedDB } from './db';\n\nexport const store = createStore(combine({\n    Client,\n    Accounts,\n    Months,\n}));\n\nconnectReduxDevtools(store);\n\n// initIndexedDB(store);\n\nexport function useStore() {\n    return store;\n}\n","import { declareAction } from '@reatom/core';\nimport { IAddTransactionForm } from './transaction.types';\n\nconst NS = 'transaction';\n\nexport const addTransaction = declareAction<IAddTransactionForm>(NS + ':addTransaction');\n","import React from 'react';\n\nimport styles from './TransactionsPage.module.scss';\nimport { Header } from '../widgets/Header';\nimport { TxList } from '../widgets/TxList';\nimport { ITransaction } from '../models/transaction/transaction.types';\n\nconst transactions: ITransaction[] = [\n    {id: 1},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n] as any;\nexport const TransactionsPage = () => {\n    const month = '2020-05';\n\n\n    return (\n        <div className={styles.page}>\n            <Header title={`Transactions of ${month}`}/>\n            <main>\n                <div className={styles.filter}>\n                    <button className={styles.active}>Все</button>\n                    <button>Траты</button>\n                    <button>Приход</button>\n                </div>\n                <TxList list={transactions} dayDate=\"2020-05-05\"/>\n            </main>\n        </div>\n    );\n};\n","import { RouteProps } from 'react-router';\nimport { TransactionAddPage } from '../pages/TransactionAddPage';\nimport { TransactionsPage } from '../pages/TransactionsPage';\nimport { addQueryString, baseUrl } from './config';\nimport { UUID } from '../models/common/common.types';\n\nexport const transactions = {\n    add: (params?: {\n        account?: UUID;\n    }) => `${baseUrl}/transaction/add` + addQueryString(params),\n    list: () => `${baseUrl}/transactions`,\n};\n\nexport const transactionRoutes: RouteProps[] = [\n    {\n        path: transactions.add(),\n        component: TransactionAddPage,\n    },\n    {\n        path: transactions.list(),\n        component: TransactionsPage,\n    },\n];\n","import React, { FormEvent, useState } from 'react';\nimport { IAddTransactionForm, TransactionType } from '../models/transaction/transaction.types';\nimport { store } from '../store/store';\nimport { addTransaction } from '../models/transaction/transaction.actions';\nimport { useLocation } from 'react-router';\n\nexport const TransactionAddPage = () => {\n    const params = new URLSearchParams(useLocation().search);\n\n    const [amount, setAmount] = useState('123');\n    const [date, setDate] = useState('2020-06-12');\n    const [type, setType] = useState(TransactionType.Expense);\n    const [account, setAccount] = useState(params.get('account') || '');\n\n    const submitHandler = (event: FormEvent) => {\n        event.preventDefault();\n        const formData: IAddTransactionForm = {\n            account,\n            amount,\n            date,\n            category: '',\n            title: '',\n            type,\n        };\n        console.log(formData);\n        store.dispatch(addTransaction(formData));\n    };\n\n    const amountChangeHandler = (event) => {\n        setAmount(event.target.value);\n    };\n\n    const dateChangeHandler = (event) => {\n        setDate(event.target.value);\n    };\n\n    const typeChangeHandler = (event) => {\n        setType(+event.target.value);\n    };\n\n    const accountChangeHandler = (event) => {\n        setType(+event.target.value);\n    };\n\n    return (\n        <div>\n            add transaction\n            <form onSubmit={submitHandler}>\n                <div>\n                    Amount:\n                    <input type=\"number\" value={amount} onChange={amountChangeHandler}/>\n                </div>\n\n                <div>\n                    Date:\n                    <input type=\"date\" value={date} onChange={dateChangeHandler}\n                           list=\"datalist\"/>\n                    <datalist id=\"datalist\">\n                        <option value=\"2020-06-12\" label=\"Today\"/>\n                        <option value=\"2020-06-11\" label=\"Yesterday\"/>\n                    </datalist>\n                </div>\n\n                <div>\n                    Type:\n                    <input type=\"radio\" id=\"type-income\"\n                           onChange={typeChangeHandler}\n                           checked={type === TransactionType.Income}\n                           name=\"type\" value={TransactionType.Income}/>\n                    <label htmlFor=\"type-income\">Income</label>\n\n                    <input type=\"radio\" id=\"type-expense\"\n                           checked={type === TransactionType.Expense}\n                           onChange={typeChangeHandler}\n                           name=\"type\" value={TransactionType.Expense}/>\n                    <label htmlFor=\"type-expense\">Expense</label>\n                </div>\n\n                <div>\n                    Account:\n                    <input type=\"text\" value={account} onChange={accountChangeHandler}/>\n                </div>\n\n                <div>\n                    <button type=\"submit\">Add</button>\n                </div>\n            </form>\n            <pre>amount: {amount}</pre>\n            <pre>date: {date}</pre>\n            <pre>type: {type}</pre>\n        </div>\n    );\n};\n","import { RouteProps } from 'react-router';\nimport { accountsRoutes } from './accounts';\nimport { transactionRoutes } from './transactions';\n\nexport const routes: RouteProps[] = [\n    // {\n    //     path: '/finman/',\n    //     exact: true,\n    //     component: SubsetsPage,\n    // },\n    ...accountsRoutes,\n    ...transactionRoutes,\n];\n","import { account } from './accounts';\nimport { transactions } from './transactions';\nimport { baseUrl } from './config';\n\nexport * from './Link';\nexport * from './routes';\n\nexport const paths = {\n    account,\n    transactions,\n    home: () => `${baseUrl}/accounts`,\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { paths } from '../routes';\nimport styles from './NavBar.module.scss';\n\nexport const NavBar = () => {\n    return (\n        <nav className={styles.bottomNavigation}>\n            <ul>\n                <li>\n                    <Link to={paths.home()}>Home</Link>\n                </li>\n                <li>\n                    <Link to={paths.transactions.list}>Transactions</Link>\n                </li>\n            </ul>\n        </nav>\n    );\n};\n","export enum DBStatus {\n    Initializing,\n    Upgrading,\n    Ready,\n    Failed,\n}\n\nexport interface IScheme<T = any, K extends keyof T = any> {\n    collection: string;\n    dbVersion: number;\n    key: K;\n\n    upgrade?(objectStore: IDBObjectStore, oldVersion: number, newVersion: number): void;\n}\n\nexport type DBStatusListener = (status: DBStatus) => void;\n","export function eventLogger<T extends { addEventListener: Function }>(emitter: T, emitterName: string, eventName: string | string[]) {\n    if (Array.isArray(eventName))\n        eventName.forEach(name => eventLogger(emitter, emitterName, name));\n    else\n        emitter.addEventListener(eventName, event => {\n            console.log(`[eventLogger] Emitter: \"${emitterName}\", event \"${eventName}\":`, event);\n        });\n}\n","import { eventLogger } from './db.utils';\nimport { UUID } from '../models/common/common.types';\n\nexport class Collection<T = any> {\n    private readonly transaction: IDBTransaction;\n    private readonly storage: IDBObjectStore;\n\n    constructor(private db: IDBDatabase, private scheme: any) {\n        this.transaction = db.transaction(scheme.collection, 'readwrite');\n        eventLogger(\n            this.transaction,\n            'transaction',\n            [\n                'abort',\n                'complete',\n                'error',\n            ],\n        );\n        this.storage = this.transaction.objectStore(scheme.collection);\n    }\n\n    //\n    // public commit(): Promise<void> {\n    //     return new Promise<void>((resolve, reject) => {\n    //         // this.transaction.commit();\n    //     });\n    // }\n\n\n    // Returns an IDBRequest object, and, in a separate thread, creates a structured clone of the value, and stores the cloned value in the object store. This is for adding new records to an object store.\n    public add(value: T, key?: string): Promise<T> {\n        return new Promise((resolve, reject) => {\n\n        });\n        // return this.storage.add(value, key);\n    }\n\n    // Creates and immediately returns an IDBRequest object, and clears this object store in a separate thread. This is for deleting all current records out of an object store.\n    // IDBObjectStore.clear()\n    // Returns an IDBRequest object, and, in a separate thread, returns the total number of records that match the provided key or IDBKeyRange. If no arguments are provided, it returns the total number of records in the store.\n    // IDBObjectStore.count()\n    // Creates a new index during a version upgrade, returning a new IDBIndex object in the connected database.\n    // IDBObjectStore.createIndex()\n    // returns an IDBRequest object, and, in a separate thread, deletes the store object selected by the specified key. This is for deleting individual records out of an object store.\n    // IDBObjectStore.delete()\n    // Destroys the specified index in the connected database, used during a version upgrade.\n    // IDBObjectStore.deleteIndex()\n\n    /** Returns an IDBRequest object, and, in a separate thread, returns the store object store\n     *  selected by the specified key. This is for retrieving specific records from an object store.\n     *\n     *  *IDBObjectStore.get()*\n     */\n    public get(id: UUID): Promise<T> {\n        return new Promise((resolve, reject) => {\n            const request = this.storage.get(id);\n\n            eventLogger(request, 'request', [\n                'error',\n                'success',\n            ]);\n\n            request.onsuccess = (event: any) => resolve(event.target.result);\n            request.onerror = error => reject(error);\n        });\n    }\n\n    // Returns an IDBRequest object, and, in a separate thread retrieves and returns the record key for the object in the object stored matching the specified parameter.\n    // IDBObjectStore.getKey()\n\n    // Returns an IDBRequest object retrieves all objects in the object store matching the specified parameter or all objects in the store if no parameters are given.\n    public getAll(query?: string[], count?: number): Promise<T[]> {\n        if (Array.isArray(query))\n            return Promise.all(query.map(id => this.get(id)));\n\n        return new Promise((resolve, reject) => {\n            const request = this.storage.getAll(query);\n\n            eventLogger(request, 'request', [\n                'error',\n                'success',\n            ]);\n\n            request.onsuccess = (event: any) => resolve(event.target.result);\n            request.onerror = error => reject(error);\n        });\n    }\n\n\n    // Returns an IDBRequest object retrieves record keys for all objects in the object store matching the specified parameter or all objects in the store if no parameters are given.\n    // IDBObjectStore.getAllKeys()\n    // Opens an index from this object store after which it can, for example, be used to return a sequence of records sorted by that index using a cursor.\n    // IDBObjectStore.index()\n    // Returns an IDBRequest object, and, in a separate thread, returns a new IDBCursorWithValue object. Used for iterating through an object store by primary key with a cursor.\n    // IDBObjectStore.openCursor()\n    // Returns an IDBRequest object, and, in a separate thread, returns a new IDBCursor. Used for iterating through an object store with a key.\n    // IDBObjectStore.openKeyCursor()\n\n    /**\n     * Returns an IDBRequest object, and, in a separate thread, creates a structured clone\n     * of the value, and stores the cloned value in the object store. This is for updating\n     * existing records in an object store when the transaction's mode is readwrite.\n     *\n     * *IDBObjectStore.put()*\n     */\n    //\n    public update(value: T): Promise<T> {\n        return new Promise((resolve, reject) => {\n            const request = this.storage.put(value);\n\n            eventLogger(request, 'request', [\n                'error',\n                'success',\n            ]);\n\n            request.onsuccess = (event: any) => resolve(event.target.result);\n            request.onerror = error => reject(error);\n        });\n    }\n}\n","import { DBStatus, DBStatusListener, IScheme } from './db.types';\nimport { Collection } from './collection';\nimport { eventLogger } from './db.utils';\n\nexport class IndexedDB {\n    get status(): DBStatus {\n        return this._status;\n    }\n\n    private listeners: DBStatusListener[] = [];\n\n    private _status = DBStatus.Initializing;\n\n    private db: IDBDatabase | null = null;\n\n    constructor(dbName: string, public schemes: IScheme[]) {\n        if (!window.indexedDB)\n            throw new Error('IndexedDB not supported');\n\n        const version = Math.max(1, ...schemes.map(model => model.dbVersion));\n\n        console.log(`Start DB with version: ${version}, count of models: ${schemes.length}`);\n\n        this.openDB(dbName, version).then(\n            () => console.log('Successfully open DB'),\n            event => console.error('Failed to open DB', event),\n        );\n    }\n\n    public transaction<T>(scheme: IScheme<T>): Collection<T> {\n        if (this._status !== DBStatus.Ready)\n            throw new Error('Database not ready');\n\n        return this.getAccessor(scheme);\n    }\n\n    public addStatusListener(fn: DBStatusListener): void {\n        this.listeners.push(fn);\n    }\n\n    public removeStatusListener(fn: DBStatusListener): void {\n        this.listeners = this.listeners.filter(item => item !== fn);\n    }\n\n    private setStatus(status: DBStatus): void {\n        if (status === this._status)\n            return;\n        console.log(`Change DB status from \"${DBStatus[this._status]}\" to \"${DBStatus[status]}\"`);\n        this._status = status;\n        this.listeners.forEach(fn => fn(status));\n    }\n\n    private getAccessor(scheme: IScheme): Collection {\n        if (this.db)\n            return new Collection(this.db, scheme);\n        else\n            throw new Error('Cannot create accessor for closed database');\n    }\n\n    private openDB(dbName: string, version: number): Promise<void> {\n        this.setStatus(DBStatus.Initializing);\n        return new Promise(((resolve, reject) => {\n            const openRequest = window.indexedDB.open(dbName, version);\n            eventLogger(\n                openRequest,\n                'openRequest',\n                [\n                    'upgradeneeded',\n                    'blocked',\n                    'error',\n                    'success',\n                ],\n            );\n            openRequest.addEventListener('upgradeneeded', (event: any) => {\n                this.setStatus(DBStatus.Upgrading);\n                const oldVersion: number = event.oldVersion;\n                const newVersion: number = event.newVersion;\n                if (oldVersion)\n                    console.log(`Upgrade DB from version ${oldVersion}`);\n                else\n                    console.log('Initialize DB');\n\n                const transaction: IDBTransaction = this.db = event.target.transaction;\n                console.log(transaction);\n                const db: IDBDatabase = this.db = event.target.result;\n\n                console.log(Array.from(db.objectStoreNames));\n\n                this.schemes.forEach(scheme => {\n                    let objectStore: IDBObjectStore;\n                    try {\n                        objectStore = transaction.objectStore(scheme.collection);\n                    } catch (e) {\n                        console.warn(e);\n                        objectStore = db.createObjectStore(scheme.collection, {keyPath: scheme.key});\n                    }\n\n                    console.log(objectStore);\n                    if (scheme.upgrade) {\n                        scheme.upgrade(objectStore!, oldVersion, newVersion);\n                    }\n                });\n            });\n            openRequest.addEventListener('success', (event: any) => {\n                this.db = event.target.result;\n                this.setStatus(DBStatus.Ready);\n                resolve();\n            });\n            openRequest.addEventListener('error', (event: any) => {\n                console.log(event);\n                this.setStatus(DBStatus.Failed);\n                reject(event);\n            });\n        }));\n    }\n}\n","const DEFAULT_CURRENCY = 'RUB';\n\nexport interface ICurrency {\n    code: string;\n    symbol: string;\n    precision: number;\n}\n\nexport const currencies: { [key: string]: ICurrency } = {\n    RUB: {code: 'RUB', symbol: '₽', precision: 2},\n};\n\nexport class Money {\n    public readonly amount: string = '';\n\n    public static from(value: Money | string): Money {\n        if (typeof value === 'string')\n            return Money.fromJSON(value);\n        if (value instanceof Money)\n            return value.clone();\n        throw new Error('Can not convert invalid data to Money');\n    }\n\n    public static fromJSON(data: any): Money {\n        if (typeof data !== 'string')\n            throw new Error(`Amount \"${data}\" must be a string`);\n\n        let parts = data.trim().split(' ');\n        if (!parts || parts.length !== 2)\n            throw new Error(`Money \"${data}\" must have valid format`);\n\n        const amountText = parts[0];\n        const currencyName = parts[1].toUpperCase();\n\n        const currency = currencies[currencyName];\n        if (!currency)\n            throw new Error(`Unsupported currency \"${currencyName}\"`);\n\n        const units = +amountText;\n        if (Number.isNaN(units))\n            throw new Error(`Invalid amount \"${amountText}\" when parse \"${data}\"`);\n\n        const subunits = Math.round(units * 10 ** currency.precision);\n        const amount = (subunits / 10 ** currency.precision).toFixed(2);\n\n        return new Money(subunits, currency);\n    }\n\n    public static create(amount: string | number, currencyName: string): Money {\n        if (typeof currencyName !== 'string')\n            throw new Error(`Invalid currency \"${currencyName}\"`);\n        currencyName = currencyName.toUpperCase();\n\n        if (typeof amount === 'string') {\n            if (!amount || Number.isNaN(+amount))\n                throw new Error(`Amount must be valid number but received \"${amount}\"`);\n\n            amount = +amount;\n        }\n\n        const currency = currencies[currencyName];\n        if (!currency)\n            throw new Error(`Unsupported currency \"${currencyName}\"`);\n\n        const units = +amount;\n        if (Number.isNaN(units))\n            throw new Error(`Invalid amount \"${amount}\"`);\n\n        const subunits = Math.round(units * 10 ** currency.precision);\n        return new Money(subunits, currency);\n    }\n\n    public static readonly empty = Money.create(0, DEFAULT_CURRENCY);\n\n    private constructor(public readonly subunits: number,\n                        public readonly currency: ICurrency) {\n        this.amount = (subunits / 10 ** currency.precision).toFixed(2);\n    }\n\n    public clone(): Money {\n        return new Money(this.subunits, this.currency);\n    }\n\n    public toString() {\n        if (this.subunits)\n            return this.amount + ' ' + this.currency.symbol;\n        else\n            return '0 ' + this.currency.symbol;\n    }\n\n    public toJSON() {\n        if (this.subunits)\n            return this.amount + ' ' + this.currency.code;\n        else\n            return '0 ' + this.currency.code;\n    }\n\n    public add(money: Money): Money {\n        if (this.currency.code !== money.currency.code)\n            throw new Error(`Can not do any operations with different currencies`);\n        return new Money(this.subunits + money.subunits, this.currency);\n    }\n\n    public sub(money: Money): Money {\n        if (this.currency.code !== money.currency.code)\n            throw new Error(`Can not do any operations with different currencies`);\n        return new Money(this.subunits - money.subunits, this.currency);\n    }\n\n    public equal(money: Money): boolean {\n        if (this.currency.code !== money.currency.code)\n            return false;\n        return this.subunits === money.subunits;\n    }\n\n    public getEntire(): string {\n        return Math.floor(this.subunits / 10 ** this.currency.precision).toString();\n    }\n\n    public getFractional(): string {\n        return (this.subunits / 10 ** this.currency.precision)\n            .toFixed(this.currency.precision)\n            .substr(-this.currency.precision);\n    }\n\n    public getSymbol(): string {\n        return this.currency.symbol;\n    }\n\n    public negative(): Money {\n        return new Money(-this.subunits, this.currency);\n    }\n}\n","import { HASH, IExtendSummary, ISummary, UUID } from '../common/common.types';\nimport { IDay } from '../day/day.class';\nimport { MonthDate } from '../common/date.types';\n\nexport enum SyncStatus {\n    NoSynced,\n    Prepared,\n    Syncing,\n    FullySynced,\n    Fixed,\n}\n\nexport interface IMonthBrief {\n    id: UUID;\n    month: MonthDate;\n    summary: IExtendSummary;\n    prevMonths: UUID[];\n    prevVersions: UUID[];\n    dataHash: string;\n}\n\nexport interface IMonth extends IMonthBrief {\n    syncStatus: SyncStatus;\n    timestamp: number;\n    account: UUID;\n    days: IDay[];\n}\n","import { Money } from '../money/money.class';\n\nexport type UUID = string;\nexport type HASH = string;\n\nexport interface ISummary {\n    balance: Money;\n    income: Money;\n    expense: Money;\n}\n\nexport interface IExtendSummary extends ISummary {\n    balanceOnStart: Money;\n    balanceOnEnd: Money;\n}\n\nexport const EmptySummary: ISummary = {\n    balance: Money.empty,\n    income: Money.empty,\n    expense: Money.empty,\n};\n\nexport const EmptyExtendSummary: IExtendSummary = {\n    ...EmptySummary,\n    balanceOnStart: Money.empty,\n    balanceOnEnd: Money.empty,\n};\n\nObject.freeze(EmptySummary);\nObject.freeze(EmptyExtendSummary);\n","import { ITransaction, TransactionType } from './transaction.types';\nimport { IExtendSummary, ISummary } from '../common/common.types';\nimport { Money } from '../money/money.class';\n\nexport const EMPTY_SUMMARY: ISummary = {\n    income: Money.empty,\n    expense: Money.empty,\n    balance: Money.empty,\n};\n\nexport function calculateSummary(transactions: ITransaction[]): ISummary {\n    let [expense, income] = transactions.reduce(\n        ([expense, income], tx) => {\n            switch (tx.type) {\n                case TransactionType.Removed:\n                    return [expense, income];\n                case TransactionType.Income:\n                    return [\n                        expense,\n                        income.add(tx.amount),\n                    ];\n                case TransactionType.Expense:\n                    return [\n                        expense.add(tx.amount),\n                        income,\n                    ];\n                default:\n                    throw new Error(`Can't process type \"${TransactionType[tx.type]}\"`);\n            }\n        },\n        [Money.empty, Money.empty],\n    );\n\n    const balance = income.sub(expense);\n\n    return {\n        balance,\n        expense,\n        income,\n    };\n}\n\nexport function calculateExtendSummary(transactions: ITransaction[]): IExtendSummary {\n    let balanceOnStart = Money.empty;\n    let balanceOnEnd = Money.empty;\n\n    const summary = calculateSummary(transactions);\n\n    return {\n        ...summary,\n        balanceOnStart,\n        balanceOnEnd: balanceOnStart.add(summary.balance),\n    };\n}\n\nexport function addSummary(base: ISummary, add: ISummary): ISummary {\n    const balance = base.balance.add(add.balance);\n    const expense = base.expense.add(add.expense);\n    const income = base.income.add(add.income);\n    if (!income.sub(expense).equal(balance)) {\n        if (!checkSummary(base))\n            throw new Error(`\"Base\" summary invalid`);\n        if (!checkSummary(add))\n            throw new Error(`\"Add\" summary invalid`);\n        throw new Error(`Incorrect balance`);\n    }\n    return {\n        balance,\n        expense,\n        income,\n    };\n}\n\nexport function addExtendSummary(base: IExtendSummary, add: ISummary): IExtendSummary {\n    const summary = addSummary(base, add);\n    const balanceOnStart = base.balanceOnStart;\n    const balanceOnEnd = base.balanceOnEnd.add(add.balance);\n    if (!summary.income.sub(summary.expense).equal(summary.balance)) {\n        if (!checkExtendSummary(base))\n            throw new Error(`\"Base\" summary invalid`);\n        if (!checkSummary(add))\n            throw new Error(`\"Add\" summary invalid`);\n        throw new Error(`Incorrect balance`);\n    }\n    return {\n        ...summary,\n        balanceOnStart,\n        balanceOnEnd,\n    };\n}\n\nexport function checkSummary(summary: ISummary): boolean {\n    const balance = summary.income.sub(summary.expense);\n    return balance.equal(summary.balance);\n}\n\nexport function checkExtendSummary(summary: IExtendSummary): boolean {\n    if (!checkSummary(summary))\n        return false;\n    const balance = summary.income.sub(summary.expense);\n    const balanceOnEnd = summary.balanceOnStart.add(balance);\n    return balanceOnEnd.equal(summary.balanceOnEnd);\n}\n","import { DayDate, MonthDate } from './date.types';\n\nexport function parseMonthDate(value: MonthDate): Date {\n    const match: RegExpMatchArray | null = value.match(/^(\\d{4})-(\\d{2})$/);\n    if (!match)\n        throw new Error(`Invalid MonthDate \"${value}\"`);\n\n    const year = +match[1];\n    const month = +match[2] - 1;\n    const date = new Date(year, month, 1, 12, 0, 0);\n\n    if (date.getFullYear() !== year)\n        throw new Error(`Invalid year in \"${value}\"`);\n    if (date.getMonth() !== month)\n        throw new Error(`Invalid month in \"${value}\"`);\n\n    return date;\n}\n\nexport function parseDayDate(value: DayDate): Date {\n    const match: RegExpMatchArray | null = value.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);\n    if (!match)\n        throw new Error(`Invalid DayDate \"${value}\"`);\n\n    const year = +match[1];\n    const month = +match[2] - 1;\n    const day = +match[3];\n    const date = new Date(year, month, day, 12, 0, 0);\n\n    if (date.getFullYear() !== year)\n        throw new Error(`Invalid year in \"${value}\"`);\n    if (date.getMonth() !== month)\n        throw new Error(`Invalid month in \"${value}\"`);\n    if (date.getDate() !== day)\n        throw new Error(`Invalid date in \"${value}\"`);\n\n    return date;\n}\n\nexport function dayDateToMonth(day: DayDate): MonthDate {\n    return day.split('-', 2).join('-');\n}\n","import { v1 as uuidGenerator } from 'uuid';\nimport { ITransaction, TransactionType } from './transaction.types';\nimport { UUID } from '../common/common.types';\nimport { Money } from '../money/money.class';\n\nexport class Transaction implements ITransaction {\n    public id: UUID = '';\n    public amount: Money = Money.empty;\n    public type: TransactionType = TransactionType.Removed;\n    public category: UUID | '' = '';\n    public title: string | '' = '';\n    public createdAt: number = 0;\n    public updatedAt: number = 0;\n\n    public static createWithID(id: UUID, type?: TransactionType,\n                               amount?: Money): Transaction;\n    public static createWithID(id: UUID, type: TransactionType,\n                               amount: string | number,\n                               currencyName: string): Transaction;\n    public static createWithID(id: UUID, type: TransactionType = TransactionType.Removed,\n                               amount?: string | number | Money,\n                               currencyName?: string): Transaction {\n        const tx = new Transaction({\n            id,\n            amount: Money.empty,\n            type,\n            category: '',\n            title: '',\n            createdAt: 0,\n            updatedAt: 0,\n        });\n\n        if (amount)\n            return tx.setAmount(amount as any, currencyName as any);\n        else\n            return tx;\n    }\n\n    public static create(type?: TransactionType,\n                         amount?: Money): Transaction;\n    public static create(type: TransactionType,\n                         amount: string | number,\n                         currencyName: string): Transaction;\n    public static create(type: TransactionType = TransactionType.Removed,\n                         amount?: string | number | Money,\n                         currencyName?: string): Transaction {\n        const id = uuidGenerator();\n\n        const tx = new Transaction({\n            id,\n            amount: Money.empty,\n            type,\n            category: '',\n            title: '',\n            createdAt: 0,\n            updatedAt: 0,\n        });\n\n        if (amount)\n            return tx.setAmount(amount as any, currencyName as any);\n        else\n            return tx;\n    }\n\n    public static fromJSON(data: ITransaction): Transaction { // TODO больше валидации\n        return new Transaction({\n            id: data.id,\n            amount: Money.from(data.amount),\n            type: data.type,\n            category: data.category,\n            title: data.title,\n            createdAt: data.createdAt,\n            updatedAt: data.updatedAt,\n        });\n    }\n\n    private constructor(data: ITransaction) {\n        Object.assign(this, data);\n    }\n\n    public toJSON(): object {\n        return {\n            id: this.id,\n            amount: this.amount.toJSON(),\n            type: this.type,\n            category: this.category,\n            title: this.title,\n            createdAt: this.createdAt,\n            updatedAt: this.updatedAt,\n        };\n    }\n\n    public setAmount(money: Money): Transaction;\n    public setAmount(amount: string | number, currencyName: string): Transaction;\n    public setAmount(amount: string | number | Money, currencyName?: string): Transaction {\n        let money: Money;\n        if ((typeof amount === 'string' || typeof amount === 'number') && typeof currencyName === 'string')\n            money = Money.create(amount, currencyName);\n        else\n            money = Money.from(amount as (string | Money));\n\n        return new Transaction({\n            ...this,\n            amount: money,\n        });\n    }\n\n    public setType(type: TransactionType): Transaction {\n        return new Transaction({\n            ...this,\n            type,\n        });\n    }\n\n    public setCategory(category: UUID | ''): Transaction {\n        return new Transaction({\n            ...this,\n            category,\n        });\n    }\n\n    public setTitle(title: string | ''): Transaction {\n        return new Transaction({\n            ...this,\n            title,\n        });\n    }\n\n    public setCreatedAt(createdAt: number): Transaction {\n        return new Transaction({\n            ...this,\n            createdAt,\n        });\n    }\n\n    public setUpdatedAt(updatedAt: number): Transaction {\n        return new Transaction({\n            ...this,\n            updatedAt,\n        });\n    }\n}\n","import { EmptySummary, ISummary } from '../common/common.types';\nimport { ITransaction } from '../transaction/transaction.types';\nimport { calculateSummary } from '../transaction/transactions.utils';\nimport { DayDate } from '../common/date.types';\nimport { parseDayDate } from '../common/date.utils';\nimport { Money } from '../money/money.class';\nimport { Transaction } from '../transaction/transaction.class';\n\nexport interface IDay {\n    date: DayDate;\n    summary: ISummary;\n    transactions: ITransaction[];\n}\n\nexport class Day implements IDay {\n    public readonly date: DayDate = '';\n    public readonly dateTime: Date = new Date();\n    public readonly summary: ISummary = EmptySummary;\n    public readonly transactions: Transaction[] = [];\n\n    public static create(date: DayDate): Day {\n        return new Day({date});\n    }\n\n    public static fromJSON(value: any): Day {\n        return new Day({\n            date: value.date,\n            summary: {\n                balance: Money.fromJSON(value.summary.balance),\n                income: Money.fromJSON(value.summary.income),\n                expense: Money.fromJSON(value.summary.expense),\n            },\n            transactions: value.transactions.map(Transaction.fromJSON),\n        });\n    }\n\n    protected constructor(data: Partial<Day>) {\n        Object.assign(this, data);\n        this.dateTime = parseDayDate(this.date);\n    }\n\n    public toJSON(): any {\n        return {\n            date: this.date,\n            summary: {\n                balance: this.summary.balance.toJSON(),\n                income: this.summary.income.toJSON(),\n                expense: this.summary.expense.toJSON(),\n            },\n            transactions: this.transactions.map(tx => tx.toJSON()),\n        };\n    }\n\n    public addTransaction(tx: ITransaction): Day {\n        const transactions: ITransaction[] = [\n            ...this.transactions,\n            tx,\n        ];\n\n        const summary: ISummary = calculateSummary(transactions);\n\n        return new Day({\n            ...this,\n            summary,\n            transactions,\n        });\n    }\n}\n","import sha1 from 'crypto-js/sha1';\nimport { EmptyExtendSummary, EmptySummary, IExtendSummary, UUID } from '../common/common.types';\nimport { IMonth, IMonthBrief, SyncStatus } from './month.types';\nimport { Day, IDay } from '../day/day.class';\nimport { getDaysInMonth } from 'date-fns';\nimport { parseMonthDate } from '../common/date.utils';\nimport { DayDate, MonthDate } from '../common/date.types';\nimport { addSummary } from '../transaction/transactions.utils';\nimport { Money } from '../money/money.class';\n\n/**\n * ID является хешем от данных, при любом изменении создается новый экземпляр с новым ID\n * Класс гарантирует совпадение данных при совпадении ID\n */\nexport class Month implements IMonth {\n    public readonly id: UUID = '';\n    public readonly version: number = 1;\n    public readonly account: UUID = '';\n    public readonly month: MonthDate = '';\n    public readonly syncStatus: SyncStatus = SyncStatus.NoSynced;\n    public readonly prevMonths: UUID[] = [];\n    public readonly prevVersions: UUID[] = [];\n    public readonly dataHash: string = '';\n    public readonly timestamp: number = 0;\n    public readonly updatedAt: Date = new Date(0);\n    public readonly summary: IExtendSummary = EmptyExtendSummary;\n    public readonly days: Day[] = [];\n    public readonly daysInMonth: number = 0;\n\n    /**\n     * @param account\n     * @param month\n     * @param timestamp\n     */\n    public static createFirstBlock(account: UUID, month: MonthDate, timestamp: number): Month {\n        const daysInMonth = getDaysInMonth(parseMonthDate(month));\n\n        return new Month({\n            timestamp,\n            account,\n            month,\n            daysInMonth,\n            days: [],\n            syncStatus: SyncStatus.Fixed,\n        });\n    }\n\n    public static generateID(month: Month, dataHash?: string): string {\n        if (month.version !== 1)\n            throw new Error(`Version ${month.version} not supported`);\n\n        const data = {\n            version: month.version,\n            account: month.account,\n            prevMonths: month.prevMonths,\n            prevVersions: month.prevVersions,\n            dataHash: dataHash || month.getDataHash(),\n        };\n\n        const hash = sha1(JSON.stringify(data)).toString();\n\n        const date = parseMonthDate(month.month);\n        const year = date.getFullYear() - 1970;\n        const monthID = (year * 12 + date.getMonth()).toString(16).padStart(3, '0');\n\n        const ts = (month.timestamp / 1000).toString(16)\n                                           .substr(0, 11)\n                                           .replace('.', '');\n\n        let id = `${monthID}${ts}${hash}`.substr(0, 32);\n\n        id = [\n            id.substr(0, 8),\n            id.substr(8, 4),\n            id.substr(12, 4),\n            id.substr(16, 4),\n            id.substr(20, 12),\n        ].join('-');\n\n        return id;\n    }\n\n    /**\n     * Создание мердж блока\n     *\n     * @param blocks Предыдущие блоки цепочки\n     * @param revisions Предыдущие версии блока\n     */\n    public static merge(blocks: Month[], revisions: Month[]): Month {\n        // отсортировать по алфавиту\n        // проверить sync статус\n\n        throw new Error();\n    }\n\n    public static getBrief(month: IMonthBrief): IMonthBrief {\n        return {\n            id: month.id,\n            month: month.month,\n            summary: month.summary,\n            prevMonths: month.prevMonths,\n            prevVersions: month.prevVersions,\n            dataHash: month.dataHash,\n        };\n    }\n\n    public static fromJSON(value: any): Month {\n        return new Month({\n            id: value.id,\n            version: value.version,\n            account: value.account,\n            month: value.month,\n            syncStatus: value.syncStatus,\n            prevMonths: value.prevMonths,\n            prevVersions: value.prevVersions,\n            dataHash: value.dataHash,\n            timestamp: value.timestamp,\n            updatedAt: value.updatedAt,\n            daysInMonth: value.daysInMonth,\n            summary: {\n                balance: Money.fromJSON(value.summary.balance),\n                income: Money.fromJSON(value.summary.income),\n                expense: Money.fromJSON(value.summary.expense),\n                balanceOnStart: Money.fromJSON(value.summary.balanceOnStart),\n                balanceOnEnd: Money.fromJSON(value.summary.balanceOnEnd),\n            },\n            days: value.days.map(Day.fromJSON),\n        });\n    }\n\n    public toJSON(): any {\n        return {\n            id: this.id,\n            version: this.version,\n            account: this.account,\n            month: this.month,\n            syncStatus: this.syncStatus,\n            prevMonths: this.prevMonths,\n            prevVersions: this.prevVersions,\n            dataHash: this.dataHash,\n            timestamp: this.timestamp,\n            updatedAt: this.updatedAt,\n            daysInMonth: this.daysInMonth,\n            summary: {\n                balance: this.summary.balance.toJSON(),\n                income: this.summary.income.toJSON(),\n                expense: this.summary.expense.toJSON(),\n                balanceOnStart: this.summary.balanceOnStart.toJSON(),\n                balanceOnEnd: this.summary.balanceOnEnd.toJSON(),\n            },\n            days: this.days.map(day => day.toJSON()),\n        };\n    }\n\n    protected constructor(value: Partial<Month>) { // FIXME use all fields of Month\n        Object.assign(this, value);\n        this.dataHash = this.getDataHash();\n        this.id = Month.generateID(this, this.dataHash);\n    }\n\n    public getBrief(): IMonthBrief {\n        return Month.getBrief(this);\n    }\n\n    public getDataHash(): string {\n        if (!this.days.length)\n            return '0000000000000000000000000000000000000000';\n\n        const data = {\n            days: this.days!.map(day => day.toJSON()),\n        };\n        return sha1(JSON.stringify(data)).toString();\n    }\n\n    public changeSyncStatus(syncStatus: SyncStatus): Month {\n        if (syncStatus === this.syncStatus)\n            return this;\n\n        switch (this.syncStatus) {\n            case SyncStatus.NoSynced:\n                if (syncStatus === SyncStatus.Prepared)\n                    return new Month({...this, syncStatus});\n                break;\n            case SyncStatus.Prepared:\n                if (syncStatus === SyncStatus.Syncing)\n                    return new Month({...this, syncStatus});\n                break;\n            case SyncStatus.Syncing:\n                if (syncStatus === SyncStatus.FullySynced)\n                    return new Month({...this, syncStatus});\n                break;\n            case SyncStatus.FullySynced:\n        }\n\n        throw new Error(`Can not change sync status from \"${SyncStatus[this.syncStatus]}\" to \"${SyncStatus[syncStatus]}\"`);\n    }\n\n    public createDay(date: number | DayDate): Day {\n        if (typeof date === 'number')\n            return Day.create(this.createDayDate(date));\n        else if (date.substr(0, 7) === this.month)\n            return Day.create(date);\n        else\n            throw new Error(`Date \"${date}\" not of month \"${this.month}\"`);\n    }\n\n    public createDayDate(day: number): string {\n        return this.month + '-' + day.toString().padStart(2, '0');\n    }\n\n    public createNextBlock(month: MonthDate, timestamp: number): Month {\n        const daysInMonth = getDaysInMonth(parseMonthDate(month));\n\n        const summary: IExtendSummary = {\n            balanceOnStart: this.summary.balanceOnEnd,\n            income: Money.empty,\n            expense: Money.empty,\n            balanceOnEnd: this.summary.balanceOnEnd,\n            balance: Money.empty,\n        };\n\n        return new Month({\n            account: this.account,\n            month,\n            prevMonths: [this.id],\n            prevVersions: [],\n            timestamp,\n            // updatedAt: timestamp, // TODO\n            summary,\n            days: [],\n            daysInMonth,\n            syncStatus: SyncStatus.Fixed,\n        });\n    }\n\n    public isDateOfMonth(date: DayDate): boolean {\n        return date.substr(0, 7) === this.month;\n    }\n\n    public recalculateWithNewStartBalance(startBalance: Money): Month {\n        return new Month({\n            ...this,\n            summary: calculateSummaryFromStartBalance(startBalance, this.days),\n        });\n    }\n\n    public updatePrevMonths(prevMonths: IMonthBrief[], timestamp: number): Month {\n        if (prevMonths.length !== 1)\n            throw new Error(`Sorry, can not process not one prevMonths`);\n\n        if (prevMonths[0].month >= this.month)\n            throw new Error(`All prevMonths must be earlier then updating month`);\n\n        if (prevMonths.length === this.prevMonths.length\n            && prevMonths.every((item, index) => this.prevMonths[index] === item.id))\n            return this;\n\n        return new Month({\n            ...this,\n            timestamp,\n            prevMonths: prevMonths.map(item => item.id),\n            prevVersions: this.syncStatus\n                ? this.id\n                    ? [this.id]\n                    : []\n                : this.prevVersions || [],\n            summary: calculateSummaryFromStartBalance(Money.from(prevMonths[0].summary.balanceOnEnd), this.days),\n        });\n    }\n\n    public getDay(dayDate: DayDate): Day {\n        const day = this.days.find(item => item.date === dayDate);\n        return day || this.createDay(dayDate);\n    }\n\n    public updateDay(newDay: Day): Month {\n        if (!(newDay instanceof Day))\n            throw new Error(`Cannot update month, newDay must be instance of Day`);\n\n        if (!this.isDateOfMonth(newDay.date))\n            throw new Error(`Day \"${newDay.date}\" not of month \"${this.month}\"`);\n\n        const days = this.days.slice();\n        const dayIndex = this.days.findIndex(item => item.date === newDay.date);\n        if (dayIndex === -1) {\n            days.push(newDay);\n            days.sort((a, b) => a.date > b.date ? 1 : -1);\n        } else {\n            days.splice(dayIndex, 1, newDay);\n        }\n\n        const summary = calculateSummaryFromStartBalance(this.summary.balanceOnStart, days);\n\n        return new Month({\n            ...this,\n            syncStatus: SyncStatus.NoSynced,\n            days,\n            summary,\n            prevVersions: this.syncStatus\n                ? this.id\n                    ? [this.id]\n                    : []\n                : this.prevVersions || [],\n        });\n    }\n}\n\nfunction calculateSummaryFromStartBalance(startBalance: Money, days: IDay[]): IExtendSummary {\n    const baseSummary = days.reduce(\n        (acc, day) => addSummary(acc, day.summary),\n        EmptySummary,\n    );\n\n    return {\n        ...baseSummary,\n        balanceOnStart: startBalance,\n        balanceOnEnd: startBalance.add(baseSummary.balance),\n    };\n}\n","import { ISubset } from './subset.types';\nimport { UUID } from '../common/common.types';\nimport { Money } from '../money/money.class';\nimport { IMonthBrief } from '../month/month.types';\nimport { v1 } from 'uuid';\nimport { Month } from '../month/month.class';\n\nexport class Subset implements ISubset {\n    public id: UUID = '';\n    public name: string = '';\n    public balance: Money = Money.empty;\n    public months: IMonthBrief[] = [];\n    public head: IMonthBrief = null;\n    public loaded = false;\n\n    private constructor(subset: Partial<Subset>) {\n        Object.assign(this, subset);\n\n        const month = Month.createFirstBlock('123', '2020-10', 123151213235);\n    }\n\n    public static create(name: string): Subset {\n        const id = v1();\n        return new Subset({\n            id,\n            name,\n        });\n    }\n\n    public static fromJSON(data: ISubset): Subset {\n        return new Subset({\n            id: data.id,\n            name: data.name,\n            balance: Money.from(data.balance),\n        });\n    }\n\n    public toJSON() {\n        return {\n            id: this.id,\n            name: this.name,\n            balance: this.balance.toJSON(),\n        };\n    }\n}\n","import { Subset } from './subset.class';\nimport { IScheme } from '../../indexed-db';\n\nexport const SubsetScheme: IScheme<Subset> = {\n    collection: 'subsets',\n    dbVersion: 1,\n    key: 'id',\n    upgrade(objectStore, oldVersion, newVersion): void {\n        console.log('update subsets from ', oldVersion, newVersion);\n\n        const defaultSubset = Subset.create('Default');\n\n        objectStore.add(defaultSubset.toJSON());\n    },\n};\n","import { IMonthBrief } from '../month/month.types';\nimport { Month } from '../month/month.class';\nimport { UUID } from '../common/common.types';\n\n/**\n * Обновление цепочки\n * @param head Новая голова\n * @param additions Обновленные звенья\n * @param old Старая цепочка\n */\nexport function updateMonthChain(head: IMonthBrief | Month,\n                                 additions: ReadonlyArray<IMonthBrief | Month>,\n                                 old: ReadonlyArray<IMonthBrief>): ReadonlyArray<IMonthBrief> {\n    head = Month.getBrief(head);\n\n    additions = additions.map(Month.getBrief);\n\n    old = old.map(Month.getBrief);\n\n    const {chain, completed} = findChain(head, additions);\n\n    // console.log(completed, chain.map(item => item.month + ' ' + item.id), old.length);\n\n    if (old.length === 0)\n        if (completed)\n            return chain;\n        else\n            throw new RequiredMonthsError(...chain.pop()!.prevMonths);\n\n    if (completed) {\n        if (!isVersionOfMonth(chain[chain.length - 1], old[old.length - 1], additions))\n            throw new CanNotFastForwardMonthError(old, chain);\n    } else {\n        const first = chain[chain.length - 1];\n\n        const preFirstID = first.prevMonths[0];\n\n        const preFirstIndex = old.findIndex(item => item.id === preFirstID);\n\n        console.log('completed', completed);\n        console.log('preFirstIndex', preFirstIndex);\n\n        console.log('head', [head.month, head.id, head.prevMonths, head.prevVersions].join(' '));\n        console.log('adds');\n        console.log(additions.map(item => [item.month, item.id, item.prevMonths, item.prevVersions].join(' ')));\n        console.log('old chain');\n        console.log(old.map(item => [item.month, item.id, item.prevMonths, item.prevVersions].join(' ')));\n\n        if (preFirstIndex === -1)\n            throw new RequiredMonthsError(preFirstID);\n    }\n\n    const monthsNumbersSet = new Set();\n    // for (let i = 0; i < preFirstIndex; i++)\n    //     monthsNumbersSet.add(old[i].month);\n    old.forEach(item => monthsNumbersSet.add(item.month));\n\n    chain.forEach(item => monthsNumbersSet.add(item.month));\n\n    const monthsNumbers = Array.from(monthsNumbersSet.keys());\n    monthsNumbers.sort();\n\n    const table = monthsNumbers.map(month => {\n        const element = chain.find(item => item.month === month);\n        const oldEl = old.find(item => item.month === month);\n\n        const check = element\n            ? isVersionOfMonth(element, oldEl, additions)\n            : null;\n\n        if (check === false)\n            throw new CanNotFastForwardMonthError(old, chain);\n\n        return {\n            month,\n            oldEl,\n            element,\n            check,\n        };\n    });\n\n    console.log('table');\n    console.table(table);\n\n    table.reverse();\n\n    const newChain = table.map(item => item.element || item.oldEl!);\n\n    checkChain(newChain);\n\n    if (newChain[0]!.id !== head.id)\n        throw new Error('Invalid Head month');\n\n    return newChain;\n}\n\n/**\n * Проверяет является ли element версией oldEl\n * Так же вернет true если element измененная версия oldEl\n * @param element Проверяемый элемент\n * @param oldEl Предполагаемые предок\n * @param additions Дополнительные блоки\n */\nexport function isVersionOfMonth(element: IMonthBrief, oldEl: IMonthBrief | undefined, additions: ReadonlyArray<IMonthBrief> = []): boolean {\n    if (!oldEl)\n        return true;\n\n    if (element.month !== oldEl.month)\n        return false;\n\n    const items = [oldEl, ...additions];\n\n    if (element.prevVersions.every((id, index) => oldEl.prevVersions[index] === id))\n        return true;\n\n    for (; element.id !== oldEl.id;) {\n        if (element.prevVersions.length === 0)\n            return false;\n\n        if (element.prevVersions.length > 1)\n            throw new Error('Я не умею во много предыдущих месяцев');\n\n        const nextId = element.prevVersions[0];\n\n        const next = items.find(item => item.id === nextId);\n\n        if (next)\n            element = next;\n        else\n            throw new RequiredMonthsError(nextId);\n    }\n\n    return true;\n}\n\nexport function findChain(head: IMonthBrief, items: ReadonlyArray<IMonthBrief>): {\n    completed: boolean,\n    chain: IMonthBrief[],\n} {\n    const chain: IMonthBrief[] = [];\n\n    let lastBlock: IMonthBrief | undefined = head;\n    do {\n        chain.push(lastBlock);\n\n        if (lastBlock.prevMonths.length === 0)\n            return {\n                completed: true,\n                chain,\n            };\n\n        if (lastBlock.prevMonths.length !== 1)\n            throw new Error(`Can not process merged month ${lastBlock.id} (${lastBlock.month}): more then 1 prevMonths`);\n        if (lastBlock.prevVersions.length > 1)\n            throw new Error(`Can not process merged month ${lastBlock.id} (${lastBlock.month}): more then 1 prevVersions`);\n\n        const nextID = lastBlock.prevMonths[0];\n        lastBlock = items.find(item => item.id === nextID);\n\n        if (!lastBlock) {\n            return {\n                completed: false,\n                chain,\n            };\n        }\n    } while (true);\n}\n\nexport function checkChain(chain: ReadonlyArray<IMonthBrief>): boolean {\n    if (chain.length === 0) return false;\n\n    console.log('check chain');\n    console.table(chain);\n\n    for (let i = 0; i < chain.length - 1; i++) {\n        const current = chain[i];\n        const next = chain[i + 1];\n        if (next.month >= current.month)\n            throw new MonthChainError(`month must be less then ${current.month}`, chain, next);\n\n        if (!current.prevMonths.length)\n            throw new MonthChainError(`unexpected end of chain`, chain, current);\n\n        if (current.prevMonths.length > 1)\n            throw new MonthChainError(`can not process month with not 1 prevMonths`, chain, current);\n\n        if (current.prevMonths[0] !== next.id)\n            throw new MonthChainError('invalid prevMonth', chain, current);\n    }\n\n    // let lastBlock: IMonthBrief | undefined = head;\n    // do {\n    //     chain.push(lastBlock);\n    //\n    //     if (lastBlock.prevMonths.length === 0)\n    //         return {\n    //             completed: true,\n    //             chain,\n    //         };\n    //\n    //     if (lastBlock.prevMonths.length !== 1)\n    //         throw new Error(`Can not process merged month ${lastBlock.id} (${lastBlock.month}): more then 1 prevMonths`);\n    //     if (lastBlock.prevVersions.length > 1)\n    //         throw new Error(`Can not process merged month ${lastBlock.id} (${lastBlock.month}): more then 1 prevVersions`);\n    //\n    //     const nextID = lastBlock.prevMonths[0];\n    //     lastBlock = items.find(item => item.id === nextID);\n    //\n    //     if (!lastBlock) {\n    //         return {\n    //             completed: false,\n    //             chain,\n    //         };\n    //     }\n    // } while (true);\n    return true;\n}\n\nexport class MonthChainError extends Error {\n    constructor(public reason: string,\n                public chain: ReadonlyArray<IMonthBrief>,\n                public invalidMonth: IMonthBrief) {\n        super(`Invalid chain: ${reason} at ${invalidMonth.id} (${invalidMonth.month})`);\n    }\n}\n\nexport class RequiredMonthsError extends Error {\n    public ids: UUID[];\n\n    constructor(...ids: UUID[]) {\n        super(`Required months: ${ids.join(', ')}`);\n        this.ids = ids;\n    }\n}\n\nexport class CanNotFastForwardMonthError extends Error {\n    constructor(public from: ReadonlyArray<IMonthBrief>,\n                public to: ReadonlyArray<IMonthBrief>) {\n        super([`Can not fast forward`,\n            `from ${from[0].id} (${from[0].month}, length ${from.length})`,\n            `to ${to[0].id} (${to[0].month}, length ${to.length})`,\n        ].join('\\n'));\n    }\n}\n","import { ISummary, UUID } from '../common/common.types';\nimport { Money } from '../money/money.class';\nimport { IMonthBrief } from '../month/month.types';\nimport { IAccount } from './account.types';\nimport { v1 as uuidGenerator } from 'uuid';\nimport { Month } from '../month/month.class';\nimport { Map } from 'immutable';\nimport { findChain, RequiredMonthsError, updateMonthChain } from './chain.utils';\nimport { addSummary, EMPTY_SUMMARY } from '../transaction/transactions.utils';\n\n/**\n * Contains information about Account\n */\nexport class Account implements IAccount, ISummary {\n    public readonly id: UUID = '';\n    public readonly name: string = '';\n    public readonly balance: Money = Money.empty;\n    public readonly income: Money = Money.empty;\n    public readonly expense: Money = Money.empty;\n    public readonly head: IMonthBrief | null = null;\n    public readonly months: ReadonlyArray<Readonly<IMonthBrief>> = [];\n    public readonly fullMonths: Map<UUID, Month> = Map();\n\n    public static create(name: string, id?: UUID): Account {\n        return new Account({\n            id: id || uuidGenerator(),\n            name,\n        });\n    }\n\n    public static fromJSON(data: any): Account {\n        return new Account({\n            id: data.id,\n            name: data.name,\n            balance: Money.fromJSON(data.balance),\n            income: Money.fromJSON(data.income),\n            expense: Money.fromJSON(data.expense),\n            months: data.months,\n            head: data.head,\n        });\n    }\n\n    private constructor(account: Partial<Account>) {\n        return Object.assign(this, account);\n    }\n\n    public toJSON(): any {\n        return {\n            id: this.id,\n            name: this.name,\n            balance: this.balance.toJSON(),\n            income: this.income.toJSON(),\n            expense: this.expense.toJSON(),\n            months: this.months,\n            head: this.head,\n        };\n    }\n\n    public forceSetHead_unsafe(head: Month, months: Month[]): Account {\n        const {chain, completed} = findChain(head, months);\n\n        if (!completed) {\n            const last = chain.pop();\n            const required = [\n                ...last!.prevMonths,\n                ...last!.prevVersions,\n            ].filter(\n                id => !months.find(item => item.id !== id),\n            );\n\n            throw new RequiredMonthsError(...required);\n        }\n\n        const {income, expense, balance} = chain.reduce((acc, item) => addSummary(acc, item.summary), EMPTY_SUMMARY);\n\n        return new Account({\n            ...this,\n            head,\n            months: chain.map(Month.getBrief),\n            balance,\n            income,\n            expense,\n        });\n        // throw new Error('Not implements');\n        // throw new RequiredMonthsError(['123123123']);\n    }\n\n    public updateHead(head: Month, additions: Month[] = []): Account {\n        const chain = updateMonthChain(head, additions, this.months);\n\n        const {income, expense, balance} = chain.reduce((acc, item) => addSummary(acc, item.summary), EMPTY_SUMMARY);\n\n        return new Account({\n            ...this,\n            head: Month.getBrief(head),\n            months: chain.map(Month.getBrief),\n            balance,\n            income,\n            expense,\n        });\n    }\n\n    public checkChain(): boolean {\n        if (!this.head && this.months.length === 0)\n            return true;\n\n        const {chain, completed} = findChain(this.head!, this.months);\n\n        if (!completed)\n            return false;\n\n        if (chain.length !== this.months.length)\n            return false;\n\n        return true;\n    }\n}\n\n","import { IScheme } from '../../indexed-db';\nimport { Account } from './account.class';\nimport { IAccount } from './account.types';\n\nexport const AccountScheme: IScheme<IAccount> = {\n    collection: 'accounts',\n    dbVersion: 1,\n    key: 'id',\n    upgrade(objectStore, oldVersion, newVersion): void {\n        console.log('update account from ', oldVersion, newVersion);\n\n        const defaultAccount = Account.create('Default');\n\n        objectStore.add(defaultAccount.toJSON());\n    },\n};\n","import { IScheme } from '../../indexed-db';\nimport { IMonth } from './month.types';\n\nexport const MonthScheme: IScheme<IMonth> = {\n    collection: 'months',\n    dbVersion: 1,\n    key: 'id',\n    upgrade(objectStore, oldVersion, newVersion): void {\n        console.log('update months from ', oldVersion, newVersion);\n\n        // const defaultAccount = Month.create('Default');\n        //\n        // objectStore.add(defaultAccount.toJSON());\n    },\n};\n","import { DBStatus, IndexedDB, initDB } from '../indexed-db';\nimport { useEffect, useState } from 'react';\nimport { SubsetScheme } from '../models/subset/subset.scheme';\nimport { Store } from '@reatom/core';\nimport {\n    loadAccounts,\n    loadAccountsFailed,\n    loadAccountsSuccess,\n    saveAccount, saveAccountFailed,\n    saveAccountSuccess,\n} from '../atoms/accounts/accounts.actions';\nimport { Account } from '../models/account/account.class';\nimport {\n    loadMonths,\n    loadMonthsFailed,\n    loadMonthsSuccess,\n    saveMonths, saveMonthsFailed,\n    saveMonthsSuccess,\n} from '../atoms/months/months.actions';\nimport { UUID } from '../models/common/common.types';\nimport { Months } from '../atoms/months/months.atom';\nimport { Month } from '../models/month/month.class';\nimport { AccountScheme } from '../models/account/account.scheme';\nimport { MonthScheme } from '../models/month/month.scheme';\n\nexport const db = new IndexedDB('test', [\n    SubsetScheme,\n    AccountScheme,\n    MonthScheme,\n]);\n\nexport function useDBReady(onReady: () => void) {\n    console.log('useDBReady');\n\n    const [status, setStatus] = useState(db.status);\n\n    const onChangeStatusEvent = (status: DBStatus) => {\n        console.log(DBStatus[status]);\n        if (status === DBStatus.Ready)\n            onReady();\n        setStatus(status);\n    };\n\n    useEffect(() => {\n        db.addStatusListener(onChangeStatusEvent);\n        return () => db.removeStatusListener(onChangeStatusEvent);\n    });\n}\n\nexport function initIndexedDB(store: Store) {\n    store.subscribe(action => {\n        console.log(action);\n        switch (action.type) {\n            case loadAccounts.getType(): {\n                db.transaction(AccountScheme)\n                  .getAll().then(\n                    result => store.dispatch(loadAccountsSuccess(result.map(Account.fromJSON))),\n                    error => store.dispatch(loadAccountsFailed(error)),\n                );\n                break;\n            }\n            case saveAccount.getType(): {\n                const account = action.payload as Account;\n                db.transaction(AccountScheme)\n                  .update(account.toJSON() as any).then(\n                    result => store.dispatch(saveAccountSuccess(account.id)),\n                    error => store.dispatch(saveAccountFailed({id: account.id, error})),\n                );\n                break;\n            }\n            case loadMonths.getType(): {\n                const ids = action.payload as UUID[];\n\n                db.transaction(MonthScheme)\n                  .getAll(ids).then(\n                    result => {\n                        console.log(ids);\n                        console.log(result);\n                        const months = result.map(Month.fromJSON);\n                        store.dispatch(loadMonthsSuccess(months));\n                    },\n                    error => store.dispatch(loadMonthsFailed({ids, error})),\n                );\n                break;\n            }\n            case saveMonths.getType(): {\n                const months = (action.payload as Month[]).map(month => month.toJSON());\n                const ids = months.map(item => item.id);\n                const tx = db.transaction(MonthScheme);\n                Promise.all(months.map(month => tx.update(month)))\n                       .then(\n                           () => store.dispatch(saveMonthsSuccess(ids)),\n                           error => store.dispatch(saveMonthsFailed({ids, error})),\n                       );\n                break;\n            }\n        }\n    });\n}\n","import { runSaga, stdChannel, Saga } from 'redux-saga';\nimport { PayloadActionCreator, Store } from '@reatom/core';\nimport { takeEvery, call } from 'redux-saga/effects';\n\nclass SagaLauncher {\n    private sagas: Saga[] = [];\n\n    register(saga: Saga): void {\n        this.sagas.push(saga);\n    }\n\n    onAction(actionCreator: PayloadActionCreator<any>,\n             saga: Saga,\n             sagaName = 'Some saga'): void {\n        this.register(function* () {\n            yield takeEvery(actionCreator.getType(), saga);\n            // yield takeEvery(actionCreator.getType(), function* (...params) {\n            //     try {\n            //         console.log(`[Saga logger] Saga \"${sagaName}\" started`);\n            //         yield* saga(...params);\n            //         console.log(`[Saga logger] Saga \"${sagaName}\" completed`);\n            //     } catch (e) {\n            //         console.log(`[Saga logger] Saga \"${sagaName}\" failed`);\n            //         console.error(e);\n            //     }\n            // });\n        });\n    }\n\n    start(store: Store) {\n        console.log(`Start ${this.sagas.length} sagas`);\n\n        const sagaOptions = {\n            dispatch: store.dispatch,\n            getState: () => store.getState,\n            channel: stdChannel(),\n        };\n\n        store.subscribe(sagaOptions.channel.put);\n\n        this.sagas.forEach(saga => runSaga(sagaOptions, saga));\n    }\n}\n\nexport const sagaLauncher = new SagaLauncher();\n\ntype ExtractInner<T> = T extends Generator<any, infer R, any> ? R : never;\n\nexport interface PackedSaga<Fn extends (...args: any[]) => any> {\n    (...args: Parameters<Fn>): Generator<any, ExtractInner<ReturnType<Fn>>, any>;\n\n    originalSaga: (...args: Parameters<Fn>) => Generator<any, ExtractInner<ReturnType<Fn>>, any>;\n}\n\nfunction sagaCallPacker<Fn extends (...args: any[]) => any = any>(saga: Fn): PackedSaga<Fn> {\n    const fn = function* PackedSaga<Fn extends (...args: any[]) => any = any>(...params: Parameters<Fn>): Generator<any, ExtractInner<Fn>, any> {\n        return yield call(saga as any, ...params);\n    };\n    fn.originalSaga = saga;\n    return fn;\n}\n\nexport const SagaPacker = {\n    call: sagaCallPacker,\n};\n","import { select, call, put, take, CallEffect, SimpleEffect } from 'redux-saga/effects';\nimport { UUID } from '../../models/common/common.types';\nimport { Month } from '../../models/month/month.class';\nimport { Map } from 'immutable';\nimport { Months } from '../../atoms/months/months.atom';\nimport {\n    loadMonths,\n    loadMonthsFailed,\n    loadMonthsSuccess,\n    saveMonths, saveMonthsFailed,\n    saveMonthsSuccess,\n} from '../../atoms/months/months.actions';\nimport { Action, Atom } from '@reatom/core';\nimport { Accounts, IAccountsState } from '../../atoms/accounts/accounts.atom';\nimport { Account } from '../../models/account/account.class';\nimport { saveAccount, saveAccountFailed, saveAccountSuccess } from '../../atoms/accounts/accounts.actions';\nimport { SagaPacker } from '../saga-launcher';\n\nexport const SagaUtils = {\n    /**\n     * Select atom from Store\n     * @param atom\n     */\n    selectAtom: SagaPacker.call(selectAtomFn),\n    /**\n     * Get current timestamp\n     */\n    getTimestamp: SagaPacker.call(getTimestampFn),\n};\n\n/**\n * @deprecated\n * @param atom\n */\nexport const selectAtom = atom => call(selectAtomFn, atom);\n\nexport function* selectAtomFn(atom: Atom<any>) {\n    return yield select(getState => getState(atom));\n}\n\n/**\n * @deprecated\n */\nexport const getTimestamp = () => call(getTimestampFn);\n\nexport function getTimestampFn() {\n    return new Date().getTime();\n}\n\nexport function delay(timeout = 0): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, timeout));\n}\n","import { put, take } from 'redux-saga/effects';\nimport { Action } from '@reatom/core';\nimport { MonthDate } from '../../models/common/date.types';\nimport { Account } from '../../models/account/account.class';\nimport { Month } from '../../models/month/month.class';\nimport { getTimestamp, SagaUtils, selectAtom } from '../helpers/helpers';\nimport { SagaPacker } from '../saga-launcher';\nimport {\n    saveMonths,\n    saveMonthsSuccess,\n    saveMonthsFailed,\n    loadMonths,\n    loadMonthsSuccess,\n    loadMonthsFailed,\n} from '../../atoms/months/months.actions';\nimport { UUID } from '../../models/common/common.types';\nimport { Months } from '../../atoms/months/months.atom';\n\nexport const MonthUtils = {\n    /**\n     * Get or create Month of Account's chain\n     */\n    get: SagaPacker.call(getMonthSaga),\n    /**\n     * Get months from DB\n     */\n    getByIds: SagaPacker.call(getMonthsByIdsSaga),\n    /**\n     * Save months to DB\n     */\n    save: SagaPacker.call(saveMonthsSaga),\n};\n\nfunction* getMonthsByIdsSaga(ids: UUID[]): Generator<any, Month[], any> {\n    const months: Map<UUID, Month> = yield selectAtom(Months);\n\n    console.log(months);\n    const notExists = ids.filter(id => !months.has(id));\n\n    if (!notExists)\n        return ids.map(id => months.get(id));\n\n    yield put(loadMonths(notExists));\n    let action: Action<any>;\n    do {\n        action = yield take([loadMonthsSuccess, loadMonthsFailed]);\n        if (action.type === loadMonthsSuccess.getType()) {\n            if (action.payload.every((item, index) => item.id === notExists[index])) {\n                const months = yield selectAtom(Months);\n                return ids.map(id => months.get(id));\n            }\n        } else {\n            if (action.payload.ids.every((item, index) => item === notExists[index]))\n                throw action.payload.error;\n        }\n    } while (true);\n}\n\nfunction* getMonthSaga(account: Account, monthDate: MonthDate) {\n    if (!account.head) {\n        const timestamp: number = yield getTimestamp();\n        console.log('timestamp', timestamp);\n        return Month.createFirstBlock(account.id, monthDate, timestamp);\n    }\n\n    // create next block\n    if (monthDate > account.head.month) {\n        const [head]: Month[] = yield* MonthUtils.getByIds([account.head.id]);\n        const timestamp: number = yield getTimestamp();\n        return head.createNextBlock(monthDate, timestamp);\n    }\n\n    // return exists month\n    {\n        const indexOfMonth = account.months.findIndex(item => item.month === monthDate);\n        if (indexOfMonth > -1) {\n            const monthsIds = account.months\n                                     .slice(0, indexOfMonth + 1)\n                                     .map(item => item.id);\n            const months = yield* MonthUtils.getByIds(monthsIds);\n            return months.pop();\n        }\n    }\n\n    // create block in the middle of chain\n    {\n        const monthsIds: UUID[] = [];\n\n        for (let i = 0; i < account.months.length; i++) {\n            const currentMonth = account.months[i];\n\n            monthsIds.push(currentMonth.id);\n\n            if (currentMonth.month < monthDate)\n                break;\n        }\n\n        const months = yield* MonthUtils.getByIds(monthsIds);\n        const monthsToSave: Month[] = [];\n\n        const timestamp = yield* SagaUtils.getTimestamp();\n\n        let lastMonth = months.pop();\n\n        const newMonth = lastMonth = lastMonth.createNextBlock(monthDate, timestamp);\n        monthsToSave.push(lastMonth);\n\n        for (let month = months.pop(); month; month = months.pop()) {\n            const updated = month.updatePrevMonths([lastMonth], timestamp);\n            monthsToSave.push(updated);\n            lastMonth = updated;\n        }\n\n        yield* MonthUtils.save(monthsToSave);\n\n        return newMonth;\n    }\n}\n\nfunction* saveMonthsSaga(months: Month[]) {\n    yield put(saveMonths(months));\n    for (; ;) {\n        const action = yield take([saveMonthsSuccess, saveMonthsFailed]);\n        if (action.type === saveMonthsSuccess.getType()) {\n            if (months.every((item, index) => action.payload[index] === item.id))\n                return;\n        } else {\n            if (months.every((item, index) => action.payload.ids[index] === item.id))\n                throw action.payload.error;\n        }\n    }\n}\n","import { Month } from '../../models/month/month.class';\nimport { Account } from '../../models/account/account.class';\nimport { Helpers } from '../helpers';\nimport { UUID } from '../../models/common/common.types';\nimport { SagaPacker } from '../saga-launcher';\nimport { Accounts, IAccountsState } from '../../atoms/accounts/accounts.atom';\nimport { select, put, take } from 'redux-saga/effects';\nimport { saveAccount, saveAccountSuccess, saveAccountFailed } from '../../atoms/accounts/accounts.actions';\nimport { MonthUtils } from './month.saga';\nimport { isVersionOfMonth, RequiredMonthsError } from '../../models/account/chain.utils';\nimport { SagaUtils } from '../helpers/helpers';\nimport { IMonthBrief } from '../../models/month/month.types';\n\nexport const AccountUtils = {\n    select: SagaPacker.call(selectAccountSaga),\n    update: SagaPacker.call(updateAccountSaga),\n    save: SagaPacker.call(saveAccountSaga),\n};\n\n/**\n * Select account from Store\n * @param id\n */\nfunction* selectAccountSaga(id: UUID) {\n    const accounts: IAccountsState = yield select(getState => getState(Accounts));\n    const account: Account = accounts.accounts.get(id);\n\n    if (!account)\n        throw new Error(`Account \"${id}\" not found`);\n\n    return account;\n}\n\n/**\n * Обновляет месяц в аккаунте, при необходимости правит оставшуюся цепочку, сохраняет\n *\n * FIXME So raw. Needs refactoring\n *\n * @param account\n * @param month\n */\nfunction* updateAccountSaga(account: Account, month: Month) {\n    console.log('*** updateAccountSaga');\n    console.log(account.months.map(item => item.month));\n    console.log(month.month, month.id);\n    let currentMonthIndex = account.months.findIndex(item => item.month === month.month);\n    let prevMonthIndex = account.months.findIndex(item => item.month < month.month);\n\n    if (!account.head) {\n        yield* MonthUtils.save([month]);\n        const accountToUpdate = account.updateHead(month);\n        yield* AccountUtils.save(accountToUpdate);\n        return accountToUpdate;\n    }\n\n\n    let toIndex = currentMonthIndex === -1\n        ? prevMonthIndex\n        : currentMonthIndex;\n\n    const monthsIds: UUID[] = account.months\n                                     .slice(0, toIndex + 1)\n                                     .map(item => item.id);\n\n    const additionalMonths: Month[] = [month];\n\n    console.log(monthsIds);\n\n    if (monthsIds.length)\n        additionalMonths.push(...yield* MonthUtils.getByIds(monthsIds));\n\n    const timestamp = yield* SagaUtils.getTimestamp();\n\n    console.log({\n        currentMonthIndex,\n        prevMonthIndex,\n        toIndex,\n        additions: additionalMonths.map(item => [item.month + ' ' + item.id]),\n        months: account.months\n                       .slice(0, toIndex + 1)\n                       .map(item => item.month),\n    });\n\n    let accountToUpdate: Account;\n    let monthsToUpdate = [month];\n\n    console.log('additional');\n    console.log(additionalMonths.map(item => `${item.month} ${item.id}`));\n    console.log('chain');\n    console.log(account.months.map(item => `${item.month} ${item.id}`));\n\n    console.log('prevMonthIndex', prevMonthIndex, account.months[prevMonthIndex]?.month);\n\n    if (currentMonthIndex === -1 && prevMonthIndex === -1)\n        throw new Error('Unexpection');\n\n    if (currentMonthIndex === -1 && prevMonthIndex !== -1) {\n        currentMonthIndex = prevMonthIndex;\n    } else {\n        const existsMonth = account.months[currentMonthIndex];\n        if (existsMonth.month !== month.month)\n            throw new Error('somethings wrong');\n        if (!isVersionOfMonth(month, existsMonth))\n            throw new Error('somethings wrong');\n\n    }\n\n    console.log('currentMonthIndex', currentMonthIndex, account.months[currentMonthIndex]?.month);\n    if (currentMonthIndex !== -1) {\n        let previousMonth: Month = month;\n\n        for (let index = currentMonthIndex - 1; index >= 0; index--) {\n            console.log('index', index, account.months[index].month);\n            const currentMonthId = account.months[index].id;\n            const currentMonth = additionalMonths.find(item => item.id === currentMonthId);\n            if (!currentMonth)\n                throw new RequiredMonthsError(currentMonthId);\n            previousMonth = currentMonth.updatePrevMonths([previousMonth], timestamp);\n            additionalMonths.push(previousMonth);\n            monthsToUpdate.push(previousMonth);\n        }\n\n        console.log('additionalMonths', additionalMonths.map(item => [item.month + ' ' + item.id]));\n\n        const accountToUpdate = account.updateHead(previousMonth, additionalMonths);\n\n        yield* MonthUtils.save(monthsToUpdate);\n        yield* AccountUtils.save(accountToUpdate);\n        return accountToUpdate;\n    }\n\n\n    throw new Error('may be first');\n\n\n}\n\nexport function* saveAccountSaga(account: Account) {\n    yield put(saveAccount(account));\n    for (; ;) {\n        const action = yield take([saveAccountSuccess, saveAccountFailed]);\n        if (action.type === saveAccountSuccess.getType()) {\n            if (action.payload === account.id)\n                return;\n        } else {\n            if (action.payload.id === account.id)\n                throw action.payload.error;\n        }\n    }\n}\n","import { addTransaction } from '../../models/transaction/transaction.actions';\nimport { sagaLauncher } from '../saga-launcher';\nimport { IAddTransactionForm } from '../../models/transaction/transaction.types';\nimport { dayDateToMonth } from '../../models/common/date.utils';\nimport { Action } from '@reatom/core';\nimport { AccountUtils } from '../utils/account.saga';\nimport { MonthUtils } from '../utils/month.saga';\nimport { Transaction } from '../../models/transaction/transaction.class';\n\nsagaLauncher.onAction(addTransaction, addTransactionSaga);\n\nexport function* addTransactionSaga(action: Action<IAddTransactionForm>) {\n    console.log('*** addTransactionSaga started');\n    const payload: IAddTransactionForm = action.payload;\n    const account = yield* AccountUtils.select(payload.account);\n    const month = yield* MonthUtils.get(account, dayDateToMonth(payload.date));\n\n    console.log('addTransactionSaga', month.id, month.prevVersions);\n\n    const tx = Transaction.create(\n        payload.type,\n        payload.amount,\n        'RUB',\n    );\n\n    const day = month.getDay(payload.date)\n                     .addTransaction(tx);\n\n    const updatedMonth = month.updateDay(day);\n\n    console.log('updatedMonth', updatedMonth.id, updatedMonth.prevVersions);\n\n    const value = yield* AccountUtils.update(account, updatedMonth);\n    console.log('*** addTransactionSaga complete');\n    return value;\n}\n","import { take } from 'redux-saga/effects';\nimport { sagaLauncher } from '../saga-launcher';\nimport { loadAccountsSuccess } from '../../atoms/accounts/accounts.actions';\n\nsagaLauncher.register(transactionUpdateSaga);\n\nfunction* transactionUpdateSaga() {\n    console.log('init transactionUpdateSaga');\n    while (true) {\n        const action = yield take(loadAccountsSuccess.getType());\n        console.log('load successssssss', action);\n    }\n}\n","import React from 'react';\nimport styles from './App.module.scss';\nimport { Redirect, Route, Switch } from 'react-router';\nimport { BrowserRouter } from 'react-router-dom';\nimport { NavBar } from './widgets/NavBar';\nimport { useAction, useAtom } from '@reatom/react';\nimport { Client } from './atoms/client/client.atom';\nimport { startListenOnlineStatus } from './atoms/client/client.service';\nimport { store } from './store/store';\nimport { initIndexedDB, useDBReady } from './store/db';\nimport './sagas';\nimport { sagaLauncher } from './sagas';\nimport { paths, routes } from './routes';\nimport { refresh } from './atoms/client/client.actions';\n\nexport const App = () => {\n    const client = useAtom(Client);\n    const refreshAllHandler = useAction(() => {\n        console.log('*** refreshAllHandler');\n\n        initIndexedDB(store);\n\n        console.log('*** refreshAllHandler complete');\n\n        return refresh();\n    }, []);\n    useDBReady(refreshAllHandler);\n\n    return (\n        <div className={styles.App}>\n            <BrowserRouter>\n                <Switch>\n                    {routes.map(route => <Route {...route}/>)}\n                    <Redirect to={paths.home()}/>\n                </Switch>\n                <NavBar/>\n            </BrowserRouter>\n        </div>\n    );\n};\n\nstartListenOnlineStatus(store);\nsagaLauncher.start(store);\n","import { Store } from '@reatom/core';\nimport { setOnlineStatus } from './client.actions';\n\nexport function startListenOnlineStatus(store: Store) {\n    store.dispatch(setOnlineStatus(navigator.onLine));\n\n    window.addEventListener('online',\n        () => store.dispatch(setOnlineStatus(true)),\n    );\n    window.addEventListener('offline',\n        () => store.dispatch(setOnlineStatus(false)),\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst SW_DEBUG = false;\n\nconst isLocalhost = SW_DEBUG ||\n    Boolean(\n        window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n        ),\n    );\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if ((SW_DEBUG || process.env.NODE_ENV === 'production') && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href,\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log('Offline Mode ready');\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n             .register(swUrl)\n             .then(registration => {\n                 registration.onupdatefound = () => {\n                     const installingWorker = registration.installing;\n                     if (installingWorker == null) {\n                         return;\n                     }\n                     installingWorker.onstatechange = () => {\n                         if (installingWorker.state === 'installed') {\n                             if (navigator.serviceWorker.controller) {\n                                 // At this point, the updated precached content has been fetched,\n                                 // but the previous service worker will still serve the older\n                                 // content until all client tabs are closed.\n                                 console.log(\n                                     'New content is available and will be used when all ' +\n                                     'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                                 );\n\n                                 // Execute callback\n                                 if (config && config.onUpdate) {\n                                     config.onUpdate(registration);\n                                 }\n                             } else {\n                                 // At this point, everything has been precached.\n                                 // It's the perfect time to display a\n                                 // \"Content is cached for offline use.\" message.\n                                 console.log('Content is cached for offline use.');\n\n                                 // Execute callback\n                                 if (config && config.onSuccess) {\n                                     config.onSuccess(registration);\n                                 }\n                             }\n                         }\n                     };\n                 };\n             })\n             .catch(error => {\n                 console.error('Error during service worker registration:', error);\n             });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n                 .then(registration => {\n                     registration.unregister();\n                 })\n                 .catch(error => {\n                     console.error(error.message);\n                 });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { context } from '@reatom/react';\nimport './index.scss';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { initDB } from './indexed-db';\nimport { store } from './store/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <context.Provider value={store}>\n            <App/>\n        </context.Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\ninitDB();\n","export function initDB() {\n    console.log('*************** initDB');\n// This is what our customer data looks like.\n    const customerData = [\n        {ssn: '444-44-4444', name: 'Bill', age: 35, email: 'bill@company.com'},\n        {ssn: '555-55-5555', name: 'Donna', age: 32, email: 'donna@home.org'},\n    ];\n    const dbName = 'the_name';\n\n    const request = indexedDB.open(dbName, 3);\n\n    request.onerror = function (event) {\n        // Handle errors.\n    };\n    request.onsuccess = function (event: any) {\n        const db: IDBDatabase = event.target.result;\n        (window as any).db = db;\n\n        const transaction = db.transaction(['customers'], 'readwrite');\n        const objectStore = transaction.objectStore('customers');\n        const r = objectStore.add({age: 44, email: 'asd', name: 'asd', ssn: '123'});\n        r.onsuccess = (event) => console.log(event);\n    };\n    request.onupgradeneeded = function (event: any) {\n        const db = event.target.result;\n\n        console.log('upgrade');\n\n        // Create an objectStore to hold information about our customers. We're\n        // going to use \"ssn\" as our key path because it's guaranteed to be\n        // unique.\n        const objectStore = db.createObjectStore('customers', {keyPath: 'ssn'});\n\n        // Create an index to search customers by name. We may have duplicates\n        // so we can't use a unique index.\n        objectStore.createIndex('name', 'name', {unique: false});\n\n        // Create an index to search customers by email. We want to ensure that\n        // no two customers have the same email, so use a unique index.\n        objectStore.createIndex('email', 'email', {unique: true});\n\n        // Store values in the newly created objectStore.\n        for (let i in customerData) {\n            objectStore.add(customerData[i]);\n        }\n    };\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"txList\":\"TxList_txList__3rowt\",\"txItem\":\"TxList_txItem__2-7sR\",\"txItem__left\":\"TxList_txItem__left__3Dekh\",\"txItem__first\":\"TxList_txItem__first__eF_WE\",\"txItem__second\":\"TxList_txItem__second__-lQ89\",\"txItem__amount\":\"TxList_txItem__amount__2PbUA\",\"txItem__date\":\"TxList_txItem__date__3uUSP\",\"empty\":\"TxList_empty__2S-7j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"head\":\"MonthViewWidget_head__2tdqX\",\"title\":\"MonthViewWidget_title__2uHWT\",\"prev\":\"MonthViewWidget_prev__2DTEF\",\"next\":\"MonthViewWidget_next__1Vm-Q\",\"info\":\"MonthViewWidget_info__ltwmS\",\"circle\":\"MonthViewWidget_circle__19VOB\",\"balance\":\"MonthViewWidget_balance__qUNX4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"moneyView\":\"MoneyView_moneyView__2U7sP\",\"fractional\":\"MoneyView_fractional__1hdQj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"days\":\"MonthTxList_days__1hzzo\",\"day\":\"MonthTxList_day__1_h7Y\",\"title\":\"MonthTxList_title__VajvW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"TransactionsPage_page__1uE4j\",\"filter\":\"TransactionsPage_filter__3x4B8\",\"active\":\"TransactionsPage_active__3XoOk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__30F5v\",\"title\":\"Header_title__1vmPo\"};"],"sourceRoot":""}