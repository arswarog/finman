{"version":3,"sources":["App.module.scss","widgets/NavBar.module.scss","widgets/MonthViewWidget.module.scss","models/money/money.class.ts","components/MoneyView.tsx","atoms/accounts/accounts.actions.ts","atoms/accounts/accounts.atom.ts","widgets/Header.tsx","widgets/SwipeWidget.tsx","store/reatom.ts","components/DetailsMainButton.tsx","models/dates/index.ts","pages/AccountsPage.tsx","models/transaction/transaction.types.ts","atoms/months/months.actions.ts","atoms/months/months.atom.ts","widgets/TxList.tsx","widgets/TxList.utils.ts","widgets/MonthTxList.tsx","widgets/MonthViewWidget.tsx","pages/AccountMonthsPage.tsx","routes/accounts.ts","routes/config.ts","atoms/client/client.actions.ts","atoms/client/client.atom.ts","store/store.ts","models/transaction/transaction.actions.ts","indexed-db/db.types.ts","pages/TransactionsPage.tsx","routes/transactions.ts","pages/TransactionAddPage.tsx","routes/paths.ts","routes/routes.tsx","pages/LicensesPage.tsx","routes/Link.tsx","widgets/NavBar.tsx","indexed-db/db.utils.ts","indexed-db/collection.ts","indexed-db/db.ts","models/month/month.types.ts","models/common/common.types.ts","models/transaction/transactions.utils.ts","models/common/date.utils.ts","models/transaction/transaction.class.ts","models/day/day.class.ts","models/month/month.class.ts","models/subset/subset.class.ts","models/subset/subset.scheme.ts","models/account/chain.utils.ts","models/month/month.brief.ts","models/account/account.class.ts","models/account/account.scheme.ts","models/month/month.scheme.ts","store/db.ts","sagas/saga-launcher.ts","sagas/helpers/helpers.ts","sagas/utils/month.saga.ts","sagas/utils/account.saga.ts","sagas/sagas/transaction-add.saga.ts","sagas/sagas/transaction-update.saga.ts","App.tsx","atoms/client/client.service.ts","serviceWorker.ts","index.tsx","indexed-db/test.ts","widgets/TxList.module.scss","components/DetailsMainButton.module.scss","pages/AccountsPage.module.scss","widgets/SwipeWidget.module.scss","components/MoneyView.module.scss","pages/LicensesPage.module.scss","widgets/MonthTxList.module.scss","pages/TransactionsPage.module.scss","widgets/Header.module.scss"],"names":["module","exports","currencies","RUB","code","symbol","precision","Money","subunits","currency","amount","this","toFixed","value","fromJSON","clone","Error","data","parts","trim","split","length","amountText","currencyName","toUpperCase","units","Number","isNaN","Math","round","money","floor","toString","substr","empty","create","MoneyView","JSON","stringify","className","styles","moneyView","entire","getEntire","fractional","getFractional","getSymbol","NS","chooseAccount","declareAction","loadAccounts","loadAccountsSuccess","loadAccountsFailed","saveAccount","saveAccountSuccess","saveAccountFailed","Accounts","declareAtom","current","accounts","Map","on","choose","state","id","get","load","list","map","account","has","save","set","Header","title","header","SwipeWidget","swipeEl","showButtons","children","onChange","_","items","flat","currentIndex","findIndex","item","key","console","log","useEffect","slide","prev","next","swipeWidget","ref","o","swipe","callback","index","startSlide","speed","auto","onClick","width","height","xmlns","fillRule","clipRule","d","SwipeItemWidget","swipeItem","useForceUpdate","useReducer","s","defaultMapper","atomValue","useAtom","atom","selector","deps","store","useContext","context","forceUpdate","getState","subscribe","BarColor","DetailsMain","Button","memo","props","link","barWidth","barColor","Good","barBgColor","Neutral","percentDiff","percent","ceil","moreIsBetter","Normal","Bad","lessIsBetter","prepareButtonData","Link","button","to","left","bar","style","backgroundColor","barColorToColor","right","List","cover","list_cover","join","getMonthName","month","format","Date","TransactionType","AccountsPage","useHistory","chooseAccountHandler","useAction","Array","from","values","size","accountPage","head","paths","monthsList","summary","expense","income","AccountWidget","history","accountWidget","accountStyle_blue","name","balance","addTx","push","transactions","add","loadMonths","loadMonthsSuccess","loadMonthsFailed","saveMonths","saveMonthsSuccess","saveMonthsFailed","Months","months","reduce","acc","TxList","React","txList","dayDate","type","Income","Expense","negative","first","category","second","date","makeTxList","tx","txItem","txItem__left","txItem__first","txItem__second","txItem__right","txItem__amount","txItem__date","MonthTxList","days","day","MonthViewHeadWidget","brief","moveToPrev","moveToNext","circumference","totalSum","incomePercent","expensePercent","info","circle","transform","r","cx","cy","stroke","strokeDasharray","AccountMonthsPage","params","useRouteMatch","reverse","changeMonth","useCallback","newMonthNum","replace","loadMonth","monthIndex","monthBrief","prevMonth","nextMonth","currentMonth","main","view","accountsRoutes","path","exact","component","setOnlineStatus","refresh","dispatch","Client","online","createStore","combine","connectReduxDevtools","action","group","payload","groupEnd","DBStatus","addTransaction","Object","keys","URLSearchParams","addQueryString","transactionRoutes","useLocation","search","useState","setAmount","setDate","setType","setAccount","typeChangeHandler","event","target","onSubmit","preventDefault","formData","label","checked","htmlFor","page","filter","active","home","licenses","routes","author","href","license","ReactRouterDom","NavLink","NavBar","bottomNavigation","eventLogger","emitter","emitterName","eventName","isArray","forEach","addEventListener","Collection","db","scheme","transaction","storage","collection","objectStore","Promise","resolve","reject","request","onsuccess","result","onerror","error","query","count","all","getAll","put","IndexedDB","dbName","schemes","listeners","_status","Initializing","window","indexedDB","version","max","model","dbVersion","openDB","then","Ready","getAccessor","fn","setTimeout","status","setStatus","openRequest","open","Upgrading","oldVersion","newVersion","objectStoreNames","e","warn","createObjectStore","keyPath","upgrade","Failed","SyncStatus","EmptySummary","EmptyExtendSummary","balanceOnStart","balanceOnEnd","freeze","EMPTY_SUMMARY","calculateSummary","Removed","sub","addSummary","base","equal","checkSummary","parseMonthDate","match","year","getFullYear","getMonth","dayDateToMonth","Transaction","createdAt","updatedAt","assign","uuidGenerator","toJSON","Day","dateTime","getDate","parseDayDate","Month","syncStatus","NoSynced","prevMonths","prevVersions","dataHash","timestamp","daysInMonth","getDataHash","generateID","getDaysInMonth","Fixed","hash","sha1","monthID","padStart","ts","blocks","revisions","getBrief","Prepared","Syncing","FullySynced","createDayDate","startBalance","calculateSummaryFromStartBalance","every","find","createDay","newDay","isDateOfMonth","slice","dayIndex","sort","a","b","splice","baseSummary","Subset","subset","loaded","createFirstBlock","v1","SubsetScheme","defaultSubset","updateMonthChain","additions","old","findChain","chain","completed","RequiredMonthsError","pop","isVersionOfMonth","CanNotFastForwardMonthError","preFirstID","preFirstIndex","monthsNumbersSet","Set","monthsNumbers","table","element","oldEl","check","newChain","i","MonthChainError","checkChain","nextId","lastBlock","nextID","reason","invalidMonth","ids","MonthBrief","Account","fullMonths","last","required","AccountScheme","defaultAccount","MonthScheme","handlers","addActionHandler","handler","getType","localStorage","setItem","getItem","sagaLauncher","sagas","saga","actionCreator","register","takeEvery","sagaOptions","channel","stdChannel","runSaga","SagaPacker","call","PackedSaga","originalSaga","selectAtomFn","SagaUtils","selectAtom","getTimestamp","getTimestampFn","select","getTime","getMonthsByIdsSaga","getMonthSaga","saveMonthsSaga","MonthUtils","getByIds","notExists","take","monthDate","createNextBlock","indexOfMonth","monthsIds","monthsToSave","lastMonth","newMonth","updated","updatePrevMonths","selectAccountSaga","updateAccountSaga","saveAccountSaga","AccountUtils","update","currentMonthIndex","prevMonthIndex","accountToUpdate","updateHead","toIndex","additionalMonths","monthsToUpdate","existsMonth","previousMonth","currentMonthId","addTransactionSaga","getDay","updatedMonth","updateDay","onAction","transactionUpdateSaga","App","onReady","onChangeStatusEvent","addStatusListener","removeStatusListener","useDBReady","route","navigator","onLine","start","Boolean","location","hostname","ReactDOM","render","StrictMode","Provider","document","getElementById","serviceWorker","ready","registration","unregister","catch","message","customerData","ssn","age","email","onupgradeneeded","createIndex","unique","initDB"],"mappings":"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","file":"static/js/main.73b1d650.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\",\"App-logo\":\"App_App-logo__1GLNd\",\"App-logo-spin\":\"App_App-logo-spin__1EbLw\",\"App-header\":\"App_App-header__3nnPn\",\"App-link\":\"App_App-link__TRj1P\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bottomNavigation\":\"NavBar_bottomNavigation__hEWk4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"head\":\"MonthViewWidget_head__2tdqX\",\"title\":\"MonthViewWidget_title__2uHWT\",\"info\":\"MonthViewWidget_info__ltwmS\",\"circle\":\"MonthViewWidget_circle__19VOB\",\"balance\":\"MonthViewWidget_balance__qUNX4\"};","const DEFAULT_CURRENCY = 'RUB';\n\nexport interface ICurrency {\n    code: string;\n    symbol: string;\n    precision: number;\n}\n\nexport const currencies: { [key: string]: ICurrency } = {\n    RUB: {code: 'RUB', symbol: '₽', precision: 2},\n};\n\nexport class Money {\n    public readonly amount: string = '';\n\n    public static from(value: Money | string): Money {\n        if (typeof value === 'string')\n            return Money.fromJSON(value);\n        if (value instanceof Money)\n            return value.clone();\n        throw new Error('Can not convert invalid data to Money');\n    }\n\n    public static fromJSON(data: any): Money {\n        if (typeof data === 'object'\n            && typeof data.subunits === 'number'\n            && typeof data.currency === 'object'\n            && typeof data.currency.code === 'string')\n            return new Money(data.subunits, data.currency);\n\n        if (typeof data !== 'string')\n            throw new Error(`Amount \"${data}\" must be a string`);\n\n        let parts = data.trim().split(' ');\n        if (!parts || parts.length !== 2)\n            throw new Error(`Money \"${data}\" must have valid format`);\n\n        const amountText = parts[0];\n        const currencyName = parts[1].toUpperCase();\n\n        const currency = currencies[currencyName];\n        if (!currency)\n            throw new Error(`Unsupported currency \"${currencyName}\"`);\n\n        const units = +amountText;\n        if (Number.isNaN(units))\n            throw new Error(`Invalid amount \"${amountText}\" when parse \"${data}\"`);\n\n        const subunits = Math.round(units * 10 ** currency.precision);\n\n        return new Money(subunits, currency);\n    }\n\n    public static create(amount: string | number, currencyName: string): Money {\n        if (typeof currencyName !== 'string')\n            throw new Error(`Invalid currency \"${currencyName}\"`);\n        currencyName = currencyName.toUpperCase();\n\n        if (typeof amount === 'string') {\n            if (!amount || Number.isNaN(+amount))\n                throw new Error(`Amount must be valid number but received \"${amount}\"`);\n\n            amount = +amount;\n        }\n\n        const currency = currencies[currencyName];\n        if (!currency)\n            throw new Error(`Unsupported currency \"${currencyName}\"`);\n\n        const units = +amount;\n        if (Number.isNaN(units))\n            throw new Error(`Invalid amount \"${amount}\"`);\n\n        const subunits = Math.round(units * 10 ** currency.precision);\n        return new Money(subunits, currency);\n    }\n\n    public static readonly empty = Money.create(0, DEFAULT_CURRENCY);\n\n    private constructor(public readonly subunits: number,\n                        public readonly currency: ICurrency) {\n        this.amount = (subunits / 10 ** currency.precision).toFixed(2);\n    }\n\n    public clone(): Money {\n        return new Money(this.subunits, this.currency);\n    }\n\n    public toString() {\n        if (this.subunits)\n            return this.amount + ' ' + this.currency.symbol;\n        else\n            return '0 ' + this.currency.symbol;\n    }\n\n    public toJSON() {\n        if (this.subunits)\n            return this.amount + ' ' + this.currency.code;\n        else\n            return '0 ' + this.currency.code;\n    }\n\n    public add(money: Money): Money {\n        if (this.currency.code !== money.currency.code)\n            throw new Error(`Can not do any operations with different currencies`);\n        return new Money(this.subunits + money.subunits, this.currency);\n    }\n\n    public sub(money: Money): Money {\n        if (this.currency.code !== money.currency.code)\n            throw new Error(`Can not do any operations with different currencies`);\n        return new Money(this.subunits - money.subunits, this.currency);\n    }\n\n    public equal(money: Money): boolean {\n        if (this.currency.code !== money.currency.code)\n            return false;\n        return this.subunits === money.subunits;\n    }\n\n    public getEntire(): string {\n        return Math.floor(this.subunits / 10 ** this.currency.precision).toString();\n    }\n\n    public getFractional(): string {\n        return (this.subunits / 10 ** this.currency.precision)\n            .toFixed(this.currency.precision)\n            .substr(-this.currency.precision);\n    }\n\n    public getSymbol(): string {\n        return this.currency.symbol;\n    }\n\n    public negative(): Money {\n        return new Money(-this.subunits, this.currency);\n    }\n}\n","import React from 'react';\nimport { Money } from '../models/money/money.class';\n\nimport styles from './MoneyView.module.scss';\n\ninterface IProps {\n    money: Money;\n}\n\nexport const MoneyView = ({money}: IProps) => {\n    if (!(money instanceof Money))\n        throw new Error(`money must be instance of Money, but get ${typeof money} ${JSON.stringify(money)}\"`);\n    return (\n        <div className={styles.moneyView}>\n            <span className={styles.entire}>{money.getEntire()}</span>\n            <span className={styles.fractional}>{money.getFractional()}</span>\n            <span className={styles.currency}>{money.getSymbol()}</span>\n        </div>\n    );\n};\n","import { declareAction } from '@reatom/core';\nimport { UUID } from '../../models/common/common.types';\nimport { Account } from '../../models/account/account.class';\n\nconst NS = 'accounts';\nexport const chooseAccount = declareAction<UUID>(NS + ':chooseAccount');\n\nexport const loadAccounts = declareAction(NS + ':loadAccounts');\nexport const loadAccountsSuccess = declareAction<{\n    current?: UUID;\n    accounts: Account[];\n}>(NS + ':loadAccounts success');\nexport const loadAccountsFailed = declareAction<any>(NS + ':loadAccounts failed');\n\nexport const saveAccount = declareAction<Account>(NS + ':saveAccounts');\nexport const saveAccountSuccess = declareAction<UUID>(NS + ':saveAccounts success');\nexport const saveAccountFailed = declareAction<{ id: UUID, error: any }>(NS + ':saveAccounts failed');\n\n\n","import { declareAtom } from '@reatom/core';\nimport { Account } from '../../models/account/account.class';\nimport { Map } from 'immutable';\nimport { UUID } from '../../models/common/common.types';\nimport { chooseAccount, loadAccountsSuccess, saveAccount } from './accounts.actions';\n\nexport interface IAccountsState {\n    current: Account | null;\n    accounts: Map<UUID, Account>;\n}\n\nexport const Accounts = declareAtom<IAccountsState>(\n    ['accounts'],\n    {\n        current: null,\n        accounts: Map(),\n    },\n    on => ({\n        choose: [\n            on(chooseAccount, (state, id) => {\n                const current = state.accounts.get(id);\n                if (current)\n                    return {\n                        ...state,\n                        current,\n                    };\n                else\n                    return state;\n            }),\n        ],\n        load: [\n            on(loadAccountsSuccess, (state, {current, accounts}) => {\n                const list: Array<[string, Account]> = accounts.map(account => [account.id, account]);\n                const map = Map(list);\n                return {\n                    ...state,\n                    current: map.has(current) ? map.get(current) : accounts[0],\n                    accounts: map,\n                };\n            }),\n        ],\n        save: [\n            on(saveAccount, (state, account) => {\n                return {\n                    accounts: state.accounts.set(account.id, account),\n                    current: account.id === state.current?.id\n                        ? account\n                        : state.current,\n                };\n            }),\n        ],\n    }),\n);\n","import React from 'react';\n\nimport styles from './Header.module.scss';\n\ninterface IParams {\n    title: string;\n}\n\nexport const Header = ({title}: IParams) => {\n    return (\n        <header className={styles.header}>\n            <h1 className={styles.title}>{title}</h1>\n        </header>\n    );\n};\n","import Swipe, { SwipeItem } from 'swipejs/react';\nimport React, { Key, ReactElement, ReactNode, useEffect } from 'react';\nimport styles from './SwipeWidget.module.scss';\n\ninterface IProps {\n    showButtons?: boolean;\n    current?: Key;\n\n    onChange?: (key: Key) => void;\n\n    children: ReactNode[];\n}\n\nexport const SwipeWidget = ({showButtons, children, onChange, current}: IProps) => {\n    let swipeEl: any;\n\n    onChange = onChange || ((_) => null);\n\n    const items = children.flat() as ReactElement[];\n\n    let currentIndex = (items as any).findIndex(item => item.key === current);\n    if (currentIndex === -1)\n        currentIndex = 0;\n\n    console.log('!!!', current, currentIndex);\n    console.log(items);\n    useEffect(() => swipeEl.slide(currentIndex, 0), [currentIndex]);\n\n    const callback = (index) => {\n        console.log('current', index);\n        const current = items[index];\n        console.log('current', current);\n        onChange(current.key);\n    };\n\n    const prev = showButtons && currentIndex > 0 ? items[currentIndex - 1].key : '';\n    const next = showButtons && currentIndex < items.length - 1 ? items[currentIndex + 1].key : '';\n\n    const moveToPrev = () => {\n        swipeEl.prev();\n    };\n\n    const moveToNext = () => {\n        swipeEl.next();\n    };\n\n    return (\n        <div className={styles.swipeWidget}>\n            <Swipe ref={o => swipeEl = o}\n                   className={styles.swipe}\n                   callback={callback}\n                   startSlide={currentIndex}\n                   speed={0}\n                   auto={0}>\n                {items}\n            </Swipe>\n            {prev && <div className={styles.prev}\n                          onClick={moveToPrev}>\n                <svg width=\"24\" height=\"24\"\n                     xmlns=\"http://www.w3.org/2000/svg\"\n                     fillRule=\"evenodd\"\n                     clipRule=\"evenodd\">\n                    <path d=\"M20 .755l-14.374 11.245 14.374 11.219-.619.781-15.381-12 15.391-12 .609.755z\"/>\n                </svg>\n            </div>}\n            {next && <div className={styles.next}\n                          onClick={moveToNext}>\n                <svg width=\"24\" height=\"24\"\n                     xmlns=\"http://www.w3.org/2000/svg\"\n                     fillRule=\"evenodd\"\n                     clipRule=\"evenodd\">\n                    <path d=\"M4 .755l14.374 11.245-14.374 11.219.619.781 15.381-12-15.391-12-.609.755z\"/>\n                </svg>\n            </div>}\n        </div>\n    );\n};\n\nexport const SwipeItemWidget = ({children}) => {\n    return (\n        <SwipeItem className={styles.swipeItem}>\n            {children}\n        </SwipeItem>\n    );\n};\n","import { Reducer, useContext, useEffect, useReducer } from 'react';\nimport { Atom } from '@reatom/core';\nimport { context } from '@reatom/react';\n\n// Предварительное решение пока не будет решена основная проблема\n\n// function useForceUpdate() {\n//     const [state, dispatch] = useReducer(s => {\n//         console.log('reducer', s);\n//         return s + 1;\n//     }, 0);\n//     return () => {\n//         console.log('reducer state', state);\n//         dispatch();\n//     };\n// }\n\nexport function useForceUpdate() {\n    // dispatch don't have action and don't changes between rerenders\n    return useReducer<Reducer<number, null>>(s => s + 1, 0)[1] as () => void;\n}\n\nconst defaultMapper = (atomValue: any) => atomValue;\n\nexport function useAtom<T>(atom: Atom<T>): T;\nexport function useAtom<TI, TO = TI>(\n    atom: Atom<TI>,\n    selector: (atomValue: TI) => TO,\n    deps: any[],\n): TO;\nexport function useAtom<TI, TO = TI>(\n    atom: Atom<TI>,\n    selector: (atomValue: TI) => TO = defaultMapper,\n    deps: any[] = [],\n): TO {\n    const store = useContext(context);\n    console.log('by forceUpdate', atom);\n    const forceUpdate = useForceUpdate();\n    const value = selector(store.getState(atom));\n    useEffect(() => {\n        return store.subscribe(atom, state => {\n            console.log('new value', state, selector(state));\n            forceUpdate();\n        });\n    }, deps);\n\n    return value;\n}\n","import React, { ReactElement, ReactNode, memo } from 'react';\nimport styles from './DetailsMainButton.module.scss';\nimport { Link } from '../routes';\nimport { MoneyView } from './MoneyView';\nimport { Money } from '../models/money/money.class';\n\nexport enum BarColor {\n    Neutral = 'neutral',\n    Good = 'good',\n    Normal = 'normal',\n    Bad = 'bad',\n}\n\nconst MORE_MIN_K = 1.1;\nconst LESS_MAX_K = 0.9;\n\nexport type IDetailsMainButton = IDetailsMainButtonBase\n    | IDetailsMainButtonBase & (\n    IDetailsMainButtonMoreIsBetter |\n    IDetailsMainButtonLessIsBetter\n    );\n\nexport interface IDetailsMainButtonBase {\n    title: string;\n    amount: Money | string | number;\n    link?: string;\n}\n\n// export interface IDetailsMainButtonColor {\n//     color: BarColor;\n// }\n\nexport interface IDetailsMainButtonMoreIsBetter {\n    percent: number;\n    moreIsBetter: true;\n}\n\nexport interface IDetailsMainButtonLessIsBetter {\n    percent: number;\n    lessIsBetter: true;\n}\n\nconst Button = (props: IDetailsMainButton) => {\n    const {title, link, amount} = props;\n\n    let barWidth = 100;\n    let barColor = BarColor.Good;\n    let barBgColor = BarColor.Neutral;\n    let percentDiff = '';\n    if ('percent' in props)\n        ({barWidth, barColor, barBgColor, percentDiff} = prepareButtonData(props));\n\n    return (\n        <Link className={styles.button} to={link}>\n            <div className={styles.left}>\n                <div className={styles.title}>\n                    {title}\n                    <em>{percentDiff}</em>\n                </div>\n                <div className={styles.bar}\n                     style={{\n                         backgroundColor: barColorToColor(barBgColor),\n                     }}>\n                    <div style={{\n                        width: barWidth + '%',\n                        backgroundColor: barColorToColor(barColor),\n                    }}/>\n                </div>\n            </div>\n            <div className={styles.right}>\n                {amount instanceof Money\n                    ? <MoneyView money={amount || Money.empty}/>\n                    : amount\n                }\n            </div>\n        </Link>\n    );\n};\n\ninterface IListProps {\n    children: ReactNode[];\n    cover?: boolean;\n}\n\nconst List = ({children, cover}: IListProps) => {\n    const items = children.flat() as ReactElement[];\n    return <div className={[styles.list, cover && styles.list_cover].join(' ')}>\n        {items}\n    </div>;\n};\n\nexport const DetailsMain = {\n    Button: memo(Button),\n    List: memo(List),\n};\n\ninterface IPreparedButtonData {\n    percentDiff: string;\n    barBgColor: BarColor;\n    barColor: BarColor;\n    barWidth: number;\n}\n\nexport function prepareButtonData(props: IDetailsMainButtonMoreIsBetter | IDetailsMainButtonLessIsBetter): IPreparedButtonData {\n    const percent = props.percent;\n\n    const percentDiff = percent <= 0.99\n        ? Math.ceil(percent * 100 - 100) + '%'\n        : percent >= 1.01\n            ? ('+' + Math.floor(percent * 100 - 100) + '%')\n            : '+0%';\n\n    const barWidth = percent <= 1\n        ? Math.ceil(percent * 100)\n        : Math.floor((1 / percent) * 100);\n\n    if ('moreIsBetter' in props && props.moreIsBetter) {\n        if (percent >= MORE_MIN_K)\n            return {\n                percentDiff,\n                barBgColor: BarColor.Good,\n                barColor: BarColor.Normal,\n                barWidth,\n            };\n        if (percent <= LESS_MAX_K)\n            return {\n                percentDiff,\n                barBgColor: BarColor.Neutral,\n                barColor: BarColor.Bad,\n                barWidth,\n            };\n        return {\n            percentDiff,\n            barBgColor: BarColor.Good,\n            barColor: BarColor.Normal,\n            barWidth,\n        };\n    }\n    if ('lessIsBetter' in props && props.lessIsBetter) {\n        if (percent >= MORE_MIN_K)\n            return {\n                percentDiff,\n                barBgColor: BarColor.Normal,\n                barColor: BarColor.Bad,\n                barWidth,\n            };\n        if (percent <= LESS_MAX_K)\n            return {\n                percentDiff,\n                barBgColor: BarColor.Neutral,\n                barColor: BarColor.Good,\n                barWidth,\n            };\n        return {\n            percentDiff,\n            barBgColor: BarColor.Neutral,\n            barColor: BarColor.Normal,\n            barWidth,\n        };\n    }\n\n    throw new Error('Must be moreIsBetter or lessIsBetter');\n}\n\nfunction barColorToColor(barColor: BarColor): string {\n    switch (barColor) {\n        case BarColor.Good:\n            return 'yellowgreen';\n        case BarColor.Normal:\n            return 'yellow';\n        case BarColor.Bad:\n            return 'red';\n        case BarColor.Neutral:\n        default:\n            return '#d0d0d0';\n    }\n}\n","import { MonthDate } from '../common/date.types';\nimport format from 'date-fns/format';\n\nexport function getMonthName(month?: MonthDate): string {\n    if (month)\n        return format(new Date(month), 'MMMM');\n    else\n        return 'month';\n}\n","import React, { Reducer, useContext, useEffect, useReducer, useState } from 'react';\nimport { context, useAction } from '@reatom/react';\nimport { MoneyView } from '../components/MoneyView';\nimport styles from './AccountsPage.module.scss';\nimport { Accounts } from '../atoms/accounts/accounts.atom';\nimport { useHistory, useRouteMatch } from 'react-router';\nimport { paths } from '../routes';\nimport { Header } from '../widgets/Header';\nimport { SwipeItemWidget, SwipeWidget } from '../widgets/SwipeWidget';\nimport { Account } from '../models/account/account.class';\nimport { chooseAccount } from '../atoms/accounts/accounts.actions';\nimport { useAtom } from '../store/reatom';\nimport { DetailsMain } from '../components/DetailsMainButton';\nimport { Money } from '../models/money/money.class';\nimport format from 'date-fns/format';\nimport { getMonthName } from '../models/dates';\n\ninterface IParams {\n    account?: string;\n}\n\nexport const AccountsPage = () => {\n    const history = useHistory();\n    const current = useAtom(Accounts, state => state.current, []);\n    const accounts = useAtom(Accounts, state => state.accounts, []);\n    const chooseAccountHandler = useAction(id => id === 'create' ? null : chooseAccount(id));\n    const list = Array.from(accounts.values());\n\n    if (!accounts.size)\n        return (\n            <>\n                <Header title={`Accounts`}/>\n                Loading...\n            </>\n        );\n\n    return (\n        <>\n            <Header title={`Accounts`}/>\n            <main className={styles.accountPage + ' noselect'}>\n                <SwipeWidget current={current?.id || ''}\n                             showButtons\n                             onChange={chooseAccountHandler as ((key: any) => void)}>\n                    {list.map(account => (\n                        <SwipeItemWidget key={account.id}>\n                            <AccountWidget account={account}/>\n                        </SwipeItemWidget>\n                    ))}\n                    {/*<SwipeItemWidget key=\"create\"> FIXME*/}\n                    {/*    Create account*/}\n                    {/*</SwipeItemWidget>*/}\n                </SwipeWidget>\n                <DetailsMain.List cover>\n                    <DetailsMain.Button title={`Expenses in ${getMonthName(current.head?.month)}`}\n                                        link={paths.account.monthsList(current.id)}\n                                        amount={current.head?.summary.expense}/>\n                    <DetailsMain.Button title={`Incomes in ${getMonthName(current.head?.month)}`}\n                                        link={paths.account.monthsList(current.id)}\n                                        amount={current.head?.summary.income}/>\n                </DetailsMain.List>\n            </main>\n        </>\n    );\n};\n\n\nexport const AccountWidget = ({account}: { account: Account }) => {\n    const history = useHistory();\n\n    function addTx() {\n        history.push(paths.transactions.add({account: account.id}));\n    }\n\n    return (\n        <div className={styles.accountWidget + ' ' + styles.accountStyle_blue}>\n            <div className={styles.name}>{account.name}</div>\n            <div className={styles.balance}>\n                <h5>Balance:</h5>\n                <MoneyView money={account.balance}/>\n            </div>\n            <button className={styles.addTx}\n                    onClick={addTx}>+\n            </button>\n        </div>\n    );\n};\n","import { UUID } from '../common/common.types';\nimport { Money } from '../money/money.class';\n\nexport enum TransactionType {\n    Removed,\n    Income,\n    Expense,\n    Adjust,\n    AdjustTo,\n}\n\nexport interface ITransaction {\n    id: UUID;\n    amount: Money;\n    type: TransactionType;\n    category: UUID | '';\n    title: string | '';\n    createdAt?: number;\n    updatedAt?: number;\n}\n\nexport interface IAddTransactionForm {\n    account: UUID;\n    amount: string;\n    type: TransactionType;\n    category: UUID | '';\n    title: string | '';\n    date: string;\n}\n","import { UUID } from '../../models/common/common.types';\nimport { declareAction } from '@reatom/core';\nimport { Month } from '../../models/month/month.class';\n\nconst NS = 'months';\n\nexport const loadMonths = declareAction<UUID[]>(NS + ':loadMonths');\nexport const loadMonthsSuccess = declareAction<Month[]>(NS + ':loadMonths success');\nexport const loadMonthsFailed = declareAction<{ ids: UUID[], error: any }>(NS + ':loadMonths failed');\n\nexport const saveMonths = declareAction<Month[]>(NS + ':saveMonths');\nexport const saveMonthsSuccess = declareAction<UUID[]>(NS + ':saveMonths success');\nexport const saveMonthsFailed = declareAction<{ ids: UUID[], error: any }>(NS + ':saveMonths failed');\n","import { declareAtom } from '@reatom/core';\nimport { Map } from 'immutable';\nimport { IMonthsState } from './months.types';\nimport { loadMonthsSuccess, saveMonths } from './months.actions';\n\nexport const Months = declareAtom<IMonthsState>(\n    ['months'],\n    Map(),\n    on => ({\n        load: [\n            on(loadMonthsSuccess, (months, items) => {\n                return items.reduce((acc, item) => acc.set(item.id, item), months);\n            }),\n        ],\n        save: [\n            on(saveMonths, (state, months) => {\n                return months.reduce(\n                    (acc, month) => acc.set(month.id, month),\n                    state,\n                );\n            }),\n        ],\n    }),\n);\n","import React from 'react';\nimport { ITransaction } from '../models/transaction/transaction.types';\n\nimport styles from './TxList.module.scss';\nimport { makeTxList } from './TxList.utils';\nimport { MoneyView } from '../components/MoneyView';\nimport { DayDate } from '../models/common/date.types';\n\ninterface IProps {\n    list: ITransaction[];\n    dayDate: DayDate;\n}\n\nexport const TxList = React.memo(({list, dayDate}: IProps) => {\n    const txList = makeTxList(list, dayDate);\n\n    return (\n        <ul className={styles.txList}>\n            {txList.map((tx, index) => (\n                <li key={index} className={styles.txItem}>\n                    <div className={styles.txItem__left}>\n                        <div className={styles.txItem__first}>\n                            {tx.first\n                                ? tx.first\n                                : <span className={styles.empty}>Без заголовка</span>\n                            }\n                        </div>\n                        <div className={styles.txItem__second}>\n                            {tx.second\n                                ? tx.second\n                                : <span className={styles.empty}>Без заголовка</span>\n                            }\n                        </div>\n                    </div>\n                    <div className={styles.txItem__right}>\n                        <div className={styles.txItem__amount}>\n                            <MoneyView money={tx.amount}/>\n                        </div>\n                        <div className={styles.txItem__date}>\n                            {tx.date}\n                        </div>\n                    </div>\n                </li>\n            ))}\n        </ul>\n    );\n});\n","import { ITransaction, TransactionType } from '../models/transaction/transaction.types';\nimport { format } from 'date-fns';\nimport { Money } from '../models/money/money.class';\nimport { DayDate } from '../models/common/date.types';\n\nexport interface IDisplayedTransaction {\n    first: string;\n    second: string;\n    amount: Money;\n    date: string;\n}\n\nexport function makeTxList(list: ITransaction[], dayDate?: DayDate): IDisplayedTransaction[] {\n    return list.map(item => {\n\n        let amount: Money;\n\n        switch (item.type) {\n            case TransactionType.Income:\n                amount = item.amount;\n                break;\n            case TransactionType.Expense:\n                amount = item.amount.negative();\n                break;\n            default:\n                throw new Error('Unprocessed TxType ' + TransactionType[item.type]);\n        }\n\n        return {\n            first: item.category,\n            second: item.title,\n            amount,\n            date: dayDate\n                ? format(new Date(dayDate), 'PP')\n                : '',\n        };\n    });\n}\n","import React from 'react';\n\nimport styles from './MonthTxList.module.scss';\nimport { Month } from '../models/month/month.class';\nimport { TxList } from './TxList';\nimport { DayDate } from '../models/common/date.types';\nimport format from 'date-fns/format';\n\ninterface IProps {\n    month: Month;\n}\n\nexport const MonthTxList = React.memo(({month}: IProps) => {\n    if (!month)\n        return (\n            <div>No data</div>\n        );\n\n    const days = month.days;\n\n    return (\n        <ul className={styles.days}>\n            {days.map(day => (\n                <li key={day.date} className={styles.day}>\n                    <div className={styles.title}>\n                        {formatDayDate(day.date)}\n                        {/*<div className={styles.txItem__first}>*/}\n                        {/*    {tx.first*/}\n                        {/*        ? tx.first*/}\n                        {/*        : <span className={styles.empty}>Без заголовка</span>*/}\n                        {/*    }*/}\n                        {/*</div>*/}\n                        {/*<div className={styles.txItem__second}>*/}\n                        {/*    {tx.second*/}\n                        {/*        ? tx.second*/}\n                        {/*        : <span className={styles.empty}>Без заголовка</span>*/}\n                        {/*    }*/}\n                        {/*</div>*/}\n                    </div>\n                    <TxList list={day.transactions} dayDate={day.date}/>\n                </li>\n            ))}\n        </ul>\n    );\n});\n\n\nfunction formatDayDate(date: DayDate): string {\n    return format(new Date(date), 'do LLLL');\n}\n","import { MonthsMap } from '../atoms/months/months.types';\nimport { IMonthBrief } from '../models/month/month.types';\nimport React from 'react';\nimport { Swipeable } from 'react-swipeable';\nimport { MoneyView } from '../components/MoneyView';\nimport { MonthTxList } from './MonthTxList';\nimport { Account } from '../models/account/account.class';\nimport styles from './MonthViewWidget.module.scss';\nimport format from 'date-fns/format';\n\ninterface IProps {\n    months: MonthsMap;\n    brief?: IMonthBrief;\n    prev?: IMonthBrief;\n    next?: IMonthBrief;\n    moveToPrev?: () => void;\n    moveToNext?: () => void;\n}\n\nexport const MonthViewHeadWidget = ({months, brief, prev, next, moveToPrev, moveToNext}: IProps) => {\n    // moveToPrev = moveToPrev || (() => null);\n    // moveToNext = moveToNext || (() => null);\n\n    if (!brief)\n        return <div>No month</div>;\n\n    // if (!months.has(brief.id)) {\n    //     return <div>Loading month</div>;\n    // }\n\n    // const month = months.get(brief.id);\n    //\n    // if (!month)\n    //     return <div>Loading month</div>;\n\n    const circumference = 452;\n    const totalSum = brief.summary.income.subunits + brief.summary.expense.subunits;\n    const incomePercent = brief.summary.income.subunits / totalSum * circumference;\n    const expensePercent = brief.summary.expense.subunits / totalSum * circumference;\n\n    return (\n        <div className={styles.head}>\n            <h3 className={styles.title}>{format(new Date(brief.month), 'MMMM yyyy')}</h3>\n            <div className={styles.info}>\n                <div className={styles.circle}>\n                    <svg width=\"160\" height=\"160\">\n                        <circle transform=\"rotate(-90)\"\n                                r=\"72\" cx=\"-80\" cy=\"80\"/>\n                        <circle className=\"income\"\n                                transform=\"rotate(-90)\"\n                                r=\"72\" cx=\"-80\" cy=\"80\"\n                                stroke=\"30bae7\"\n                                strokeDasharray={[incomePercent, circumference].join(' ')}/>\n                        <circle className=\"expense\"\n                                transform=\"rotate(-90)\"\n                                r=\"72\" cx=\"-80\" cy=\"80\"\n                                strokeDasharray={[0, incomePercent, expensePercent, circumference].join(' ')}/>\n                    </svg>\n                    <h4 className={styles.balance}><MoneyView money={brief.summary.balance}/></h4>\n                    <div>+<MoneyView money={brief.summary.income}/></div>\n                    <div>-<MoneyView money={brief.summary.expense}/></div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\n\nexport const MonthViewWidget = ({months, brief, prev, next, moveToPrev, moveToNext}: IProps) => {\n    moveToPrev = moveToPrev || (() => null);\n    moveToNext = moveToNext || (() => null);\n\n    if (!brief)\n        return <div>No month</div>;\n\n    if (!months.has(brief.id)) {\n        return <div>Loading month</div>;\n    }\n\n    const month = months.get(brief.id);\n\n    if (!month)\n        return <div>Loading month</div>;\n\n    const circumference = 452;\n    const totalSum = month.summary.income.subunits + month.summary.expense.subunits;\n    const incomePercent = month.summary.income.subunits / totalSum * circumference;\n    const expensePercent = month.summary.expense.subunits / totalSum * circumference;\n\n    return (\n        <>\n            {/*<Swipeable*/}\n            {/*    trackMouse*/}\n            {/*    preventDefaultTouchmoveEvent*/}\n            {/*    onSwipedRight={moveToPrev}*/}\n            {/*    onSwipedLeft={moveToNext}*/}\n            {/*>*/}\n            <div className={styles.head}>\n                <h3 className={styles.title}>{format(new Date(month.month), 'MMMM yyyy')}</h3>\n                <div className={styles.info}>\n                    {prev && <div className={styles.prev}\n                                  onClick={moveToPrev}>\n                        <svg width=\"24\" height=\"24\"\n                             xmlns=\"http://www.w3.org/2000/svg\"\n                             fillRule=\"evenodd\"\n                             clipRule=\"evenodd\">\n                            <path d=\"M20 .755l-14.374 11.245 14.374 11.219-.619.781-15.381-12 15.391-12 .609.755z\"/>\n                        </svg>\n                    </div>}\n                    {next && <div className={styles.next}\n                                  onClick={moveToNext}>\n                        <svg width=\"24\" height=\"24\"\n                             xmlns=\"http://www.w3.org/2000/svg\"\n                             fillRule=\"evenodd\"\n                             clipRule=\"evenodd\">\n                            <path d=\"M4 .755l14.374 11.245-14.374 11.219.619.781 15.381-12-15.391-12-.609.755z\"/>\n                        </svg>\n                    </div>}\n                    <div className={styles.circle}>\n                        <svg width=\"160\" height=\"160\">\n                            <circle transform=\"rotate(-90)\"\n                                    r=\"72\" cx=\"-80\" cy=\"80\"/>\n                            <circle className=\"income\"\n                                    transform=\"rotate(-90)\"\n                                    r=\"72\" cx=\"-80\" cy=\"80\"\n                                    stroke=\"30bae7\"\n                                    strokeDasharray={[incomePercent, circumference].join(' ')}/>\n                            <circle className=\"expense\"\n                                    transform=\"rotate(-90)\"\n                                    r=\"72\" cx=\"-80\" cy=\"80\"\n                                    strokeDashoffset={incomePercent}\n                                    strokeDasharray={[expensePercent, circumference].join(' ')}/>\n                        </svg>\n                        <h4 className={styles.balance}><MoneyView money={month.summary.balance}/></h4>\n                        <div>+<MoneyView money={month.summary.income}/></div>\n                        <div>-<MoneyView money={month.summary.expense}/></div>\n                    </div>\n                </div>\n            </div>\n            {/*</Swipeable>*/}\n            <MonthTxList month={month}/>\n        </>\n    );\n};\n","import React, { useCallback, useState } from 'react';\nimport { useAction, useAtom } from '@reatom/react';\nimport { Accounts } from '../atoms/accounts/accounts.atom';\nimport { match, useHistory, useParams, useRouteMatch, withRouter } from 'react-router';\nimport { MonthDate } from '../models/common/date.types';\nimport { Months } from '../atoms/months/months.atom';\nimport { loadMonths } from '../atoms/months/months.actions';\nimport { IMonthBrief } from '../models/month/month.types';\nimport { MonthViewHeadWidget, MonthViewWidget } from '../widgets/MonthViewWidget';\nimport { Header } from '../widgets/Header';\nimport { paths } from '../routes';\nimport styles from './AccountMonthsPage.module.scss';\nimport { MonthTxList } from '../widgets/MonthTxList';\nimport { SwipeItemWidget, SwipeWidget } from '../widgets/SwipeWidget';\n\ninterface IParams {\n    account: string;\n    month?: MonthDate;\n}\n\nexport const AccountMonthsPage = () => {\n    // prepare\n    const {params} = useRouteMatch<IParams>();\n    const account = useAtom(Accounts, ({accounts}) => accounts.get(params.account), [params.account]);\n    const months = useAtom(Months);\n    const history = useHistory();\n\n    // create months list\n    const monthsList = [...account ? account.months : []];\n    monthsList.reverse();\n\n    // create handlers\n    const changeMonth = useCallback((newMonthNum) => {\n        history.replace(paths.account.months(account.id, newMonthNum));\n    }, [account]);\n\n    const loadMonth = useAction(id => id ? loadMonths([id]) : null, []);\n\n    // check before render\n    if (!account)\n        return (\n            <div>No account</div>\n        );\n\n    if (!account.months.length)\n        return (\n            <div>No months in this account</div>\n        );\n\n    // get months\n    let monthIndex = account.months.findIndex(item => item.month === params.month);\n    if (monthIndex === -1)\n        monthIndex = 0;\n    const monthBrief: IMonthBrief = account.months[monthIndex];\n    const prevMonth = account.months[monthIndex + 1];\n    const nextMonth = account.months[monthIndex - 1];\n\n    // load months\n    if (monthBrief && !months.has(monthBrief.id))\n        loadMonth(monthBrief.id);\n    if (prevMonth && !months.has(prevMonth.id))\n        loadMonth(prevMonth.id);\n    if (nextMonth && !months.has(nextMonth.id))\n        loadMonth(nextMonth.id);\n\n    const currentMonth = months.get(monthBrief?.id);\n\n    // render\n    return (\n        <>\n            <Header title={`Account ${account.name}`}/>\n            <main className={styles.main + ' noselect'}>\n                <SwipeWidget onChange={changeMonth}\n                             current={monthBrief.month}\n                             showButtons>\n                    {monthsList.map(item => (\n                        <SwipeItemWidget key={item.month}>\n                            <MonthViewHeadWidget months={months}\n                                                 brief={item}\n                            />\n                        </SwipeItemWidget>\n                    ))}\n                </SwipeWidget>\n                <MonthTxList month={currentMonth}/>\n            </main>\n        </>\n    );\n};\n","import { RouteProps } from 'react-router';\nimport { AccountsPage } from '../pages/AccountsPage';\nimport { AccountMonthsPage } from '../pages/AccountMonthsPage';\nimport { baseUrl } from './config';\n\nexport const account = {\n    list: () => `${baseUrl}/accounts`,\n    view: (account = ':account') => `${baseUrl}/account/${account}`,\n    monthsList: (account = ':account') => `${baseUrl}/account/${account}/months`,\n    months: (account = ':account', month = ':month') => `${baseUrl}/account/${account}/months/${month}`,\n};\n\nexport const accountsRoutes: RouteProps[] = [\n    {\n        path: account.list(),\n        exact: true,\n        component: AccountsPage,\n    },\n    {\n        path: account.view(),\n        exact: true,\n        component: AccountsPage,\n    },\n    {\n        path: account.months(),\n        component: AccountMonthsPage,\n    },\n    {\n        path: account.monthsList(),\n        component: AccountMonthsPage,\n    },\n];\n","export const baseUrl = '';\n\nexport function addQueryString(params: Record<string, string>): string {\n    if (!params)\n        return '';\n    if (!Object.keys(params).length)\n        return '';\n\n    return '?' + new URLSearchParams(params).toString();\n}\n","import { declareAction } from '@reatom/core';\nimport { loadAccounts } from '../accounts/accounts.actions';\n\nconst NS = 'client';\n\nexport const setOnlineStatus = declareAction<any>(NS + ':setOnlineStatus');\nexport const refresh = declareAction(NS + ':refresh', (_, {dispatch}) => {\n    dispatch(loadAccounts());\n});\n","import { declareAtom } from '@reatom/core';\nimport { IClientState } from './client.types';\nimport { setOnlineStatus } from './client.actions';\n\nexport const Client = declareAtom<IClientState>(\n    ['client'],\n    {\n        online: false,\n    },\n    on => ({\n        online: [\n            on(setOnlineStatus, (state, online) => ({...state, online})),\n        ],\n    }),\n);\n","import { combine, createStore } from '@reatom/core';\nimport { connectReduxDevtools } from '@reatom/debug';\nimport { Client } from '../atoms/client/client.atom';\nimport { Accounts } from '../atoms/accounts/accounts.atom';\nimport { Months } from '../atoms/months/months.atom';\n\nexport const store = createStore(combine({\n    Client,\n    Accounts,\n    Months,\n}));\n\nconnectReduxDevtools(store);\n\nexport function useStore() {\n    return store;\n}\n\nstore.subscribe((action, state) => {\n    console.group('*** action', action.type);\n    console.log(action.payload);\n    console.log(state);\n    console.groupEnd();\n});\n","import { declareAction } from '@reatom/core';\nimport { IAddTransactionForm } from './transaction.types';\n\nconst NS = 'transaction';\n\nexport const addTransaction = declareAction<IAddTransactionForm>(NS + ':addTransaction');\n","export enum DBStatus {\n    Initializing,\n    Upgrading,\n    Ready,\n    Failed,\n}\n\nexport interface IScheme<T = any, K extends keyof T = any> {\n    collection: string;\n    dbVersion: number;\n    key: K;\n\n    upgrade?(objectStore: IDBObjectStore, oldVersion: number, newVersion: number): void;\n}\n\nexport type DBStatusListener = (status: DBStatus) => void;\n","import React from 'react';\n\nimport styles from './TransactionsPage.module.scss';\nimport { Header } from '../widgets/Header';\nimport { TxList } from '../widgets/TxList';\nimport { ITransaction } from '../models/transaction/transaction.types';\n\nconst transactions: ITransaction[] = [\n    {id: 1},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n    {id: 2},\n] as any;\nexport const TransactionsPage = () => {\n    const month = '2020-05';\n\n    return (\n        <div className={styles.page}>\n            <Header title={`Transactions of ${month}`}/>\n            <main>\n                <div className={styles.filter}>\n                    <button className={styles.active}>Все</button>\n                    <button>Траты</button>\n                    <button>Приход</button>\n                </div>\n                <TxList list={transactions} dayDate=\"2020-05-05\"/>\n            </main>\n        </div>\n    );\n};\n","import { RouteProps } from 'react-router';\nimport { TransactionAddPage } from '../pages/TransactionAddPage';\nimport { TransactionsPage } from '../pages/TransactionsPage';\nimport { addQueryString, baseUrl } from './config';\nimport { UUID } from '../models/common/common.types';\n\nexport const transactions = {\n    add: (params?: {\n        account?: UUID;\n    }) => `${baseUrl}/transaction/add` + addQueryString(params),\n    list: () => `${baseUrl}/transactions`,\n};\n\nexport const transactionRoutes: RouteProps[] = [\n    {\n        path: transactions.add(),\n        component: TransactionAddPage,\n    },\n    {\n        path: transactions.list(),\n        component: TransactionsPage,\n    },\n];\n","import React, { FormEvent, useState } from 'react';\nimport { IAddTransactionForm, TransactionType } from '../models/transaction/transaction.types';\nimport { store } from '../store/store';\nimport { addTransaction } from '../models/transaction/transaction.actions';\nimport { useLocation } from 'react-router';\nimport { Header } from '../widgets/Header';\n\nexport const TransactionAddPage = () => {\n    const params = new URLSearchParams(useLocation().search);\n\n    const [amount, setAmount] = useState('123');\n    const [date, setDate] = useState('2020-06-12');\n    const [type, setType] = useState(TransactionType.Expense);\n    const [account, setAccount] = useState(params.get('account') || '');\n\n    const submitHandler = (event: FormEvent) => {\n        event.preventDefault();\n        const formData: IAddTransactionForm = {\n            account,\n            amount,\n            date,\n            category: '',\n            title: '',\n            type,\n        };\n        console.log(formData);\n        store.dispatch(addTransaction(formData));\n    };\n\n    const amountChangeHandler = (event) => {\n        setAmount(event.target.value);\n    };\n\n    const dateChangeHandler = (event) => {\n        setDate(event.target.value);\n    };\n\n    const typeChangeHandler = (event) => {\n        setType(+event.target.value);\n    };\n\n    const accountChangeHandler = (event) => {\n        setAccount(event.target.value);\n    };\n\n    return (\n        <>\n            <Header title=\"Add transaction\"/>\n            <main>\n                <form onSubmit={submitHandler}>\n                    <div>\n                        Amount:\n                        <input type=\"number\" value={amount} onChange={amountChangeHandler}/>\n                    </div>\n\n                    <div>\n                        Date:\n                        <input type=\"date\" value={date} onChange={dateChangeHandler}\n                               list=\"datalist\"/>\n                        <datalist id=\"datalist\">\n                            <option value=\"2020-06-12\" label=\"Today\"/>\n                            <option value=\"2020-06-11\" label=\"Yesterday\"/>\n                        </datalist>\n                    </div>\n\n                    <div>\n                        Type:\n                        <input type=\"radio\" id=\"type-income\"\n                               onChange={typeChangeHandler}\n                               checked={type === TransactionType.Income}\n                               name=\"type\" value={TransactionType.Income}/>\n                        <label htmlFor=\"type-income\">Income</label>\n\n                        <input type=\"radio\" id=\"type-expense\"\n                               checked={type === TransactionType.Expense}\n                               onChange={typeChangeHandler}\n                               name=\"type\" value={TransactionType.Expense}/>\n                        <label htmlFor=\"type-expense\">Expense</label>\n                    </div>\n\n                    <div>\n                        Account:\n                        <input type=\"text\" value={account} onChange={accountChangeHandler}/>\n                    </div>\n\n                    <div>\n                        <button type=\"submit\">Add</button>\n                    </div>\n                </form>\n                <pre>amount: {amount}</pre>\n                <pre>date: {date}</pre>\n                <pre>type: {type}</pre>\n            </main>\n        </>\n    );\n};\n","import { account } from './accounts';\nimport { transactions } from './transactions';\nimport { baseUrl } from './config';\n\nexport const paths = {\n    account,\n    transactions,\n    home: () => `${baseUrl}/accounts`,\n    licenses: () => `${baseUrl}/licenses`,\n};\n","import { RouteProps } from 'react-router';\nimport { accountsRoutes } from './accounts';\nimport { transactionRoutes } from './transactions';\nimport { paths } from './index';\nimport { LicensesPage } from '../pages/LicensesPage';\n\nexport const routes: RouteProps[] = [\n    // {\n    //     path: '/finman/',\n    //     exact: true,\n    //     component: SubsetsPage,\n    // },\n    ...accountsRoutes,\n    ...transactionRoutes,\n    {\n        path: paths.licenses(),\n        component: LicensesPage,\n    },\n];\n","import React from 'react';\nimport styles from './LicensesPage.module.scss';\nimport { Header } from '../widgets/Header';\n\nexport const LicensesPage = () => {\n    return (\n        <>\n            <Header title=\"Licenses\"/>\n            <main className={styles.licenses}>\n                <ol>\n                    <li>\n                        <p className={styles.name}>Icons \"Dripicons\" Version 2.0</p>\n                        <p className={styles.author}>Author <a href=\"http://amitjakhu.com\">Amit Jakhu</a></p>\n                        <p className={styles.license}>\n                            License <a href=\"https://creativecommons.org/licenses/by/4.0/\">CC BY 4.0</a>\n                        </p>\n                    </li>\n                </ol>\n            </main>\n        </>\n    );\n};\n","import * as ReactRouterDom from 'react-router-dom';\n\nexport const Link = ReactRouterDom.Link;\nexport const NavLink = ReactRouterDom.NavLink;\n","import React from 'react';\nimport { paths, NavLink } from '../routes';\nimport styles from './NavBar.module.scss';\n\nexport const NavBar = () => {\n    return (\n        <nav className={styles.bottomNavigation}>\n            <ul>\n                <li>\n                    <NavLink to={paths.home()}>\n                        <div className=\"icon dripicons-home\"/>\n                        <span>Home</span>\n                    </NavLink>\n                </li>\n                {/*<li>*/}\n                {/*    <NavLink to={paths.account.list()}>*/}\n                {/*        <div className=\"icon dripicons-wallet\"/>*/}\n                {/*        <span>Wallets</span>*/}\n                {/*    </NavLink>*/}\n                {/*</li>*/}\n                {/*<li>*/}\n                {/*    <NavLink to={paths.licenses()}>*/}\n                {/*        <div className=\"icon dripicons-graph-pie\"/>*/}\n                {/*        <span>Statistics</span>*/}\n                {/*    </NavLink>*/}\n                {/*</li>*/}\n                {/*<li>*/}\n                {/*    <NavLink to={paths.licenses()}>*/}\n                {/*        <div className=\"icon dripicons-tags\"/>*/}\n                {/*        <span>Categories</span>*/}\n                {/*    </NavLink>*/}\n                {/*</li>*/}\n                {/*<li>*/}\n                {/*    <NavLink to={paths.home()}>*/}\n                {/*        <div className=\"icon dripicons-menu\"/>*/}\n                {/*        <span>Menu</span>*/}\n                {/*    </NavLink>*/}\n                {/*</li>*/}\n                <li>\n                    <NavLink to={paths.transactions.add()}>\n                        <div className=\"icon dripicons-plus\"/>\n                        <span>Add transaction</span>\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink to={paths.licenses()}>\n                        <div className=\"icon dripicons-document\"/>\n                        <span>Licenses</span>\n                    </NavLink>\n                </li>\n            </ul>\n        </nav>\n    );\n};\n","export function eventLogger<T extends { addEventListener: Function }>(emitter: T, emitterName: string, eventName: string | string[]) {\n    if (Array.isArray(eventName))\n        eventName.forEach(name => eventLogger(emitter, emitterName, name));\n    else\n        emitter.addEventListener(eventName, event => {\n            console.log(`[eventLogger] Emitter: \"${emitterName}\", event \"${eventName}\":`, event);\n        });\n}\n","import { eventLogger } from './db.utils';\nimport { UUID } from '../models/common/common.types';\n\nexport class Collection<T = any> {\n    private readonly transaction: IDBTransaction;\n    private readonly storage: IDBObjectStore;\n\n    constructor(private db: IDBDatabase, private scheme: any) {\n        this.transaction = db.transaction(scheme.collection, 'readwrite');\n        eventLogger(\n            this.transaction,\n            'transaction',\n            [\n                'abort',\n                'complete',\n                'error',\n            ],\n        );\n        this.storage = this.transaction.objectStore(scheme.collection);\n    }\n\n    //\n    // public commit(): Promise<void> {\n    //     return new Promise<void>((resolve, reject) => {\n    //         // this.transaction.commit();\n    //     });\n    // }\n\n\n    // Returns an IDBRequest object, and, in a separate thread, creates a structured clone of the value, and stores the cloned value in the object store. This is for adding new records to an object store.\n    public add(value: T, key?: string): Promise<T> {\n        return new Promise((resolve, reject) => {\n\n        });\n        // return this.storage.add(value, key);\n    }\n\n    // Creates and immediately returns an IDBRequest object, and clears this object store in a separate thread. This is for deleting all current records out of an object store.\n    // IDBObjectStore.clear()\n    // Returns an IDBRequest object, and, in a separate thread, returns the total number of records that match the provided key or IDBKeyRange. If no arguments are provided, it returns the total number of records in the store.\n    // IDBObjectStore.count()\n    // Creates a new index during a version upgrade, returning a new IDBIndex object in the connected database.\n    // IDBObjectStore.createIndex()\n    // returns an IDBRequest object, and, in a separate thread, deletes the store object selected by the specified key. This is for deleting individual records out of an object store.\n    // IDBObjectStore.delete()\n    // Destroys the specified index in the connected database, used during a version upgrade.\n    // IDBObjectStore.deleteIndex()\n\n    /** Returns an IDBRequest object, and, in a separate thread, returns the store object store\n     *  selected by the specified key. This is for retrieving specific records from an object store.\n     *\n     *  *IDBObjectStore.get()*\n     */\n    public get(id: UUID): Promise<T> {\n        return new Promise((resolve, reject) => {\n            const request = this.storage.get(id);\n\n            eventLogger(request, 'request', [\n                'error',\n                'success',\n            ]);\n\n            request.onsuccess = (event: any) => resolve(event.target.result);\n            request.onerror = error => reject(error);\n        });\n    }\n\n    // Returns an IDBRequest object, and, in a separate thread retrieves and returns the record key for the object in the object stored matching the specified parameter.\n    // IDBObjectStore.getKey()\n\n    // Returns an IDBRequest object retrieves all objects in the object store matching the specified parameter or all objects in the store if no parameters are given.\n    public getAll(query?: string[], count?: number): Promise<T[]> {\n        if (Array.isArray(query))\n            return Promise.all(query.map(id => this.get(id)));\n\n        return new Promise((resolve, reject) => {\n            const request = this.storage.getAll(query);\n\n            eventLogger(request, 'request', [\n                'error',\n                'success',\n            ]);\n\n            request.onsuccess = (event: any) => resolve(event.target.result);\n            request.onerror = error => reject(error);\n        });\n    }\n\n\n    // Returns an IDBRequest object retrieves record keys for all objects in the object store matching the specified parameter or all objects in the store if no parameters are given.\n    // IDBObjectStore.getAllKeys()\n    // Opens an index from this object store after which it can, for example, be used to return a sequence of records sorted by that index using a cursor.\n    // IDBObjectStore.index()\n    // Returns an IDBRequest object, and, in a separate thread, returns a new IDBCursorWithValue object. Used for iterating through an object store by primary key with a cursor.\n    // IDBObjectStore.openCursor()\n    // Returns an IDBRequest object, and, in a separate thread, returns a new IDBCursor. Used for iterating through an object store with a key.\n    // IDBObjectStore.openKeyCursor()\n\n    /**\n     * Returns an IDBRequest object, and, in a separate thread, creates a structured clone\n     * of the value, and stores the cloned value in the object store. This is for updating\n     * existing records in an object store when the transaction's mode is readwrite.\n     *\n     * *IDBObjectStore.put()*\n     */\n    //\n    public update(value: T): Promise<T> {\n        return new Promise((resolve, reject) => {\n            const request = this.storage.put(value);\n\n            eventLogger(request, 'request', [\n                'error',\n                'success',\n            ]);\n\n            request.onsuccess = (event: any) => resolve(event.target.result);\n            request.onerror = error => reject(error);\n        });\n    }\n}\n","import { DBStatus, DBStatusListener, IScheme } from './db.types';\nimport { Collection } from './collection';\nimport { eventLogger } from './db.utils';\n\nexport class IndexedDB {\n    get status(): DBStatus {\n        return this._status;\n    }\n\n    private listeners: DBStatusListener[] = [];\n\n    private _status = DBStatus.Initializing;\n\n    private db: IDBDatabase | null = null;\n\n    constructor(dbName: string, public schemes: IScheme[]) {\n        if (!window.indexedDB)\n            throw new Error('IndexedDB not supported');\n\n        const version = Math.max(1, ...schemes.map(model => model.dbVersion));\n\n        console.log(`Start DB with version: ${version}, count of models: ${schemes.length}`);\n\n        this.openDB(dbName, version).then(\n            () => console.log('Successfully open DB'),\n            event => console.error('Failed to open DB', event),\n        );\n    }\n\n    public transaction<T>(scheme: IScheme<T>): Collection<T> {\n        if (this._status !== DBStatus.Ready)\n            throw new Error('Database not ready');\n\n        return this.getAccessor(scheme);\n    }\n\n    public addStatusListener(fn: DBStatusListener): void {\n        this.listeners.push(fn);\n        setTimeout(() => fn(this.status));\n    }\n\n    public removeStatusListener(fn: DBStatusListener): void {\n        this.listeners = this.listeners.filter(item => item !== fn);\n    }\n\n    private setStatus(status: DBStatus): void {\n        console.log(`change DB status to \"${DBStatus[status]}\"`);\n        if (status === this._status)\n            return;\n        console.log(`Change DB status from \"${DBStatus[this._status]}\" to \"${DBStatus[status]}\"`);\n        this._status = status;\n        this.listeners.forEach(fn => fn(status));\n    }\n\n    private getAccessor(scheme: IScheme): Collection {\n        if (this.db)\n            return new Collection(this.db, scheme);\n        else\n            throw new Error('Cannot create accessor for closed database');\n    }\n\n    private openDB(dbName: string, version: number): Promise<void> {\n        this.setStatus(DBStatus.Initializing);\n        return new Promise(((resolve, reject) => {\n            const openRequest = window.indexedDB.open(dbName, version);\n            eventLogger(\n                openRequest,\n                'openRequest',\n                [\n                    'upgradeneeded',\n                    'blocked',\n                    'error',\n                    'success',\n                ],\n            );\n            openRequest.addEventListener('upgradeneeded', (event: any) => {\n                this.setStatus(DBStatus.Upgrading);\n                const oldVersion: number = event.oldVersion;\n                const newVersion: number = event.newVersion;\n                if (oldVersion)\n                    console.log(`Upgrade DB from version ${oldVersion}`);\n                else\n                    console.log('Initialize DB');\n\n                const transaction: IDBTransaction = this.db = event.target.transaction;\n                console.log(transaction);\n                const db: IDBDatabase = this.db = event.target.result;\n\n                console.log(Array.from(db.objectStoreNames));\n\n                this.schemes.forEach(scheme => {\n                    let objectStore: IDBObjectStore;\n                    try {\n                        objectStore = transaction.objectStore(scheme.collection);\n                    } catch (e) {\n                        console.warn(e);\n                        objectStore = db.createObjectStore(scheme.collection, {keyPath: scheme.key});\n                    }\n\n                    console.log(objectStore);\n                    if (scheme.upgrade) {\n                        scheme.upgrade(objectStore!, oldVersion, newVersion);\n                    }\n                });\n            });\n            openRequest.addEventListener('success', (event: any) => {\n                this.db = event.target.result;\n                this.setStatus(DBStatus.Ready);\n                resolve();\n            });\n            openRequest.addEventListener('error', (event: any) => {\n                console.log(event);\n                this.setStatus(DBStatus.Failed);\n                reject(event);\n            });\n        }));\n    }\n}\n","import { IExtendSummary, UUID } from '../common/common.types';\nimport { IDay } from '../day/day.class';\nimport { MonthDate } from '../common/date.types';\n\nexport enum SyncStatus {\n    NoSynced,\n    Prepared,\n    Syncing,\n    FullySynced,\n    Fixed,\n}\n\nexport interface IMonthBrief {\n    id: UUID;\n    month: MonthDate;\n    summary: IExtendSummary;\n    prevMonths: UUID[];\n    prevVersions: UUID[];\n    dataHash: string;\n}\n\nexport interface IMonth extends IMonthBrief {\n    syncStatus: SyncStatus;\n    timestamp: number;\n    account: UUID;\n    days: IDay[];\n}\n","import { Money } from '../money/money.class';\n\nexport type UUID = string;\nexport type HASH = string;\n\nexport interface ISummary {\n    balance: Money;\n    income: Money;\n    expense: Money;\n}\n\nexport interface IExtendSummary extends ISummary {\n    balanceOnStart: Money;\n    balanceOnEnd: Money;\n}\n\nexport const EmptySummary: ISummary = {\n    balance: Money.empty,\n    income: Money.empty,\n    expense: Money.empty,\n};\n\nexport const EmptyExtendSummary: IExtendSummary = {\n    ...EmptySummary,\n    balanceOnStart: Money.empty,\n    balanceOnEnd: Money.empty,\n};\n\nObject.freeze(EmptySummary);\nObject.freeze(EmptyExtendSummary);\n","import { ITransaction, TransactionType } from './transaction.types';\nimport { IExtendSummary, ISummary } from '../common/common.types';\nimport { Money } from '../money/money.class';\n\nexport const EMPTY_SUMMARY: ISummary = {\n    income: Money.empty,\n    expense: Money.empty,\n    balance: Money.empty,\n};\n\nexport function calculateSummary(transactions: ITransaction[]): ISummary {\n    let [expense, income] = transactions.reduce(\n        ([expense, income], tx) => {\n            switch (tx.type) {\n                case TransactionType.Removed:\n                    return [expense, income];\n                case TransactionType.Income:\n                    return [\n                        expense,\n                        income.add(tx.amount),\n                    ];\n                case TransactionType.Expense:\n                    return [\n                        expense.add(tx.amount),\n                        income,\n                    ];\n                default:\n                    throw new Error(`Can't process type \"${TransactionType[tx.type]}\"`);\n            }\n        },\n        [Money.empty, Money.empty],\n    );\n\n    const balance = income.sub(expense);\n\n    return {\n        balance,\n        expense,\n        income,\n    };\n}\n\nexport function calculateExtendSummary(transactions: ITransaction[]): IExtendSummary {\n    let balanceOnStart = Money.empty;\n\n    const summary = calculateSummary(transactions);\n\n    return {\n        ...summary,\n        balanceOnStart,\n        balanceOnEnd: balanceOnStart.add(summary.balance),\n    };\n}\n\nexport function addSummary(base: ISummary, add: ISummary): ISummary {\n    const balance = base.balance.add(add.balance);\n    const expense = base.expense.add(add.expense);\n    const income = base.income.add(add.income);\n    if (!income.sub(expense).equal(balance)) {\n        if (!checkSummary(base))\n            throw new Error(`\"Base\" summary invalid`);\n        if (!checkSummary(add))\n            throw new Error(`\"Add\" summary invalid`);\n        throw new Error(`Incorrect balance`);\n    }\n    return {\n        balance,\n        expense,\n        income,\n    };\n}\n\nexport function addExtendSummary(base: IExtendSummary, add: ISummary): IExtendSummary {\n    const summary = addSummary(base, add);\n    const balanceOnStart = base.balanceOnStart;\n    const balanceOnEnd = base.balanceOnEnd.add(add.balance);\n    if (!summary.income.sub(summary.expense).equal(summary.balance)) {\n        if (!checkExtendSummary(base))\n            throw new Error(`\"Base\" summary invalid`);\n        if (!checkSummary(add))\n            throw new Error(`\"Add\" summary invalid`);\n        throw new Error(`Incorrect balance`);\n    }\n    return {\n        ...summary,\n        balanceOnStart,\n        balanceOnEnd,\n    };\n}\n\nexport function checkSummary(summary: ISummary): boolean {\n    const balance = summary.income.sub(summary.expense);\n    return balance.equal(summary.balance);\n}\n\nexport function checkExtendSummary(summary: IExtendSummary): boolean {\n    if (!checkSummary(summary))\n        return false;\n    const balance = summary.income.sub(summary.expense);\n    const balanceOnEnd = summary.balanceOnStart.add(balance);\n    return balanceOnEnd.equal(summary.balanceOnEnd);\n}\n","import { DayDate, MonthDate } from './date.types';\n\nexport function parseMonthDate(value: MonthDate): Date {\n    const match: RegExpMatchArray | null = value.match(/^(\\d{4})-(\\d{2})$/);\n    if (!match)\n        throw new Error(`Invalid MonthDate \"${value}\"`);\n\n    const year = +match[1];\n    const month = +match[2] - 1;\n    const date = new Date(year, month, 1, 12, 0, 0);\n\n    if (date.getFullYear() !== year)\n        throw new Error(`Invalid year in \"${value}\"`);\n    if (date.getMonth() !== month)\n        throw new Error(`Invalid month in \"${value}\"`);\n\n    return date;\n}\n\nexport function parseDayDate(value: DayDate): Date {\n    const match: RegExpMatchArray | null = value.match(/^(\\d{4})-(\\d{2})-(\\d{2})$/);\n    if (!match)\n        throw new Error(`Invalid DayDate \"${value}\"`);\n\n    const year = +match[1];\n    const month = +match[2] - 1;\n    const day = +match[3];\n    const date = new Date(year, month, day, 12, 0, 0);\n\n    if (date.getFullYear() !== year)\n        throw new Error(`Invalid year in \"${value}\"`);\n    if (date.getMonth() !== month)\n        throw new Error(`Invalid month in \"${value}\"`);\n    if (date.getDate() !== day)\n        throw new Error(`Invalid date in \"${value}\"`);\n\n    return date;\n}\n\nexport function dayDateToMonth(day: DayDate): MonthDate {\n    return day.split('-', 2).join('-');\n}\n","import { v1 as uuidGenerator } from 'uuid';\nimport { ITransaction, TransactionType } from './transaction.types';\nimport { UUID } from '../common/common.types';\nimport { Money } from '../money/money.class';\n\nexport class Transaction implements ITransaction {\n    public id: UUID = '';\n    public amount: Money = Money.empty;\n    public type: TransactionType = TransactionType.Removed;\n    public category: UUID | '' = '';\n    public title: string | '' = '';\n    public createdAt: number = 0;\n    public updatedAt: number = 0;\n\n    public static createWithID(id: UUID, type?: TransactionType,\n                               amount?: Money): Transaction;\n    public static createWithID(id: UUID, type: TransactionType,\n                               amount: string | number,\n                               currencyName: string): Transaction;\n    public static createWithID(id: UUID, type: TransactionType = TransactionType.Removed,\n                               amount?: string | number | Money,\n                               currencyName?: string): Transaction {\n        const tx = new Transaction({\n            id,\n            amount: Money.empty,\n            type,\n            category: '',\n            title: '',\n            createdAt: 0,\n            updatedAt: 0,\n        });\n\n        if (amount)\n            return tx.setAmount(amount as any, currencyName as any);\n        else\n            return tx;\n    }\n\n    public static create(type?: TransactionType,\n                         amount?: Money): Transaction;\n    public static create(type: TransactionType,\n                         amount: string | number,\n                         currencyName: string): Transaction;\n    public static create(type: TransactionType = TransactionType.Removed,\n                         amount?: string | number | Money,\n                         currencyName?: string): Transaction {\n        const id = uuidGenerator();\n\n        const tx = new Transaction({\n            id,\n            amount: Money.empty,\n            type,\n            category: '',\n            title: '',\n            createdAt: 0,\n            updatedAt: 0,\n        });\n\n        if (amount)\n            return tx.setAmount(amount as any, currencyName as any);\n        else\n            return tx;\n    }\n\n    public static fromJSON(data: ITransaction): Transaction { // TODO больше валидации\n        return new Transaction({\n            id: data.id,\n            amount: Money.from(data.amount),\n            type: data.type,\n            category: data.category,\n            title: data.title,\n            createdAt: data.createdAt,\n            updatedAt: data.updatedAt,\n        });\n    }\n\n    private constructor(data: ITransaction) {\n        Object.assign(this, data);\n    }\n\n    public toJSON(): object {\n        return {\n            id: this.id,\n            amount: this.amount.toJSON(),\n            type: this.type,\n            category: this.category,\n            title: this.title,\n            createdAt: this.createdAt,\n            updatedAt: this.updatedAt,\n        };\n    }\n\n    public setAmount(money: Money): Transaction;\n    public setAmount(amount: string | number, currencyName: string): Transaction;\n    public setAmount(amount: string | number | Money, currencyName?: string): Transaction {\n        let money: Money;\n        if ((typeof amount === 'string' || typeof amount === 'number') && typeof currencyName === 'string')\n            money = Money.create(amount, currencyName);\n        else\n            money = Money.from(amount as (string | Money));\n\n        return new Transaction({\n            ...this,\n            amount: money,\n        });\n    }\n\n    public setType(type: TransactionType): Transaction {\n        return new Transaction({\n            ...this,\n            type,\n        });\n    }\n\n    public setCategory(category: UUID | ''): Transaction {\n        return new Transaction({\n            ...this,\n            category,\n        });\n    }\n\n    public setTitle(title: string | ''): Transaction {\n        return new Transaction({\n            ...this,\n            title,\n        });\n    }\n\n    public setCreatedAt(createdAt: number): Transaction {\n        return new Transaction({\n            ...this,\n            createdAt,\n        });\n    }\n\n    public setUpdatedAt(updatedAt: number): Transaction {\n        return new Transaction({\n            ...this,\n            updatedAt,\n        });\n    }\n}\n","import { EmptySummary, ISummary } from '../common/common.types';\nimport { ITransaction } from '../transaction/transaction.types';\nimport { calculateSummary } from '../transaction/transactions.utils';\nimport { DayDate } from '../common/date.types';\nimport { parseDayDate } from '../common/date.utils';\nimport { Money } from '../money/money.class';\nimport { Transaction } from '../transaction/transaction.class';\n\nexport interface IDay {\n    date: DayDate;\n    summary: ISummary;\n    transactions: ITransaction[];\n}\n\nexport class Day implements IDay {\n    public readonly date: DayDate = '';\n    public readonly dateTime: Date = new Date();\n    public readonly summary: ISummary = EmptySummary;\n    public readonly transactions: Transaction[] = [];\n\n    public static create(date: DayDate): Day {\n        return new Day({date});\n    }\n\n    public static fromJSON(value: any): Day {\n        return new Day({\n            date: value.date,\n            summary: {\n                balance: Money.fromJSON(value.summary.balance),\n                income: Money.fromJSON(value.summary.income),\n                expense: Money.fromJSON(value.summary.expense),\n            },\n            transactions: value.transactions.map(Transaction.fromJSON),\n        });\n    }\n\n    protected constructor(data: Partial<Day>) {\n        Object.assign(this, data);\n        this.dateTime = parseDayDate(this.date);\n    }\n\n    public toJSON(): any {\n        return {\n            date: this.date,\n            summary: {\n                balance: this.summary.balance.toJSON(),\n                income: this.summary.income.toJSON(),\n                expense: this.summary.expense.toJSON(),\n            },\n            transactions: this.transactions.map(tx => tx.toJSON()),\n        };\n    }\n\n    public addTransaction(tx: ITransaction): Day {\n        const transactions: ITransaction[] = [\n            ...this.transactions,\n            tx,\n        ];\n\n        const summary: ISummary = calculateSummary(transactions);\n\n        return new Day({\n            ...this,\n            summary,\n            transactions,\n        });\n    }\n}\n","import sha1 from 'crypto-js/sha1';\nimport { EmptyExtendSummary, EmptySummary, IExtendSummary, UUID } from '../common/common.types';\nimport { IMonth, IMonthBrief, SyncStatus } from './month.types';\nimport { Day, IDay } from '../day/day.class';\nimport { getDaysInMonth } from 'date-fns';\nimport { parseMonthDate } from '../common/date.utils';\nimport { DayDate, MonthDate } from '../common/date.types';\nimport { addSummary } from '../transaction/transactions.utils';\nimport { Money } from '../money/money.class';\n\n/**\n * ID является хешем от данных, при любом изменении создается новый экземпляр с новым ID\n * Класс гарантирует совпадение данных при совпадении ID\n */\nexport class Month implements IMonth {\n    public readonly id: UUID = '';\n    public readonly version: number = 1;\n    public readonly account: UUID = '';\n    public readonly month: MonthDate = '';\n    public readonly syncStatus: SyncStatus = SyncStatus.NoSynced;\n    public readonly prevMonths: UUID[] = [];\n    public readonly prevVersions: UUID[] = [];\n    public readonly dataHash: string = '';\n    public readonly timestamp: number = 0;\n    public readonly updatedAt: Date = new Date(0);\n    public readonly summary: IExtendSummary = EmptyExtendSummary;\n    public readonly days: Day[] = [];\n    public readonly daysInMonth: number = 0;\n\n    /**\n     * @param account\n     * @param month\n     * @param timestamp\n     */\n    public static createFirstBlock(account: UUID, month: MonthDate, timestamp: number): Month {\n        const daysInMonth = getDaysInMonth(parseMonthDate(month));\n\n        return new Month({\n            timestamp,\n            account,\n            month,\n            daysInMonth,\n            days: [],\n            syncStatus: SyncStatus.Fixed,\n        });\n    }\n\n    public static generateID(month: Month, dataHash?: string): string {\n        if (month.version !== 1)\n            throw new Error(`Version ${month.version} not supported`);\n\n        const data = {\n            version: month.version,\n            account: month.account,\n            prevMonths: month.prevMonths,\n            prevVersions: month.prevVersions,\n            dataHash: dataHash || month.getDataHash(),\n        };\n\n        const hash = sha1(JSON.stringify(data)).toString();\n\n        const date = parseMonthDate(month.month);\n        const year = date.getFullYear() - 1970;\n        const monthID = (year * 12 + date.getMonth()).toString(16).padStart(3, '0');\n\n        const ts = (month.timestamp / 1000).toString(16)\n                                           .substr(0, 11)\n                                           .replace('.', '');\n\n        let id = `${monthID}${ts}${hash}`.substr(0, 32);\n\n        id = [\n            id.substr(0, 8),\n            id.substr(8, 4),\n            id.substr(12, 4),\n            id.substr(16, 4),\n            id.substr(20, 12),\n        ].join('-');\n\n        return id;\n    }\n\n    /**\n     * Создание мердж блока\n     *\n     * @param blocks Предыдущие блоки цепочки\n     * @param revisions Предыдущие версии блока\n     */\n    public static merge(blocks: Month[], revisions: Month[]): Month {\n        // отсортировать по алфавиту\n        // проверить sync статус\n\n        throw new Error();\n    }\n\n    public static getBrief(month: IMonthBrief): IMonthBrief {\n        return {\n            id: month.id,\n            month: month.month,\n            summary: month.summary,\n            prevMonths: month.prevMonths,\n            prevVersions: month.prevVersions,\n            dataHash: month.dataHash,\n        };\n    }\n\n    public static fromJSON(value: any): Month {\n        return new Month({\n            id: value.id,\n            version: value.version,\n            account: value.account,\n            month: value.month,\n            syncStatus: value.syncStatus,\n            prevMonths: value.prevMonths,\n            prevVersions: value.prevVersions,\n            dataHash: value.dataHash,\n            timestamp: value.timestamp,\n            updatedAt: value.updatedAt,\n            daysInMonth: value.daysInMonth,\n            summary: {\n                balance: Money.fromJSON(value.summary.balance),\n                income: Money.fromJSON(value.summary.income),\n                expense: Money.fromJSON(value.summary.expense),\n                balanceOnStart: Money.fromJSON(value.summary.balanceOnStart),\n                balanceOnEnd: Money.fromJSON(value.summary.balanceOnEnd),\n            },\n            days: value.days.map(Day.fromJSON),\n        });\n    }\n\n    public toJSON(): any {\n        return {\n            id: this.id,\n            version: this.version,\n            account: this.account,\n            month: this.month,\n            syncStatus: this.syncStatus,\n            prevMonths: this.prevMonths,\n            prevVersions: this.prevVersions,\n            dataHash: this.dataHash,\n            timestamp: this.timestamp,\n            updatedAt: this.updatedAt,\n            daysInMonth: this.daysInMonth,\n            summary: {\n                balance: this.summary.balance.toJSON(),\n                income: this.summary.income.toJSON(),\n                expense: this.summary.expense.toJSON(),\n                balanceOnStart: this.summary.balanceOnStart.toJSON(),\n                balanceOnEnd: this.summary.balanceOnEnd.toJSON(),\n            },\n            days: this.days.map(day => day.toJSON()),\n        };\n    }\n\n    protected constructor(value: Partial<Month>) { // FIXME use all fields of Month\n        Object.assign(this, value);\n        this.dataHash = this.getDataHash();\n        this.id = Month.generateID(this, this.dataHash);\n    }\n\n    public getBrief(): IMonthBrief {\n        return Month.getBrief(this);\n    }\n\n    public getDataHash(): string {\n        if (!this.days.length)\n            return '0000000000000000000000000000000000000000';\n\n        const data = {\n            days: this.days!.map(day => day.toJSON()),\n        };\n        return sha1(JSON.stringify(data)).toString();\n    }\n\n    public changeSyncStatus(syncStatus: SyncStatus): Month {\n        if (syncStatus === this.syncStatus)\n            return this;\n\n        switch (this.syncStatus) {\n            case SyncStatus.NoSynced:\n                if (syncStatus === SyncStatus.Prepared)\n                    return new Month({...this, syncStatus});\n                break;\n            case SyncStatus.Prepared:\n                if (syncStatus === SyncStatus.Syncing)\n                    return new Month({...this, syncStatus});\n                break;\n            case SyncStatus.Syncing:\n                if (syncStatus === SyncStatus.FullySynced)\n                    return new Month({...this, syncStatus});\n                break;\n            case SyncStatus.FullySynced:\n        }\n\n        throw new Error(`Can not change sync status from \"${SyncStatus[this.syncStatus]}\" to \"${SyncStatus[syncStatus]}\"`);\n    }\n\n    public createDay(date: number | DayDate): Day {\n        if (typeof date === 'number')\n            return Day.create(this.createDayDate(date));\n        else if (date.substr(0, 7) === this.month)\n            return Day.create(date);\n        else\n            throw new Error(`Date \"${date}\" not of month \"${this.month}\"`);\n    }\n\n    public createDayDate(day: number): string {\n        return this.month + '-' + day.toString().padStart(2, '0');\n    }\n\n    public createNextBlock(month: MonthDate, timestamp: number): Month {\n        const daysInMonth = getDaysInMonth(parseMonthDate(month));\n\n        const summary: IExtendSummary = {\n            balanceOnStart: this.summary.balanceOnEnd,\n            income: Money.empty,\n            expense: Money.empty,\n            balanceOnEnd: this.summary.balanceOnEnd,\n            balance: Money.empty,\n        };\n\n        return new Month({\n            account: this.account,\n            month,\n            prevMonths: [this.id],\n            prevVersions: [],\n            timestamp,\n            // updatedAt: timestamp, // TODO\n            summary,\n            days: [],\n            daysInMonth,\n            syncStatus: SyncStatus.Fixed,\n        });\n    }\n\n    public isDateOfMonth(date: DayDate): boolean {\n        return date.substr(0, 7) === this.month;\n    }\n\n    public recalculateWithNewStartBalance(startBalance: Money): Month {\n        return new Month({\n            ...this,\n            summary: calculateSummaryFromStartBalance(startBalance, this.days),\n        });\n    }\n\n    public updatePrevMonths(prevMonths: IMonthBrief[], timestamp: number): Month {\n        if (prevMonths.length !== 1)\n            throw new Error(`Sorry, can not process not one prevMonths`);\n\n        if (prevMonths[0].month >= this.month)\n            throw new Error(`All prevMonths must be earlier then updating month`);\n\n        if (prevMonths.length === this.prevMonths.length\n            && prevMonths.every((item, index) => this.prevMonths[index] === item.id))\n            return this;\n\n        return new Month({\n            ...this,\n            timestamp,\n            prevMonths: prevMonths.map(item => item.id),\n            prevVersions: this.syncStatus\n                ? this.id\n                    ? [this.id]\n                    : []\n                : this.prevVersions || [],\n            summary: calculateSummaryFromStartBalance(Money.from(prevMonths[0].summary.balanceOnEnd), this.days),\n        });\n    }\n\n    public getDay(dayDate: DayDate): Day {\n        const day = this.days.find(item => item.date === dayDate);\n        return day || this.createDay(dayDate);\n    }\n\n    public updateDay(newDay: Day): Month {\n        if (!(newDay instanceof Day))\n            throw new Error(`Cannot update month, newDay must be instance of Day`);\n\n        if (!this.isDateOfMonth(newDay.date))\n            throw new Error(`Day \"${newDay.date}\" not of month \"${this.month}\"`);\n\n        const days = this.days.slice();\n        const dayIndex = this.days.findIndex(item => item.date === newDay.date);\n        if (dayIndex === -1) {\n            days.push(newDay);\n            days.sort((a, b) => a.date > b.date ? 1 : -1);\n        } else {\n            days.splice(dayIndex, 1, newDay);\n        }\n\n        const summary = calculateSummaryFromStartBalance(this.summary.balanceOnStart, days);\n\n        return new Month({\n            ...this,\n            syncStatus: SyncStatus.NoSynced,\n            days,\n            summary,\n            prevVersions: this.syncStatus\n                ? this.id\n                    ? [this.id]\n                    : []\n                : this.prevVersions || [],\n        });\n    }\n}\n\nfunction calculateSummaryFromStartBalance(startBalance: Money, days: IDay[]): IExtendSummary {\n    const baseSummary = days.reduce(\n        (acc, day) => addSummary(acc, day.summary),\n        EmptySummary,\n    );\n\n    return {\n        ...baseSummary,\n        balanceOnStart: startBalance,\n        balanceOnEnd: startBalance.add(baseSummary.balance),\n    };\n}\n","import { ISubset } from './subset.types';\nimport { UUID } from '../common/common.types';\nimport { Money } from '../money/money.class';\nimport { IMonthBrief } from '../month/month.types';\nimport { v1 } from 'uuid';\nimport { Month } from '../month/month.class';\n\nexport class Subset implements ISubset {\n    public id: UUID = '';\n    public name: string = '';\n    public balance: Money = Money.empty;\n    public months: IMonthBrief[] = [];\n    public head: IMonthBrief = null;\n    public loaded = false;\n\n    private constructor(subset: Partial<Subset>) {\n        Object.assign(this, subset);\n\n        const month = Month.createFirstBlock('123', '2020-10', 123151213235);\n    }\n\n    public static create(name: string): Subset {\n        const id = v1();\n        return new Subset({\n            id,\n            name,\n        });\n    }\n\n    public static fromJSON(data: ISubset): Subset {\n        return new Subset({\n            id: data.id,\n            name: data.name,\n            balance: Money.from(data.balance),\n        });\n    }\n\n    public toJSON() {\n        return {\n            id: this.id,\n            name: this.name,\n            balance: this.balance.toJSON(),\n        };\n    }\n}\n","import { Subset } from './subset.class';\nimport { IScheme } from '../../indexed-db';\n\nexport const SubsetScheme: IScheme<Subset> = {\n    collection: 'subsets',\n    dbVersion: 1,\n    key: 'id',\n    upgrade(objectStore, oldVersion, newVersion): void {\n        console.log('update subsets from ', oldVersion, newVersion);\n\n        const defaultSubset = Subset.create('Default');\n\n        objectStore.add(defaultSubset.toJSON());\n    },\n};\n","import { IMonthBrief } from '../month/month.types';\nimport { Month } from '../month/month.class';\nimport { UUID } from '../common/common.types';\n\n/**\n * Обновление цепочки\n * @param head Новая голова\n * @param additions Обновленные звенья\n * @param old Старая цепочка\n */\nexport function updateMonthChain(head: IMonthBrief | Month,\n                                 additions: ReadonlyArray<IMonthBrief | Month>,\n                                 old: ReadonlyArray<IMonthBrief>): ReadonlyArray<IMonthBrief> {\n    head = Month.getBrief(head);\n\n    additions = additions.map(Month.getBrief);\n\n    old = old.map(Month.getBrief);\n\n    const {chain, completed} = findChain(head, additions);\n\n    // console.log(completed, chain.map(item => item.month + ' ' + item.id), old.length);\n\n    if (old.length === 0)\n        if (completed)\n            return chain;\n        else\n            throw new RequiredMonthsError(...chain.pop()!.prevMonths);\n\n    if (completed) {\n        if (!isVersionOfMonth(chain[chain.length - 1], old[old.length - 1], additions))\n            throw new CanNotFastForwardMonthError(old, chain);\n    } else {\n        const first = chain[chain.length - 1];\n\n        const preFirstID = first.prevMonths[0];\n\n        const preFirstIndex = old.findIndex(item => item.id === preFirstID);\n\n        console.log('completed', completed);\n        console.log('preFirstIndex', preFirstIndex);\n\n        console.log('head', [head.month, head.id, head.prevMonths, head.prevVersions].join(' '));\n        console.log('adds');\n        console.log(additions.map(item => [item.month, item.id, item.prevMonths, item.prevVersions].join(' ')));\n        console.log('old chain');\n        console.log(old.map(item => [item.month, item.id, item.prevMonths, item.prevVersions].join(' ')));\n\n        if (preFirstIndex === -1)\n            throw new RequiredMonthsError(preFirstID);\n    }\n\n    const monthsNumbersSet = new Set();\n    // for (let i = 0; i < preFirstIndex; i++)\n    //     monthsNumbersSet.add(old[i].month);\n    old.forEach(item => monthsNumbersSet.add(item.month));\n\n    chain.forEach(item => monthsNumbersSet.add(item.month));\n\n    const monthsNumbers = Array.from(monthsNumbersSet.keys());\n    monthsNumbers.sort();\n\n    const table = monthsNumbers.map(month => {\n        const element = chain.find(item => item.month === month);\n        const oldEl = old.find(item => item.month === month);\n\n        const check = element\n            ? isVersionOfMonth(element, oldEl, additions)\n            : null;\n\n        if (check === false)\n            throw new CanNotFastForwardMonthError(old, chain);\n\n        return {\n            month,\n            oldEl,\n            element,\n            check,\n        };\n    });\n\n    console.log('table');\n    console.table(table);\n\n    table.reverse();\n\n    const newChain = table.map(item => item.element || item.oldEl!);\n\n    checkChain(newChain);\n\n    if (newChain[0]!.id !== head.id)\n        throw new Error('Invalid Head month');\n\n    return newChain;\n}\n\n/**\n * Проверяет является ли element версией oldEl\n * Так же вернет true если element измененная версия oldEl\n * @param element Проверяемый элемент\n * @param oldEl Предполагаемые предок\n * @param additions Дополнительные блоки\n */\nexport function isVersionOfMonth(element: IMonthBrief, oldEl: IMonthBrief | undefined, additions: ReadonlyArray<IMonthBrief> = []): boolean {\n    if (!oldEl)\n        return true;\n\n    if (element.month !== oldEl.month)\n        return false;\n\n    const items = [oldEl, ...additions];\n\n    if (element.prevVersions.every((id, index) => oldEl.prevVersions[index] === id))\n        return true;\n\n    for (; element.id !== oldEl.id;) {\n        if (element.prevVersions.length === 0)\n            return false;\n\n        if (element.prevVersions.length > 1)\n            throw new Error('Я не умею во много предыдущих месяцев');\n\n        const nextId = element.prevVersions[0];\n\n        const next = items.find(item => item.id === nextId);\n\n        if (next)\n            element = next;\n        else\n            throw new RequiredMonthsError(nextId);\n    }\n\n    return true;\n}\n\nexport function findChain(head: IMonthBrief, items: ReadonlyArray<IMonthBrief>): {\n    completed: boolean,\n    chain: IMonthBrief[],\n} {\n    const chain: IMonthBrief[] = [];\n\n    let lastBlock: IMonthBrief | undefined = head;\n    do {\n        chain.push(lastBlock);\n\n        if (lastBlock.prevMonths.length === 0)\n            return {\n                completed: true,\n                chain,\n            };\n\n        if (lastBlock.prevMonths.length !== 1)\n            throw new Error(`Can not process merged month ${lastBlock.id} (${lastBlock.month}): more then 1 prevMonths`);\n        if (lastBlock.prevVersions.length > 1)\n            throw new Error(`Can not process merged month ${lastBlock.id} (${lastBlock.month}): more then 1 prevVersions`);\n\n        const nextID = lastBlock.prevMonths[0];\n        lastBlock = items.find(item => item.id === nextID);\n\n        if (!lastBlock) {\n            return {\n                completed: false,\n                chain,\n            };\n        }\n    } while (true);\n}\n\nexport function checkChain(chain: ReadonlyArray<IMonthBrief>): boolean {\n    if (chain.length === 0) return false;\n\n    console.log('check chain');\n    console.table(chain);\n\n    for (let i = 0; i < chain.length - 1; i++) {\n        const current = chain[i];\n        const next = chain[i + 1];\n        if (next.month >= current.month)\n            throw new MonthChainError(`month must be less then ${current.month}`, chain, next);\n\n        if (!current.prevMonths.length)\n            throw new MonthChainError(`unexpected end of chain`, chain, current);\n\n        if (current.prevMonths.length > 1)\n            throw new MonthChainError(`can not process month with not 1 prevMonths`, chain, current);\n\n        if (current.prevMonths[0] !== next.id)\n            throw new MonthChainError('invalid prevMonth', chain, current);\n    }\n\n    // let lastBlock: IMonthBrief | undefined = head;\n    // do {\n    //     chain.push(lastBlock);\n    //\n    //     if (lastBlock.prevMonths.length === 0)\n    //         return {\n    //             completed: true,\n    //             chain,\n    //         };\n    //\n    //     if (lastBlock.prevMonths.length !== 1)\n    //         throw new Error(`Can not process merged month ${lastBlock.id} (${lastBlock.month}): more then 1 prevMonths`);\n    //     if (lastBlock.prevVersions.length > 1)\n    //         throw new Error(`Can not process merged month ${lastBlock.id} (${lastBlock.month}): more then 1 prevVersions`);\n    //\n    //     const nextID = lastBlock.prevMonths[0];\n    //     lastBlock = items.find(item => item.id === nextID);\n    //\n    //     if (!lastBlock) {\n    //         return {\n    //             completed: false,\n    //             chain,\n    //         };\n    //     }\n    // } while (true);\n    return true;\n}\n\nexport class MonthChainError extends Error {\n    constructor(public reason: string,\n                public chain: ReadonlyArray<IMonthBrief>,\n                public invalidMonth: IMonthBrief) {\n        super(`Invalid chain: ${reason} at ${invalidMonth.id} (${invalidMonth.month})`);\n    }\n}\n\nexport class RequiredMonthsError extends Error {\n    public ids: UUID[];\n\n    constructor(...ids: UUID[]) {\n        super(`Required months: ${ids.join(', ')}`);\n        this.ids = ids;\n    }\n}\n\nexport class CanNotFastForwardMonthError extends Error {\n    constructor(public from: ReadonlyArray<IMonthBrief>,\n                public to: ReadonlyArray<IMonthBrief>) {\n        super([`Can not fast forward`,\n            `from ${from[0].id} (${from[0].month}, length ${from.length})`,\n            `to ${to[0].id} (${to[0].month}, length ${to.length})`,\n        ].join('\\n'));\n    }\n}\n","import { Money } from '../money/money.class';\nimport { Day } from '../day/day.class';\nimport { IMonthBrief } from './month.types';\n\nexport class MonthBrief {\n    public static fromJSON(value: any): IMonthBrief {\n        return {\n            id: value.id,\n            month: value.month,\n            prevMonths: value.prevMonths,\n            prevVersions: value.prevVersions,\n            dataHash: value.dataHash,\n            summary: {\n                balance: Money.fromJSON(value.summary.balance),\n                income: Money.fromJSON(value.summary.income),\n                expense: Money.fromJSON(value.summary.expense),\n                balanceOnStart: Money.fromJSON(value.summary.balanceOnStart),\n                balanceOnEnd: Money.fromJSON(value.summary.balanceOnEnd),\n            },\n        };\n    }\n\n    public static toJSON(value: IMonthBrief): any {\n        return {\n            id: value.id,\n            month: value.month,\n            prevMonths: value.prevMonths,\n            prevVersions: value.prevVersions,\n            dataHash: value.dataHash,\n            summary: {\n                balance: value.summary.balance.toJSON(),\n                income: value.summary.income.toJSON(),\n                expense: value.summary.expense.toJSON(),\n                balanceOnStart: value.summary.balanceOnStart.toJSON(),\n                balanceOnEnd: value.summary.balanceOnEnd.toJSON(),\n            },\n        };\n    }\n}\n","import { ISummary, UUID } from '../common/common.types';\nimport { Money } from '../money/money.class';\nimport { IMonthBrief } from '../month/month.types';\nimport { IAccount } from './account.types';\nimport { v1 as uuidGenerator } from 'uuid';\nimport { Month } from '../month/month.class';\nimport { Map } from 'immutable';\nimport { findChain, RequiredMonthsError, updateMonthChain } from './chain.utils';\nimport { addSummary, EMPTY_SUMMARY } from '../transaction/transactions.utils';\nimport { MonthBrief } from '../month/month.brief';\n\n/**\n * Contains information about Account\n */\nexport class Account implements IAccount, ISummary {\n    public readonly id: UUID = '';\n    public readonly name: string = '';\n    public readonly balance: Money = Money.empty;\n    public readonly income: Money = Money.empty;\n    public readonly expense: Money = Money.empty;\n    public readonly head: IMonthBrief | null = null;\n    public readonly months: ReadonlyArray<Readonly<IMonthBrief>> = [];\n    public readonly fullMonths: Map<UUID, Month> = Map();\n\n    public static create(name: string, id?: UUID): Account {\n        return new Account({\n            id: id || uuidGenerator(),\n            name,\n        });\n    }\n\n    public static fromJSON(data: any): Account {\n        return new Account({\n            id: data.id,\n            name: data.name,\n            balance: Money.fromJSON(data.balance),\n            income: Money.fromJSON(data.income),\n            expense: Money.fromJSON(data.expense),\n            months: data.months.map(MonthBrief.fromJSON),\n            head: data.head ? MonthBrief.fromJSON(data.head) : null,\n        });\n    }\n\n    private constructor(account: Partial<Account>) {\n        return Object.assign(this, account);\n    }\n\n    public toJSON(): any {\n        return {\n            id: this.id,\n            name: this.name,\n            balance: this.balance.toJSON(),\n            income: this.income.toJSON(),\n            expense: this.expense.toJSON(),\n            months: this.months.map(MonthBrief.toJSON),\n            head: this.head ? MonthBrief.toJSON(this.head) : null,\n        };\n    }\n\n    public forceSetHead_unsafe(head: Month, months: Month[]): Account {\n        const {chain, completed} = findChain(head, months);\n\n        if (!completed) {\n            const last = chain.pop();\n            const required = [\n                ...last!.prevMonths,\n                ...last!.prevVersions,\n            ].filter(\n                id => !months.find(item => item.id !== id),\n            );\n\n            throw new RequiredMonthsError(...required);\n        }\n\n        const {income, expense, balance} = chain.reduce((acc, item) => addSummary(acc, item.summary), EMPTY_SUMMARY);\n\n        return new Account({\n            ...this,\n            head,\n            months: chain.map(Month.getBrief),\n            balance,\n            income,\n            expense,\n        });\n        // throw new Error('Not implements');\n        // throw new RequiredMonthsError(['123123123']);\n    }\n\n    public updateHead(head: Month, additions: Month[] = []): Account {\n        const chain = updateMonthChain(head, additions, this.months);\n\n        const {income, expense, balance} = chain.reduce((acc, item) => addSummary(acc, item.summary), EMPTY_SUMMARY);\n\n        return new Account({\n            ...this,\n            head: Month.getBrief(head),\n            months: chain.map(Month.getBrief),\n            balance,\n            income,\n            expense,\n        });\n    }\n\n    public checkChain(): boolean {\n        if (!this.head && this.months.length === 0)\n            return true;\n\n        const {chain, completed} = findChain(this.head!, this.months);\n\n        if (!completed)\n            return false;\n\n        if (chain.length !== this.months.length)\n            return false;\n\n        return true;\n    }\n}\n\n","import { IScheme } from '../../indexed-db';\nimport { Account } from './account.class';\nimport { IAccount } from './account.types';\n\nexport const AccountScheme: IScheme<IAccount> = {\n    collection: 'accounts',\n    dbVersion: 1,\n    key: 'id',\n    upgrade(objectStore, oldVersion, newVersion): void {\n        console.log('update account from ', oldVersion, newVersion);\n\n        const defaultAccount = Account.create('Default');\n\n        objectStore.add(defaultAccount.toJSON());\n    },\n};\n","import { IScheme } from '../../indexed-db';\nimport { IMonth } from './month.types';\n\nexport const MonthScheme: IScheme<IMonth> = {\n    collection: 'months',\n    dbVersion: 1,\n    key: 'id',\n    upgrade(objectStore, oldVersion, newVersion): void {\n        console.log('update months from ', oldVersion, newVersion);\n\n        // const defaultAccount = Month.create('Default');\n        //\n        // objectStore.add(defaultAccount.toJSON());\n    },\n};\n","import { DBStatus, IndexedDB } from '../indexed-db';\nimport { useEffect } from 'react';\nimport { SubsetScheme } from '../models/subset/subset.scheme';\nimport { Action, Store, PayloadActionCreator } from '@reatom/core';\nimport {\n    chooseAccount,\n    loadAccounts,\n    loadAccountsFailed,\n    loadAccountsSuccess,\n    saveAccount, saveAccountFailed,\n    saveAccountSuccess,\n} from '../atoms/accounts/accounts.actions';\nimport { Account } from '../models/account/account.class';\nimport {\n    loadMonths,\n    loadMonthsFailed,\n    loadMonthsSuccess,\n    saveMonths, saveMonthsFailed,\n    saveMonthsSuccess,\n} from '../atoms/months/months.actions';\nimport { UUID } from '../models/common/common.types';\nimport { Month } from '../models/month/month.class';\nimport { AccountScheme } from '../models/account/account.scheme';\nimport { MonthScheme } from '../models/month/month.scheme';\nimport { Accounts } from '../atoms/accounts/accounts.atom';\n\nconst CURRENT_ACCOUNT_KEY = 'currentAccount';\n\nexport const db = new IndexedDB('test', [\n    SubsetScheme,\n    AccountScheme,\n    MonthScheme,\n]);\n\nexport function useDBReady(onReady: () => void) {\n    console.log('useDBReady');\n\n    const onChangeStatusEvent = (status: DBStatus) => {\n        console.log(DBStatus[status]);\n        if (status === DBStatus.Ready)\n            onReady();\n    };\n\n    useEffect(() => {\n        db.addStatusListener(onChangeStatusEvent);\n        return () => db.removeStatusListener(onChangeStatusEvent);\n    });\n}\n\nconst handlers: { [action: string]: Function } = {};\n\nfunction addActionHandler<T>(action: PayloadActionCreator<T>, handler: (payload: T, store: Store) => void) {\n    if (handlers[action.getType()])\n        throw new Error(`Can not add new handler for action \"${action.getType()}\"`);\n\n    handlers[action.getType()] = handler;\n}\n\naddActionHandler(chooseAccount, payload => {\n    localStorage.setItem(CURRENT_ACCOUNT_KEY, payload);\n});\n\naddActionHandler(loadAccounts, (_, store) => {\n    db.transaction(AccountScheme)\n      .getAll().then(\n        result => {\n            if (!result.length)\n                return console.warn('No accounts exists');\n\n            store.dispatch(loadAccountsSuccess({\n                current: localStorage.getItem(CURRENT_ACCOUNT_KEY),\n                accounts: result.map(Account.fromJSON),\n            }));\n        },\n        error => store.dispatch(loadAccountsFailed(error)),\n    );\n});\n\nexport function initIndexedDB(store: Store) {\n    store.subscribe(action => {\n        console.log(action);\n\n        if (handlers[action.type])\n            handlers[action.type](action.payload, store);\n\n        switch (action.type) {\n            case saveAccount.getType(): {\n                const account = action.payload as Account;\n                db.transaction(AccountScheme)\n                  .update(account.toJSON() as any).then(\n                    result => store.dispatch(saveAccountSuccess(account.id)),\n                    error => store.dispatch(saveAccountFailed({id: account.id, error})),\n                );\n                break;\n            }\n            case loadMonths.getType(): {\n                const ids = action.payload as UUID[];\n\n                db.transaction(MonthScheme)\n                  .getAll(ids).then(\n                    result => {\n                        console.log(ids);\n                        console.log(result);\n                        const months = result.map(Month.fromJSON);\n                        store.dispatch(loadMonthsSuccess(months));\n                    },\n                    error => store.dispatch(loadMonthsFailed({ids, error})),\n                );\n                break;\n            }\n            case saveMonths.getType(): {\n                const months = (action.payload as Month[]).map(month => month.toJSON());\n                const ids = months.map(item => item.id);\n                const tx = db.transaction(MonthScheme);\n                Promise.all(months.map(month => tx.update(month)))\n                       .then(\n                           () => store.dispatch(saveMonthsSuccess(ids)),\n                           error => store.dispatch(saveMonthsFailed({ids, error})),\n                       );\n                break;\n            }\n        }\n    });\n}\n","import { runSaga, stdChannel, Saga } from 'redux-saga';\nimport { PayloadActionCreator, Store } from '@reatom/core';\nimport { takeEvery, call } from 'redux-saga/effects';\n\nclass SagaLauncher {\n    private sagas: Saga[] = [];\n\n    register(saga: Saga): void {\n        this.sagas.push(saga);\n    }\n\n    onAction(actionCreator: PayloadActionCreator<any>,\n             saga: Saga,\n             sagaName = 'Some saga'): void {\n        this.register(function* () {\n            yield takeEvery(actionCreator.getType(), saga);\n            // yield takeEvery(actionCreator.getType(), function* (...params) {\n            //     try {\n            //         console.log(`[Saga logger] Saga \"${sagaName}\" started`);\n            //         yield* saga(...params);\n            //         console.log(`[Saga logger] Saga \"${sagaName}\" completed`);\n            //     } catch (e) {\n            //         console.log(`[Saga logger] Saga \"${sagaName}\" failed`);\n            //         console.error(e);\n            //     }\n            // });\n        });\n    }\n\n    start(store: Store) {\n        console.log(`Start ${this.sagas.length} sagas`);\n\n        const sagaOptions = {\n            dispatch: store.dispatch,\n            getState: () => store.getState,\n            channel: stdChannel(),\n        };\n\n        store.subscribe(sagaOptions.channel.put);\n\n        this.sagas.forEach(saga => runSaga(sagaOptions, saga));\n    }\n}\n\nexport const sagaLauncher = new SagaLauncher();\n\ntype ExtractInner<T> = T extends Generator<any, infer R, any> ? R : never;\n\nexport interface PackedSaga<Fn extends (...args: any[]) => any> {\n    (...args: Parameters<Fn>): Generator<any, ExtractInner<ReturnType<Fn>>, any>;\n\n    originalSaga: (...args: Parameters<Fn>) => Generator<any, ExtractInner<ReturnType<Fn>>, any>;\n}\n\nfunction sagaCallPacker<Fn extends (...args: any[]) => any = any>(saga: Fn): PackedSaga<Fn> {\n    const fn = function* PackedSaga<Fn extends (...args: any[]) => any = any>(...params: Parameters<Fn>): Generator<any, ExtractInner<Fn>, any> {\n        return yield call(saga as any, ...params);\n    };\n    fn.originalSaga = saga;\n    return fn;\n}\n\nexport const SagaPacker = {\n    call: sagaCallPacker,\n};\n","import { select, call } from 'redux-saga/effects';\nimport { Atom } from '@reatom/core';\nimport { SagaPacker } from '../saga-launcher';\n\nexport const SagaUtils = {\n    /**\n     * Select atom from Store\n     * @param atom\n     */\n    selectAtom: SagaPacker.call(selectAtomFn),\n    /**\n     * Get current timestamp\n     */\n    getTimestamp: SagaPacker.call(getTimestampFn),\n};\n\n/**\n * @deprecated\n * @param atom\n */\nexport const selectAtom = atom => call(selectAtomFn, atom);\n\nexport function* selectAtomFn(atom: Atom<any>) {\n    return yield select(getState => getState(atom));\n}\n\n/**\n * @deprecated\n */\nexport const getTimestamp = () => call(getTimestampFn);\n\nexport function getTimestampFn() {\n    return new Date().getTime();\n}\n\nexport function delay(timeout = 0): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, timeout));\n}\n","import { put, take } from 'redux-saga/effects';\nimport { Action } from '@reatom/core';\nimport { MonthDate } from '../../models/common/date.types';\nimport { Account } from '../../models/account/account.class';\nimport { Month } from '../../models/month/month.class';\nimport { getTimestamp, SagaUtils, selectAtom } from '../helpers/helpers';\nimport { SagaPacker } from '../saga-launcher';\nimport {\n    saveMonths,\n    saveMonthsSuccess,\n    saveMonthsFailed,\n    loadMonths,\n    loadMonthsSuccess,\n    loadMonthsFailed,\n} from '../../atoms/months/months.actions';\nimport { UUID } from '../../models/common/common.types';\nimport { Months } from '../../atoms/months/months.atom';\n\nexport const MonthUtils = {\n    /**\n     * Get or create Month of Account's chain\n     */\n    get: SagaPacker.call(getMonthSaga),\n    /**\n     * Get months from DB\n     */\n    getByIds: SagaPacker.call(getMonthsByIdsSaga),\n    /**\n     * Save months to DB\n     */\n    save: SagaPacker.call(saveMonthsSaga),\n};\n\nfunction* getMonthsByIdsSaga(ids: UUID[]): Generator<any, Month[], any> {\n    const months: Map<UUID, Month> = yield selectAtom(Months);\n\n    console.log(months);\n    const notExists = ids.filter(id => !months.has(id));\n\n    if (!notExists)\n        return ids.map(id => months.get(id));\n\n    yield put(loadMonths(notExists));\n    let action: Action<any>;\n    do {\n        action = yield take([loadMonthsSuccess, loadMonthsFailed]);\n        if (action.type === loadMonthsSuccess.getType()) {\n            if (action.payload.every((item, index) => item.id === notExists[index])) {\n                const months = yield selectAtom(Months);\n                return ids.map(id => months.get(id));\n            }\n        } else {\n            if (action.payload.ids.every((item, index) => item === notExists[index]))\n                throw action.payload.error;\n        }\n    } while (true);\n}\n\nfunction* getMonthSaga(account: Account, monthDate: MonthDate) {\n    if (!account.head) {\n        const timestamp: number = yield getTimestamp();\n        console.log('timestamp', timestamp);\n        return Month.createFirstBlock(account.id, monthDate, timestamp);\n    }\n\n    // create next block\n    if (monthDate > account.head.month) {\n        const [head]: Month[] = yield* MonthUtils.getByIds([account.head.id]);\n        const timestamp: number = yield getTimestamp();\n        return head.createNextBlock(monthDate, timestamp);\n    }\n\n    // return exists month\n    {\n        const indexOfMonth = account.months.findIndex(item => item.month === monthDate);\n        if (indexOfMonth > -1) {\n            const monthsIds = account.months\n                                     .slice(0, indexOfMonth + 1)\n                                     .map(item => item.id);\n            const months = yield* MonthUtils.getByIds(monthsIds);\n            return months.pop();\n        }\n    }\n\n    // create block in the middle of chain\n    {\n        const monthsIds: UUID[] = [];\n\n        for (let i = 0; i < account.months.length; i++) {\n            const currentMonth = account.months[i];\n\n            monthsIds.push(currentMonth.id);\n\n            if (currentMonth.month < monthDate)\n                break;\n        }\n\n        const months = yield* MonthUtils.getByIds(monthsIds);\n        const monthsToSave: Month[] = [];\n\n        const timestamp = yield* SagaUtils.getTimestamp();\n\n        let lastMonth = months.pop();\n\n        const newMonth = lastMonth = lastMonth.createNextBlock(monthDate, timestamp);\n        monthsToSave.push(lastMonth);\n\n        for (let month = months.pop(); month; month = months.pop()) {\n            const updated = month.updatePrevMonths([lastMonth], timestamp);\n            monthsToSave.push(updated);\n            lastMonth = updated;\n        }\n\n        yield* MonthUtils.save(monthsToSave);\n\n        return newMonth;\n    }\n}\n\nfunction* saveMonthsSaga(months: Month[]) {\n    yield put(saveMonths(months));\n    for (; ;) {\n        const action = yield take([saveMonthsSuccess.getType(), saveMonthsFailed.getType()]);\n        console.log(action);\n        if (action.type === saveMonthsSuccess.getType()) {\n            if (months.every((item, index) => action.payload[index] === item.id))\n                return;\n        } else if (action.type === saveMonthsFailed.getType()) {\n            if (months.every((item, index) => action.payload.ids[index] === item.id))\n                throw action.payload.error;\n        } else {\n            console.error('invalid action ' + action.type, action);\n        }\n    }\n}\n","import { Month } from '../../models/month/month.class';\nimport { Account } from '../../models/account/account.class';\nimport { UUID } from '../../models/common/common.types';\nimport { SagaPacker } from '../saga-launcher';\nimport { Accounts, IAccountsState } from '../../atoms/accounts/accounts.atom';\nimport { select, put, take } from 'redux-saga/effects';\nimport { saveAccount, saveAccountSuccess, saveAccountFailed } from '../../atoms/accounts/accounts.actions';\nimport { MonthUtils } from './month.saga';\nimport { isVersionOfMonth, RequiredMonthsError } from '../../models/account/chain.utils';\nimport { SagaUtils } from '../helpers/helpers';\n\nexport const AccountUtils = {\n    select: SagaPacker.call(selectAccountSaga),\n    update: SagaPacker.call(updateAccountSaga),\n    save: SagaPacker.call(saveAccountSaga),\n};\n\n/**\n * Select account from Store\n * @param id\n */\nfunction* selectAccountSaga(id: UUID) {\n    const accounts: IAccountsState = yield select(getState => getState(Accounts));\n    const account: Account = accounts.accounts.get(id);\n\n    if (!account)\n        throw new Error(`Account \"${id}\" not found`);\n\n    return account;\n}\n\n/**\n * Обновляет месяц в аккаунте, при необходимости правит оставшуюся цепочку, сохраняет\n *\n * FIXME So raw. Needs refactoring\n *\n * @param account\n * @param month\n */\nfunction* updateAccountSaga(account: Account, month: Month) {\n    console.log('*** updateAccountSaga');\n    console.log(account.months.map(item => item.month));\n    console.log(month.month, month.id);\n    let currentMonthIndex = account.months.findIndex(item => item.month === month.month);\n    let prevMonthIndex = account.months.findIndex(item => item.month < month.month);\n\n    if (!account.head) {\n        yield* MonthUtils.save([month]);\n        const accountToUpdate = account.updateHead(month);\n        yield* AccountUtils.save(accountToUpdate);\n        return accountToUpdate;\n    }\n\n\n    let toIndex = currentMonthIndex === -1\n        ? prevMonthIndex\n        : currentMonthIndex;\n\n    const monthsIds: UUID[] = account.months\n                                     .slice(0, toIndex + 1)\n                                     .map(item => item.id);\n\n    const additionalMonths: Month[] = [month];\n\n    console.log(monthsIds);\n\n    if (monthsIds.length)\n        additionalMonths.push(...yield* MonthUtils.getByIds(monthsIds));\n\n    const timestamp = yield* SagaUtils.getTimestamp();\n\n    console.log({\n        currentMonthIndex,\n        prevMonthIndex,\n        toIndex,\n        additions: additionalMonths.map(item => [item.month + ' ' + item.id]),\n        months: account.months\n                       .slice(0, toIndex + 1)\n                       .map(item => item.month),\n    });\n\n    let monthsToUpdate = [month];\n\n    console.log('additional');\n    console.log(additionalMonths.map(item => `${item.month} ${item.id}`));\n    console.log('chain');\n    console.log(account.months.map(item => `${item.month} ${item.id}`));\n\n    console.log('prevMonthIndex', prevMonthIndex, account.months[prevMonthIndex]?.month);\n\n    if (currentMonthIndex === -1 && prevMonthIndex === -1)\n        throw new Error('Unexpection');\n\n    if (currentMonthIndex === -1 && prevMonthIndex !== -1) {\n        currentMonthIndex = prevMonthIndex;\n    } else {\n        const existsMonth = account.months[currentMonthIndex];\n        if (existsMonth.month !== month.month)\n            throw new Error('somethings wrong');\n        if (!isVersionOfMonth(month, existsMonth))\n            throw new Error('somethings wrong');\n\n    }\n\n    console.log('currentMonthIndex', currentMonthIndex, account.months[currentMonthIndex]?.month);\n    if (currentMonthIndex !== -1) {\n        let previousMonth: Month = month;\n\n        for (let index = currentMonthIndex - 1; index >= 0; index--) {\n            console.log('index', index, account.months[index].month);\n            const currentMonthId = account.months[index].id;\n            const currentMonth = additionalMonths.find(item => item.id === currentMonthId);\n            if (!currentMonth)\n                throw new RequiredMonthsError(currentMonthId);\n            previousMonth = currentMonth.updatePrevMonths([previousMonth], timestamp);\n            additionalMonths.push(previousMonth);\n            monthsToUpdate.push(previousMonth);\n        }\n\n        console.log('additionalMonths', additionalMonths.map(item => [item.month + ' ' + item.id]));\n\n        const accountToUpdate = account.updateHead(previousMonth, additionalMonths);\n\n        yield* MonthUtils.save(monthsToUpdate);\n        yield* AccountUtils.save(accountToUpdate);\n        return accountToUpdate;\n    }\n\n\n    throw new Error('may be first');\n\n\n}\n\nexport function* saveAccountSaga(account: Account) {\n    yield put(saveAccount(account));\n    for (; ;) {\n        const action = yield take([saveAccountSuccess, saveAccountFailed]);\n        if (action.type === saveAccountSuccess.getType()) {\n            if (action.payload === account.id)\n                return;\n        } else {\n            if (action.payload.id === account.id)\n                throw action.payload.error;\n        }\n    }\n}\n","import { addTransaction } from '../../models/transaction/transaction.actions';\nimport { sagaLauncher } from '../saga-launcher';\nimport { IAddTransactionForm } from '../../models/transaction/transaction.types';\nimport { dayDateToMonth } from '../../models/common/date.utils';\nimport { Action } from '@reatom/core';\nimport { AccountUtils } from '../utils/account.saga';\nimport { MonthUtils } from '../utils/month.saga';\nimport { Transaction } from '../../models/transaction/transaction.class';\n\nsagaLauncher.onAction(addTransaction, addTransactionSaga);\n\nexport function* addTransactionSaga(action: Action<IAddTransactionForm>) {\n    console.log('*** addTransactionSaga started');\n    const payload: IAddTransactionForm = action.payload;\n    const account = yield* AccountUtils.select(payload.account);\n    const month = yield* MonthUtils.get(account, dayDateToMonth(payload.date));\n\n    console.log('addTransactionSaga', month.id, month.prevVersions);\n\n    const tx = Transaction.create(\n        payload.type,\n        payload.amount,\n        'RUB',\n    );\n\n    const day = month.getDay(payload.date)\n                     .addTransaction(tx);\n\n    const updatedMonth = month.updateDay(day);\n\n    console.log('updatedMonth', updatedMonth.id, updatedMonth.prevVersions);\n\n    const value = yield* AccountUtils.update(account, updatedMonth);\n    console.log('*** addTransactionSaga complete');\n    return value;\n}\n","import { take } from 'redux-saga/effects';\nimport { sagaLauncher } from '../saga-launcher';\nimport { loadAccountsSuccess } from '../../atoms/accounts/accounts.actions';\n\nsagaLauncher.register(transactionUpdateSaga);\n\nfunction* transactionUpdateSaga() {\n    console.log('init transactionUpdateSaga');\n    while (true) {\n        const action = yield take(loadAccountsSuccess.getType());\n        console.log('load successssssss', action);\n    }\n}\n","import React from 'react';\nimport styles from './App.module.scss';\nimport { Redirect, Route, Switch } from 'react-router';\nimport { HashRouter } from 'react-router-dom';\nimport { NavBar } from './widgets/NavBar';\nimport { useAction, useAtom } from '@reatom/react';\nimport { Client } from './atoms/client/client.atom';\nimport { startListenOnlineStatus } from './atoms/client/client.service';\nimport { store } from './store/store';\nimport { initIndexedDB, useDBReady } from './store/db';\nimport './sagas';\nimport { sagaLauncher } from './sagas';\nimport { paths, routes } from './routes';\nimport { refresh } from './atoms/client/client.actions';\n\nexport const App = () => {\n    const client = useAtom(Client);\n    const refreshAllHandler = useAction(() => {\n        console.log('*** refreshAllHandler');\n\n        initIndexedDB(store);\n\n        console.log('*** refreshAllHandler complete');\n\n        return refresh();\n    }, []);\n    useDBReady(refreshAllHandler);\n\n    return (\n        <div className={styles.App}>\n            <HashRouter>\n                <Switch>\n                    {routes.map((route, index) => <Route {...route} key={index}/>)}\n                    <Redirect to={paths.home()}/>\n                </Switch>\n                <NavBar/>\n            </HashRouter>\n        </div>\n    );\n};\n\nstartListenOnlineStatus(store);\nsagaLauncher.start(store);\n","import { Store } from '@reatom/core';\nimport { setOnlineStatus } from './client.actions';\n\nexport function startListenOnlineStatus(store: Store) {\n    store.dispatch(setOnlineStatus(navigator.onLine));\n\n    window.addEventListener('online',\n        () => store.dispatch(setOnlineStatus(true)),\n    );\n    window.addEventListener('offline',\n        () => store.dispatch(setOnlineStatus(false)),\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst SW_DEBUG = false;\n\nconst isLocalhost = SW_DEBUG ||\n    Boolean(\n        window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n        ),\n    );\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void;\n    onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n    if ((SW_DEBUG || process.env.NODE_ENV === 'production') && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(\n            process.env.PUBLIC_URL,\n            window.location.href,\n        );\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log('Offline Mode ready');\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n             .register(swUrl)\n             .then(registration => {\n                 registration.onupdatefound = () => {\n                     const installingWorker = registration.installing;\n                     if (installingWorker == null) {\n                         return;\n                     }\n                     installingWorker.onstatechange = () => {\n                         if (installingWorker.state === 'installed') {\n                             if (navigator.serviceWorker.controller) {\n                                 // At this point, the updated precached content has been fetched,\n                                 // but the previous service worker will still serve the older\n                                 // content until all client tabs are closed.\n                                 console.log(\n                                     'New content is available and will be used when all ' +\n                                     'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                                 );\n\n                                 // Execute callback\n                                 if (config && config.onUpdate) {\n                                     config.onUpdate(registration);\n                                 }\n                             } else {\n                                 // At this point, everything has been precached.\n                                 // It's the perfect time to display a\n                                 // \"Content is cached for offline use.\" message.\n                                 console.log('Content is cached for offline use.');\n\n                                 // Execute callback\n                                 if (config && config.onSuccess) {\n                                     config.onSuccess(registration);\n                                 }\n                             }\n                         }\n                     };\n                 };\n             })\n             .catch(error => {\n                 console.error('Error during service worker registration:', error);\n             });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: {'Service-Worker': 'script'},\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.',\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n                 .then(registration => {\n                     registration.unregister();\n                 })\n                 .catch(error => {\n                     console.error(error.message);\n                 });\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { context } from '@reatom/react';\nimport './styles/index.scss';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { initDB } from './indexed-db';\nimport { store } from './store/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <context.Provider value={store}>\n            <App/>\n        </context.Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\ninitDB();\n","export function initDB() {\n    console.log('*************** initDB');\n// This is what our customer data looks like.\n    const customerData = [\n        {ssn: '444-44-4444', name: 'Bill', age: 35, email: 'bill@company.com'},\n        {ssn: '555-55-5555', name: 'Donna', age: 32, email: 'donna@home.org'},\n    ];\n    const dbName = 'the_name';\n\n    const request = indexedDB.open(dbName, 3);\n\n    request.onerror = function (event) {\n        // Handle errors.\n    };\n    request.onsuccess = function (event: any) {\n        const db: IDBDatabase = event.target.result;\n        (window as any).db = db;\n\n        const transaction = db.transaction(['customers'], 'readwrite');\n        const objectStore = transaction.objectStore('customers');\n        const r = objectStore.add({age: 44, email: 'asd', name: 'asd', ssn: '123'});\n        r.onsuccess = (event) => console.log(event);\n    };\n    request.onupgradeneeded = function (event: any) {\n        const db = event.target.result;\n\n        console.log('upgrade');\n\n        // Create an objectStore to hold information about our customers. We're\n        // going to use \"ssn\" as our key path because it's guaranteed to be\n        // unique.\n        const objectStore = db.createObjectStore('customers', {keyPath: 'ssn'});\n\n        // Create an index to search customers by name. We may have duplicates\n        // so we can't use a unique index.\n        objectStore.createIndex('name', 'name', {unique: false});\n\n        // Create an index to search customers by email. We want to ensure that\n        // no two customers have the same email, so use a unique index.\n        objectStore.createIndex('email', 'email', {unique: true});\n\n        // Store values in the newly created objectStore.\n        for (let i in customerData) {\n            objectStore.add(customerData[i]);\n        }\n    };\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"txList\":\"TxList_txList__3rowt\",\"txItem\":\"TxList_txItem__2-7sR\",\"txItem__left\":\"TxList_txItem__left__3Dekh\",\"txItem__first\":\"TxList_txItem__first__eF_WE\",\"txItem__second\":\"TxList_txItem__second__-lQ89\",\"txItem__amount\":\"TxList_txItem__amount__2PbUA\",\"txItem__date\":\"TxList_txItem__date__3uUSP\",\"empty\":\"TxList_empty__2S-7j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list_cover\":\"DetailsMainButton_list_cover__2DdLg\",\"button\":\"DetailsMainButton_button__3YOZv\",\"left\":\"DetailsMainButton_left__3m4Lo\",\"title\":\"DetailsMainButton_title__1uX6F\",\"bar\":\"DetailsMainButton_bar__2XK9g\",\"moreGood\":\"DetailsMainButton_moreGood__2D5VT\",\"barGood\":\"DetailsMainButton_barGood__1Qzv3\",\"barNormal\":\"DetailsMainButton_barNormal__1lJoy\",\"barBad\":\"DetailsMainButton_barBad__ftJbe\",\"right\":\"DetailsMainButton_right__P2GXw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"accountPage\":\"AccountsPage_accountPage__1j2V2\",\"accountWidget\":\"AccountsPage_accountWidget__uYsSo\",\"name\":\"AccountsPage_name__2LT7U\",\"balance\":\"AccountsPage_balance__xyUA5\",\"addTx\":\"AccountsPage_addTx__KMHVA\",\"accountStyle_blue\":\"AccountsPage_accountStyle_blue__K6Eqo\",\"accountStyle_green\":\"AccountsPage_accountStyle_green__3Hm77\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"swipeWidget\":\"SwipeWidget_swipeWidget__12ZdL\",\"prev\":\"SwipeWidget_prev__UDZne\",\"next\":\"SwipeWidget_next__1huSl\",\"swipe\":\"SwipeWidget_swipe__1ww0t\",\"swipe-wrap\":\"SwipeWidget_swipe-wrap__x4MEz\",\"swipeItem\":\"SwipeWidget_swipeItem__2D3OP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"moneyView\":\"MoneyView_moneyView__2U7sP\",\"fractional\":\"MoneyView_fractional__1hdQj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"licenses\":\"LicensesPage_licenses__3Ik4Y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"days\":\"MonthTxList_days__1hzzo\",\"day\":\"MonthTxList_day__1_h7Y\",\"title\":\"MonthTxList_title__VajvW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"page\":\"TransactionsPage_page__1uE4j\",\"filter\":\"TransactionsPage_filter__3x4B8\",\"active\":\"TransactionsPage_active__3XoOk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__30F5v\",\"title\":\"Header_title__1vmPo\"};"],"sourceRoot":""}